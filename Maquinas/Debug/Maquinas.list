
Maquinas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002cac  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08002db8  08002db8  00012db8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002e30  08002e30  00012e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000160  20000000  08002e34  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001310  20000160  08002f94  00020160  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20001470  08002f94  00021470  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
  9 .debug_info   0001cdc9  00000000  00000000  00020189  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00003db5  00000000  00000000  0003cf52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000081c2  00000000  00000000  00040d07  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00000c30  00000000  00000000  00048ed0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00001040  00000000  00000000  00049b00  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00007246  00000000  00000000  0004ab40  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    00004334  00000000  00000000  00051d86  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000560ba  2**0
                  CONTENTS, READONLY
 17 .debug_frame  000020ac  00000000  00000000  00056138  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000160 	.word	0x20000160
 8000128:	00000000 	.word	0x00000000
 800012c:	08002da0 	.word	0x08002da0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000164 	.word	0x20000164
 8000148:	08002da0 	.word	0x08002da0

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 f88c 	bl	8000280 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 f842 	bl	8000200 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	20000118 	.word	0x20000118
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 f81b 	bl	80001dc <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f002 fb6a 	bl	8002884 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	200003a4 	.word	0x200003a4
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	200003a4 	.word	0x200003a4

080001dc <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001dc:	4a07      	ldr	r2, [pc, #28]	; (80001fc <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001de:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001e0:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001e2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80001ea:	041b      	lsls	r3, r3, #16
 80001ec:	0c1b      	lsrs	r3, r3, #16
 80001ee:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80001f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80001f6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80001f8:	60d3      	str	r3, [r2, #12]
 80001fa:	4770      	bx	lr
 80001fc:	e000ed00 	.word	0xe000ed00

08000200 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000200:	4b17      	ldr	r3, [pc, #92]	; (8000260 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000202:	b530      	push	{r4, r5, lr}
 8000204:	68dc      	ldr	r4, [r3, #12]
 8000206:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800020a:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800020e:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000210:	2b04      	cmp	r3, #4
 8000212:	bf28      	it	cs
 8000214:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000216:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000218:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800021c:	bf98      	it	ls
 800021e:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000220:	fa05 f303 	lsl.w	r3, r5, r3
 8000224:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000228:	bf88      	it	hi
 800022a:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800022c:	4019      	ands	r1, r3
 800022e:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000230:	fa05 f404 	lsl.w	r4, r5, r4
 8000234:	3c01      	subs	r4, #1
 8000236:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000238:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800023a:	ea42 0201 	orr.w	r2, r2, r1
 800023e:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000242:	bfaf      	iteee	ge
 8000244:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000248:	4b06      	ldrlt	r3, [pc, #24]	; (8000264 <HAL_NVIC_SetPriority+0x64>)
 800024a:	f000 000f 	andlt.w	r0, r0, #15
 800024e:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000250:	bfa5      	ittet	ge
 8000252:	b2d2      	uxtbge	r2, r2
 8000254:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000258:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 800025e:	bd30      	pop	{r4, r5, pc}
 8000260:	e000ed00 	.word	0xe000ed00
 8000264:	e000ed14 	.word	0xe000ed14

08000268 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000268:	2301      	movs	r3, #1
 800026a:	0942      	lsrs	r2, r0, #5
 800026c:	f000 001f 	and.w	r0, r0, #31
 8000270:	fa03 f000 	lsl.w	r0, r3, r0
 8000274:	4b01      	ldr	r3, [pc, #4]	; (800027c <HAL_NVIC_EnableIRQ+0x14>)
 8000276:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800027a:	4770      	bx	lr
 800027c:	e000e100 	.word	0xe000e100

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80002ac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80002b0:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80002b2:	4616      	mov	r6, r2
 80002b4:	4b65      	ldr	r3, [pc, #404]	; (800044c <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80002b6:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 800045c <HAL_GPIO_Init+0x1b0>
 80002ba:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000460 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80002be:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c2:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80002c4:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80002c8:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80002cc:	45a0      	cmp	r8, r4
 80002ce:	d17f      	bne.n	80003d0 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80002d0:	684d      	ldr	r5, [r1, #4]
 80002d2:	2d12      	cmp	r5, #18
 80002d4:	f000 80af 	beq.w	8000436 <HAL_GPIO_Init+0x18a>
 80002d8:	f200 8088 	bhi.w	80003ec <HAL_GPIO_Init+0x140>
 80002dc:	2d02      	cmp	r5, #2
 80002de:	f000 80a7 	beq.w	8000430 <HAL_GPIO_Init+0x184>
 80002e2:	d87c      	bhi.n	80003de <HAL_GPIO_Init+0x132>
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	f000 808e 	beq.w	8000406 <HAL_GPIO_Init+0x15a>
 80002ea:	2d01      	cmp	r5, #1
 80002ec:	f000 809e 	beq.w	800042c <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80002f0:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80002f4:	2cff      	cmp	r4, #255	; 0xff
 80002f6:	bf93      	iteet	ls
 80002f8:	4682      	movls	sl, r0
 80002fa:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80002fe:	3d08      	subhi	r5, #8
 8000300:	f8d0 b000 	ldrls.w	fp, [r0]
 8000304:	bf92      	itee	ls
 8000306:	00b5      	lslls	r5, r6, #2
 8000308:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800030c:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800030e:	fa09 f805 	lsl.w	r8, r9, r5
 8000312:	ea2b 0808 	bic.w	r8, fp, r8
 8000316:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800031a:	bf88      	it	hi
 800031c:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000320:	ea48 0505 	orr.w	r5, r8, r5
 8000324:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000328:	f8d1 a004 	ldr.w	sl, [r1, #4]
 800032c:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000330:	d04e      	beq.n	80003d0 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000332:	4d47      	ldr	r5, [pc, #284]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000334:	4f46      	ldr	r7, [pc, #280]	; (8000450 <HAL_GPIO_Init+0x1a4>)
 8000336:	69ad      	ldr	r5, [r5, #24]
 8000338:	f026 0803 	bic.w	r8, r6, #3
 800033c:	f045 0501 	orr.w	r5, r5, #1
 8000340:	61bd      	str	r5, [r7, #24]
 8000342:	69bd      	ldr	r5, [r7, #24]
 8000344:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000348:	f005 0501 	and.w	r5, r5, #1
 800034c:	9501      	str	r5, [sp, #4]
 800034e:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000352:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000356:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000358:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 800035c:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000360:	fa09 f90b 	lsl.w	r9, r9, fp
 8000364:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000368:	4d3a      	ldr	r5, [pc, #232]	; (8000454 <HAL_GPIO_Init+0x1a8>)
 800036a:	42a8      	cmp	r0, r5
 800036c:	d068      	beq.n	8000440 <HAL_GPIO_Init+0x194>
 800036e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000372:	42a8      	cmp	r0, r5
 8000374:	d066      	beq.n	8000444 <HAL_GPIO_Init+0x198>
 8000376:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800037a:	42a8      	cmp	r0, r5
 800037c:	d064      	beq.n	8000448 <HAL_GPIO_Init+0x19c>
 800037e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000382:	42a8      	cmp	r0, r5
 8000384:	bf0c      	ite	eq
 8000386:	2503      	moveq	r5, #3
 8000388:	2504      	movne	r5, #4
 800038a:	fa05 f50b 	lsl.w	r5, r5, fp
 800038e:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 8000392:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000396:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000398:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 800039c:	bf14      	ite	ne
 800039e:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80003a0:	43a5      	biceq	r5, r4
 80003a2:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80003a4:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80003a6:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80003aa:	bf14      	ite	ne
 80003ac:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80003ae:	43a5      	biceq	r5, r4
 80003b0:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b2:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80003b4:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80003b8:	bf14      	ite	ne
 80003ba:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80003bc:	43a5      	biceq	r5, r4
 80003be:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c0:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80003c2:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80003c6:	bf14      	ite	ne
 80003c8:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80003ca:	ea25 0404 	biceq.w	r4, r5, r4
 80003ce:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80003d0:	3601      	adds	r6, #1
 80003d2:	2e10      	cmp	r6, #16
 80003d4:	f47f af73 	bne.w	80002be <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80003d8:	b003      	add	sp, #12
 80003da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80003de:	2d03      	cmp	r5, #3
 80003e0:	d022      	beq.n	8000428 <HAL_GPIO_Init+0x17c>
 80003e2:	2d11      	cmp	r5, #17
 80003e4:	d184      	bne.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80003e6:	68ca      	ldr	r2, [r1, #12]
 80003e8:	3204      	adds	r2, #4
          break;
 80003ea:	e781      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80003ec:	4f1a      	ldr	r7, [pc, #104]	; (8000458 <HAL_GPIO_Init+0x1ac>)
 80003ee:	42bd      	cmp	r5, r7
 80003f0:	d009      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003f2:	d812      	bhi.n	800041a <HAL_GPIO_Init+0x16e>
 80003f4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 8000464 <HAL_GPIO_Init+0x1b8>
 80003f8:	454d      	cmp	r5, r9
 80003fa:	d004      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 80003fc:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 8000400:	454d      	cmp	r5, r9
 8000402:	f47f af75 	bne.w	80002f0 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000406:	688a      	ldr	r2, [r1, #8]
 8000408:	b1c2      	cbz	r2, 800043c <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800040a:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 800040c:	bf0c      	ite	eq
 800040e:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 8000412:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000416:	2208      	movs	r2, #8
 8000418:	e76a      	b.n	80002f0 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 800041a:	4575      	cmp	r5, lr
 800041c:	d0f3      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 800041e:	4565      	cmp	r5, ip
 8000420:	d0f1      	beq.n	8000406 <HAL_GPIO_Init+0x15a>
 8000422:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000468 <HAL_GPIO_Init+0x1bc>
 8000426:	e7eb      	b.n	8000400 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000428:	2200      	movs	r2, #0
 800042a:	e761      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800042c:	68ca      	ldr	r2, [r1, #12]
          break;
 800042e:	e75f      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000430:	68ca      	ldr	r2, [r1, #12]
 8000432:	3208      	adds	r2, #8
          break;
 8000434:	e75c      	b.n	80002f0 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000436:	68ca      	ldr	r2, [r1, #12]
 8000438:	320c      	adds	r2, #12
          break;
 800043a:	e759      	b.n	80002f0 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800043c:	2204      	movs	r2, #4
 800043e:	e757      	b.n	80002f0 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000440:	2500      	movs	r5, #0
 8000442:	e7a2      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000444:	2501      	movs	r5, #1
 8000446:	e7a0      	b.n	800038a <HAL_GPIO_Init+0xde>
 8000448:	2502      	movs	r5, #2
 800044a:	e79e      	b.n	800038a <HAL_GPIO_Init+0xde>
 800044c:	40010400 	.word	0x40010400
 8000450:	40021000 	.word	0x40021000
 8000454:	40010800 	.word	0x40010800
 8000458:	10210000 	.word	0x10210000
 800045c:	10310000 	.word	0x10310000
 8000460:	10320000 	.word	0x10320000
 8000464:	10110000 	.word	0x10110000
 8000468:	10220000 	.word	0x10220000

0800046c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800046c:	6883      	ldr	r3, [r0, #8]
 800046e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000470:	bf14      	ite	ne
 8000472:	2001      	movne	r0, #1
 8000474:	2000      	moveq	r0, #0
 8000476:	4770      	bx	lr

08000478 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000478:	b10a      	cbz	r2, 800047e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800047a:	6101      	str	r1, [r0, #16]
 800047c:	4770      	bx	lr
 800047e:	0409      	lsls	r1, r1, #16
 8000480:	e7fb      	b.n	800047a <HAL_GPIO_WritePin+0x2>

08000482 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8000482:	68c3      	ldr	r3, [r0, #12]
 8000484:	4059      	eors	r1, r3
 8000486:	60c1      	str	r1, [r0, #12]
 8000488:	4770      	bx	lr

0800048a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and create the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800048a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 800048e:	4604      	mov	r4, r0
{
 8000490:	b086      	sub	sp, #24
  if(hpcd == NULL)
 8000492:	2800      	cmp	r0, #0
 8000494:	d060      	beq.n	8000558 <HAL_PCD_Init+0xce>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if(hpcd->State == HAL_PCD_STATE_RESET)
 8000496:	f890 3429 	ldrb.w	r3, [r0, #1065]	; 0x429
 800049a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800049e:	b91b      	cbnz	r3, 80004a8 <HAL_PCD_Init+0x1e>
  {  
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80004a0:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80004a4:	f002 fab0 	bl	8002a08 <HAL_PCD_MspInit>
  }
  
  hpcd->State = HAL_PCD_STATE_BUSY;
  
  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80004a8:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004aa:	2303      	movs	r3, #3

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004ac:	466e      	mov	r6, sp
  __HAL_PCD_DISABLE(hpcd);
 80004ae:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80004b2:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  __HAL_PCD_DISABLE(hpcd);
 80004b6:	f001 f8b3 	bl	8001620 <USB_DisableGlobalInt>
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 80004ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80004bc:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 80004be:	682b      	ldr	r3, [r5, #0]
 80004c0:	f104 0804 	add.w	r8, r4, #4
 80004c4:	6033      	str	r3, [r6, #0]
 80004c6:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 80004ca:	6820      	ldr	r0, [r4, #0]
 80004cc:	f001 f898 	bl	8001600 <USB_CoreInit>
 
  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004d0:	2100      	movs	r1, #0
 80004d2:	6820      	ldr	r0, [r4, #0]
 80004d4:	f001 f8ae 	bl	8001634 <USB_SetCurrentMode>
 
  /* Init endpoints structures */
  for (index = 0U; index < 15U ; index++)
 80004d8:	2100      	movs	r1, #0
 80004da:	4623      	mov	r3, r4
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 80004dc:	4622      	mov	r2, r4
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1U;
 80004de:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is actvated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80004e0:	4608      	mov	r0, r1
 80004e2:	f104 0510 	add.w	r5, r4, #16
    hpcd->IN_ep[index].num = index;
 80004e6:	f882 1028 	strb.w	r1, [r2, #40]	; 0x28
    hpcd->IN_ep[index].tx_fifo_num = index;
 80004ea:	8691      	strh	r1, [r2, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 80004ec:	3101      	adds	r1, #1
 80004ee:	290f      	cmp	r1, #15
    hpcd->IN_ep[index].is_in = 1U;
 80004f0:	f882 6029 	strb.w	r6, [r2, #41]	; 0x29
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 80004f4:	f882 002b 	strb.w	r0, [r2, #43]	; 0x2b
    hpcd->IN_ep[index].maxpacket =  0U;
 80004f8:	6390      	str	r0, [r2, #56]	; 0x38
    hpcd->IN_ep[index].xfer_buff = 0U;
 80004fa:	63d0      	str	r0, [r2, #60]	; 0x3c
    hpcd->IN_ep[index].xfer_len = 0U;
 80004fc:	6410      	str	r0, [r2, #64]	; 0x40
 80004fe:	f102 0220 	add.w	r2, r2, #32
  for (index = 0U; index < 15U ; index++)
 8000502:	d1f0      	bne.n	80004e6 <HAL_PCD_Init+0x5c>
 8000504:	2200      	movs	r2, #0
  }
 
  for (index = 0U; index < 15U ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0U;
 8000506:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000508:	f883 2228 	strb.w	r2, [r3, #552]	; 0x228
    hpcd->IN_ep[index].tx_fifo_num = index;
 800050c:	869a      	strh	r2, [r3, #52]	; 0x34
  for (index = 0U; index < 15U ; index++)
 800050e:	3201      	adds	r2, #1
 8000510:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0U;
 8000512:	f883 7229 	strb.w	r7, [r3, #553]	; 0x229
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000516:	f883 722b 	strb.w	r7, [r3, #555]	; 0x22b
    hpcd->OUT_ep[index].maxpacket = 0U;
 800051a:	f8c3 7238 	str.w	r7, [r3, #568]	; 0x238
    hpcd->OUT_ep[index].xfer_buff = 0U;
 800051e:	f8c3 723c 	str.w	r7, [r3, #572]	; 0x23c
    hpcd->OUT_ep[index].xfer_len = 0U;
 8000522:	f8c3 7240 	str.w	r7, [r3, #576]	; 0x240
 8000526:	f103 0320 	add.w	r3, r3, #32
  for (index = 0U; index < 15U ; index++)
 800052a:	d1ed      	bne.n	8000508 <HAL_PCD_Init+0x7e>
  }
  
  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 800052c:	466e      	mov	r6, sp
 800052e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000530:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000532:	682b      	ldr	r3, [r5, #0]
 8000534:	6033      	str	r3, [r6, #0]
 8000536:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 800053a:	6820      	ldr	r0, [r4, #0]
 800053c:	f001 f87c 	bl	8001638 <USB_DevInit>
  
  hpcd->USB_Address = 0U;
  hpcd->State= HAL_PCD_STATE_READY;
 8000540:	2301      	movs	r3, #1
  hpcd->USB_Address = 0U;
 8000542:	f884 7024 	strb.w	r7, [r4, #36]	; 0x24
  
  USB_DevDisconnect (hpcd->Instance);  
 8000546:	6820      	ldr	r0, [r4, #0]
  hpcd->State= HAL_PCD_STATE_READY;
 8000548:	f884 3429 	strb.w	r3, [r4, #1065]	; 0x429
  USB_DevDisconnect (hpcd->Instance);  
 800054c:	f001 fb4c 	bl	8001be8 <USB_DevDisconnect>
  return HAL_OK;
 8000550:	2000      	movs	r0, #0
}
 8000552:	b006      	add	sp, #24
 8000554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_ERROR;
 8000558:	2001      	movs	r0, #1
 800055a:	e7fa      	b.n	8000552 <HAL_PCD_Init+0xc8>

0800055c <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
  __HAL_LOCK(hpcd);
 800055c:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000560:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000562:	2b01      	cmp	r3, #1
{
 8000564:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000566:	d00e      	beq.n	8000586 <HAL_PCD_Start+0x2a>
 8000568:	2101      	movs	r1, #1
 800056a:	f880 1428 	strb.w	r1, [r0, #1064]	; 0x428
  HAL_PCDEx_SetConnectionState (hpcd, 1);
 800056e:	f002 fb72 	bl	8002c56 <HAL_PCDEx_SetConnectionState>
  USB_DevConnect (hpcd->Instance);
 8000572:	6820      	ldr	r0, [r4, #0]
 8000574:	f001 fb36 	bl	8001be4 <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000578:	6820      	ldr	r0, [r4, #0]
 800057a:	f001 f848 	bl	800160e <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd);
 800057e:	2000      	movs	r0, #0
 8000580:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000584:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000586:	2002      	movs	r0, #2
}
 8000588:	bd10      	pop	{r4, pc}

0800058a <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd);
 800058a:	f890 2428 	ldrb.w	r2, [r0, #1064]	; 0x428
{
 800058e:	b510      	push	{r4, lr}
  __HAL_LOCK(hpcd);
 8000590:	2a01      	cmp	r2, #1
{
 8000592:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000594:	d00b      	beq.n	80005ae <HAL_PCD_SetAddress+0x24>
 8000596:	2201      	movs	r2, #1
 8000598:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  hpcd->USB_Address = address;
 800059c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
  USB_SetDevAddress(hpcd->Instance, address);
 80005a0:	6800      	ldr	r0, [r0, #0]
 80005a2:	f001 fb19 	bl	8001bd8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80005a6:	2000      	movs	r0, #0
 80005a8:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
 80005ac:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 80005ae:	2002      	movs	r0, #2
  return HAL_OK;
}
 80005b0:	bd10      	pop	{r4, pc}

080005b2 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 80005b2:	b538      	push	{r3, r4, r5, lr}
 80005b4:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005b6:	b248      	sxtb	r0, r1
 80005b8:	2800      	cmp	r0, #0
 80005ba:	f001 057f 	and.w	r5, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005be:	bfb5      	itete	lt
 80005c0:	eb04 1145 	addlt.w	r1, r4, r5, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005c4:	eb04 1141 	addge.w	r1, r4, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 80005c8:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 80005ca:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005ce:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7FU;
 80005d0:	700d      	strb	r5, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 80005d2:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 80005d4:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 80005d6:	f894 3428 	ldrb.w	r3, [r4, #1064]	; 0x428
  ep->maxpacket = ep_mps;
 80005da:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d009      	beq.n	80005f4 <HAL_PCD_EP_Open+0x42>
 80005e0:	2301      	movs	r3, #1
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80005e2:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(hpcd);
 80005e4:	f884 3428 	strb.w	r3, [r4, #1064]	; 0x428
  USB_ActivateEndpoint(hpcd->Instance , ep);
 80005e8:	f001 f842 	bl	8001670 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80005ec:	2000      	movs	r0, #0
 80005ee:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return ret;
 80005f2:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80005f4:	2002      	movs	r0, #2
}
 80005f6:	bd38      	pop	{r3, r4, r5, pc}

080005f8 <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80U) == 0x80U)
 80005f8:	b24b      	sxtb	r3, r1
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	f001 027f 	and.w	r2, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000600:	bfb5      	itete	lt
 8000602:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 8000606:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800060a:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800060c:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  }
  ep->num   = ep_addr & 0x7FU;
  
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000610:	0fdb      	lsrs	r3, r3, #31
{  
 8000612:	b510      	push	{r4, lr}
  ep->num   = ep_addr & 0x7FU;
 8000614:	700a      	strb	r2, [r1, #0]
  ep->is_in = (0x80U & ep_addr) != 0U;
 8000616:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd);
 8000618:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{  
 800061c:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 800061e:	2b01      	cmp	r3, #1
 8000620:	d009      	beq.n	8000636 <HAL_PCD_EP_Close+0x3e>
 8000622:	2301      	movs	r3, #1
 8000624:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000628:	6800      	ldr	r0, [r0, #0]
 800062a:	f001 f993 	bl	8001954 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800062e:	2000      	movs	r0, #0
 8000630:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000634:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd);
 8000636:	2002      	movs	r0, #2
}
 8000638:	bd10      	pop	{r4, pc}

0800063a <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800063a:	b570      	push	{r4, r5, r6, lr}
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
  ep->xfer_len = len;
  ep->xfer_count = 0U;
 800063c:	2600      	movs	r6, #0
 800063e:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000642:	014d      	lsls	r5, r1, #5
  ep->xfer_buff = pBuf;  
 8000644:	1944      	adds	r4, r0, r5
  ep->is_in = 0U;
  ep->num = ep_addr & 0x7FU;
 8000646:	f884 1228 	strb.w	r1, [r4, #552]	; 0x228
  ep = &hpcd->OUT_ep[ep_addr & 0x7FU];
 800064a:	f505 710a 	add.w	r1, r5, #552	; 0x228
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 800064e:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000650:	f8c4 223c 	str.w	r2, [r4, #572]	; 0x23c
  ep->xfer_len = len;
 8000654:	f8c4 3240 	str.w	r3, [r4, #576]	; 0x240
  ep->xfer_count = 0U;
 8000658:	f8c4 6244 	str.w	r6, [r4, #580]	; 0x244
  ep->is_in = 0U;
 800065c:	f884 6229 	strb.w	r6, [r4, #553]	; 0x229
    USB_EPStartXfer(hpcd->Instance , ep);
 8000660:	6800      	ldr	r0, [r0, #0]
 8000662:	f001 fadb 	bl	8001c1c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000666:	4630      	mov	r0, r6
 8000668:	bd70      	pop	{r4, r5, r6, pc}

0800066a <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0xF].xfer_count;
 800066a:	f001 010f 	and.w	r1, r1, #15
 800066e:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000672:	f8b1 0244 	ldrh.w	r0, [r1, #580]	; 0x244
 8000676:	4770      	bx	lr

08000678 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000678:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 800067c:	b570      	push	{r4, r5, r6, lr}
 800067e:	014d      	lsls	r5, r1, #5
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000680:	1944      	adds	r4, r0, r5
  ep->xfer_len = len;
 8000682:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_count = 0U;
 8000684:	2600      	movs	r6, #0
  ep->is_in = 1U;
 8000686:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7FU;
 8000688:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 800068c:	f105 0128 	add.w	r1, r5, #40	; 0x28
  {
    USB_EP0StartXfer(hpcd->Instance , ep);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance , ep);
 8000690:	4401      	add	r1, r0
  ep->xfer_buff = pBuf;  
 8000692:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_count = 0U;
 8000694:	6466      	str	r6, [r4, #68]	; 0x44
  ep->is_in = 1U;
 8000696:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
    USB_EPStartXfer(hpcd->Instance , ep);
 800069a:	6800      	ldr	r0, [r0, #0]
 800069c:	f001 fabe 	bl	8001c1c <USB_EPStartXfer>
  }

  return HAL_OK;
}
 80006a0:	4630      	mov	r0, r6
 80006a2:	bd70      	pop	{r4, r5, r6, pc}

080006a4 <HAL_PCD_IRQHandler>:
{ 
 80006a4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80006a8:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 80006aa:	6800      	ldr	r0, [r0, #0]
 80006ac:	f001 fa9e 	bl	8001bec <USB_ReadInterrupts>
 80006b0:	0400      	lsls	r0, r0, #16
 80006b2:	f100 8098 	bmi.w	80007e6 <HAL_PCD_IRQHandler+0x142>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 80006b6:	6820      	ldr	r0, [r4, #0]
 80006b8:	f001 fa98 	bl	8001bec <USB_ReadInterrupts>
 80006bc:	0541      	lsls	r1, r0, #21
 80006be:	d50f      	bpl.n	80006e0 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006c0:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResetCallback(hpcd);
 80006c2:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80006c4:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006c8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80006cc:	041b      	lsls	r3, r3, #16
 80006ce:	0c1b      	lsrs	r3, r3, #16
 80006d0:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 80006d4:	f002 f9cf 	bl	8002a76 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0U);
 80006d8:	2100      	movs	r1, #0
 80006da:	4620      	mov	r0, r4
 80006dc:	f7ff ff55 	bl	800058a <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 80006e0:	6820      	ldr	r0, [r4, #0]
 80006e2:	f001 fa83 	bl	8001bec <USB_ReadInterrupts>
 80006e6:	0447      	lsls	r7, r0, #17
 80006e8:	d508      	bpl.n	80006fc <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 80006ea:	6822      	ldr	r2, [r4, #0]
 80006ec:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80006f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80006f4:	041b      	lsls	r3, r3, #16
 80006f6:	0c1b      	lsrs	r3, r3, #16
 80006f8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 80006fc:	6820      	ldr	r0, [r4, #0]
 80006fe:	f001 fa75 	bl	8001bec <USB_ReadInterrupts>
 8000702:	0486      	lsls	r6, r0, #18
 8000704:	d508      	bpl.n	8000718 <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000706:	6822      	ldr	r2, [r4, #0]
 8000708:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 800070c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000710:	041b      	lsls	r3, r3, #16
 8000712:	0c1b      	lsrs	r3, r3, #16
 8000714:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000718:	6820      	ldr	r0, [r4, #0]
 800071a:	f001 fa67 	bl	8001bec <USB_ReadInterrupts>
 800071e:	04c5      	lsls	r5, r0, #19
 8000720:	d51c      	bpl.n	800075c <HAL_PCD_IRQHandler+0xb8>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000722:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_ResumeCallback(hpcd);
 8000724:	4620      	mov	r0, r4
    hpcd->Instance->CNTR &= ~(USB_CNTR_LP_MODE);
 8000726:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800072a:	f023 0304 	bic.w	r3, r3, #4
 800072e:	041b      	lsls	r3, r3, #16
 8000730:	0c1b      	lsrs	r3, r3, #16
 8000732:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    hpcd->Instance->CNTR &= ~(USB_CNTR_FSUSP);
 8000736:	f8b2 3040 	ldrh.w	r3, [r2, #64]	; 0x40
 800073a:	f023 0308 	bic.w	r3, r3, #8
 800073e:	041b      	lsls	r3, r3, #16
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	f8a2 3040 	strh.w	r3, [r2, #64]	; 0x40
    HAL_PCD_ResumeCallback(hpcd);
 8000746:	f002 f9b3 	bl	8002ab0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 800074a:	6822      	ldr	r2, [r4, #0]
 800074c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000750:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000754:	041b      	lsls	r3, r3, #16
 8000756:	0c1b      	lsrs	r3, r3, #16
 8000758:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 800075c:	6820      	ldr	r0, [r4, #0]
 800075e:	f001 fa45 	bl	8001bec <USB_ReadInterrupts>
 8000762:	0500      	lsls	r0, r0, #20
 8000764:	d51d      	bpl.n	80007a2 <HAL_PCD_IRQHandler+0xfe>
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000766:	6820      	ldr	r0, [r4, #0]
 8000768:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800076c:	b29b      	uxth	r3, r3
 800076e:	f043 0308 	orr.w	r3, r3, #8
 8000772:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000776:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 800077a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800077e:	041b      	lsls	r3, r3, #16
 8000780:	0c1b      	lsrs	r3, r3, #16
 8000782:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_LP_MODE;
 8000786:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 800078a:	b29b      	uxth	r3, r3
 800078c:	f043 0304 	orr.w	r3, r3, #4
 8000790:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0U)
 8000794:	f001 fa2a 	bl	8001bec <USB_ReadInterrupts>
 8000798:	04c1      	lsls	r1, r0, #19
 800079a:	d402      	bmi.n	80007a2 <HAL_PCD_IRQHandler+0xfe>
      HAL_PCD_SuspendCallback(hpcd);
 800079c:	4620      	mov	r0, r4
 800079e:	f002 f977 	bl	8002a90 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 80007a2:	6820      	ldr	r0, [r4, #0]
 80007a4:	f001 fa22 	bl	8001bec <USB_ReadInterrupts>
 80007a8:	0582      	lsls	r2, r0, #22
 80007aa:	d50b      	bpl.n	80007c4 <HAL_PCD_IRQHandler+0x120>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007ac:	6822      	ldr	r2, [r4, #0]
    HAL_PCD_SOFCallback(hpcd);
 80007ae:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 80007b0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80007b8:	041b      	lsls	r3, r3, #16
 80007ba:	0c1b      	lsrs	r3, r3, #16
 80007bc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 80007c0:	f002 f955 	bl	8002a6e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 80007c4:	6820      	ldr	r0, [r4, #0]
 80007c6:	f001 fa11 	bl	8001bec <USB_ReadInterrupts>
 80007ca:	05c3      	lsls	r3, r0, #23
 80007cc:	d508      	bpl.n	80007e0 <HAL_PCD_IRQHandler+0x13c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 80007ce:	6822      	ldr	r2, [r4, #0]
 80007d0:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 80007d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80007d8:	041b      	lsls	r3, r3, #16
 80007da:	0c1b      	lsrs	r3, r3, #16
 80007dc:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 80007e0:	b002      	add	sp, #8
 80007e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 80007e6:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 80007e8:	4fc8      	ldr	r7, [pc, #800]	; (8000b0c <HAL_PCD_IRQHandler+0x468>)
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80007ea:	f8df 8324 	ldr.w	r8, [pc, #804]	; 8000b10 <HAL_PCD_IRQHandler+0x46c>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 80007ee:	f8df 9324 	ldr.w	r9, [pc, #804]	; 8000b14 <HAL_PCD_IRQHandler+0x470>
  __IO uint16_t wIstr = 0;  
 80007f2:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 80007f6:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 80007fa:	6820      	ldr	r0, [r4, #0]
 80007fc:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000800:	b29b      	uxth	r3, r3
 8000802:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000806:	041b      	lsls	r3, r3, #16
 8000808:	f57f af55 	bpl.w	80006b6 <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800080c:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000810:	f015 050f 	ands.w	r5, r5, #15
 8000814:	f040 80ab 	bne.w	800096e <HAL_PCD_IRQHandler+0x2ca>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000818:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800081c:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 800081e:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000822:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000824:	d126      	bne.n	8000874 <HAL_PCD_IRQHandler+0x1d0>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000826:	403b      	ands	r3, r7
 8000828:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800082a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800082e:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
 8000832:	b29b      	uxth	r3, r3
 8000834:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000838:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 800083c:	f8d0 3404 	ldr.w	r3, [r0, #1028]	; 0x404
        ep->xfer_buff += ep->xfer_count;
 8000840:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000842:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000846:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8000848:	4413      	add	r3, r2
 800084a:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800084c:	4620      	mov	r0, r4
 800084e:	f002 f907 	bl	8002a60 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0U)&& ( ep->xfer_len == 0U))
 8000852:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000856:	2b00      	cmp	r3, #0
 8000858:	d0cf      	beq.n	80007fa <HAL_PCD_IRQHandler+0x156>
 800085a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800085c:	2a00      	cmp	r2, #0
 800085e:	d1cc      	bne.n	80007fa <HAL_PCD_IRQHandler+0x156>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000860:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000864:	6821      	ldr	r1, [r4, #0]
 8000866:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800086a:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 800086e:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
 8000872:	e7c2      	b.n	80007fa <HAL_PCD_IRQHandler+0x156>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000874:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8000878:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800087c:	051a      	lsls	r2, r3, #20
 800087e:	d51f      	bpl.n	80008c0 <HAL_PCD_IRQHandler+0x21c>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000880:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000884:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 8000888:	b29b      	uxth	r3, r3
 800088a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800088e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000892:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000896:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800089a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800089e:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 80008a2:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 80008a6:	f001 fab9 	bl	8001e1c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008aa:	6822      	ldr	r2, [r4, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008ac:	4620      	mov	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 80008ae:	8813      	ldrh	r3, [r2, #0]
 80008b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008b4:	051b      	lsls	r3, r3, #20
 80008b6:	0d1b      	lsrs	r3, r3, #20
 80008b8:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80008ba:	f002 f8c3 	bl	8002a44 <HAL_PCD_SetupStageCallback>
 80008be:	e79c      	b.n	80007fa <HAL_PCD_IRQHandler+0x156>
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80008c0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 80008c4:	041b      	lsls	r3, r3, #16
 80008c6:	d598      	bpl.n	80007fa <HAL_PCD_IRQHandler+0x156>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80008c8:	8803      	ldrh	r3, [r0, #0]
 80008ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80008ce:	051b      	lsls	r3, r3, #20
 80008d0:	0d1b      	lsrs	r3, r3, #20
 80008d2:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80008d4:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80008d8:	f894 2228 	ldrb.w	r2, [r4, #552]	; 0x228
 80008dc:	b29b      	uxth	r3, r3
 80008de:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80008e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80008e6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80008ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008ee:	f8c4 3244 	str.w	r3, [r4, #580]	; 0x244
          if (ep->xfer_count != 0U)
 80008f2:	b163      	cbz	r3, 800090e <HAL_PCD_IRQHandler+0x26a>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 80008f4:	f8b4 222c 	ldrh.w	r2, [r4, #556]	; 0x22c
 80008f8:	f8d4 123c 	ldr.w	r1, [r4, #572]	; 0x23c
 80008fc:	f001 fa8e 	bl	8001e1c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000900:	f8d4 323c 	ldr.w	r3, [r4, #572]	; 0x23c
 8000904:	f8d4 2244 	ldr.w	r2, [r4, #580]	; 0x244
 8000908:	4413      	add	r3, r2
 800090a:	f8c4 323c 	str.w	r3, [r4, #572]	; 0x23c
           HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800090e:	2100      	movs	r1, #0
 8000910:	4620      	mov	r0, r4
 8000912:	f002 f89d 	bl	8002a50 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000916:	6822      	ldr	r2, [r4, #0]
 8000918:	f8d4 5238 	ldr.w	r5, [r4, #568]	; 0x238
 800091c:	f8b2 1050 	ldrh.w	r1, [r2, #80]	; 0x50
 8000920:	2d3e      	cmp	r5, #62	; 0x3e
 8000922:	b289      	uxth	r1, r1
 8000924:	f101 0106 	add.w	r1, r1, #6
 8000928:	f502 6080 	add.w	r0, r2, #1024	; 0x400
 800092c:	d917      	bls.n	800095e <HAL_PCD_IRQHandler+0x2ba>
 800092e:	f3c5 134f 	ubfx	r3, r5, #5, #16
 8000932:	06ee      	lsls	r6, r5, #27
 8000934:	bf04      	itt	eq
 8000936:	f103 33ff 	addeq.w	r3, r3, #4294967295
 800093a:	b29b      	uxtheq	r3, r3
 800093c:	ea49 2383 	orr.w	r3, r9, r3, lsl #10
 8000940:	b29b      	uxth	r3, r3
 8000942:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000946:	8813      	ldrh	r3, [r2, #0]
 8000948:	b29b      	uxth	r3, r3
 800094a:	ea03 0308 	and.w	r3, r3, r8
 800094e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000952:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800095a:	8013      	strh	r3, [r2, #0]
 800095c:	e74d      	b.n	80007fa <HAL_PCD_IRQHandler+0x156>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800095e:	f3c5 034f 	ubfx	r3, r5, #1, #16
 8000962:	07ed      	lsls	r5, r5, #31
 8000964:	bf44      	itt	mi
 8000966:	3301      	addmi	r3, #1
 8000968:	b29b      	uxthmi	r3, r3
 800096a:	029b      	lsls	r3, r3, #10
 800096c:	e7e8      	b.n	8000940 <HAL_PCD_IRQHandler+0x29c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800096e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
 8000972:	b29b      	uxth	r3, r3
 8000974:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8000978:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800097c:	0419      	lsls	r1, r3, #16
 800097e:	d53f      	bpl.n	8000a00 <HAL_PCD_IRQHandler+0x35c>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000980:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000984:	ea4f 1a45 	mov.w	sl, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800098c:	051b      	lsls	r3, r3, #20
 800098e:	0d1b      	lsrs	r3, r3, #20
 8000990:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000994:	eb04 010a 	add.w	r1, r4, sl
 8000998:	f891 3232 	ldrb.w	r3, [r1, #562]	; 0x232
 800099c:	2b00      	cmp	r3, #0
 800099e:	d174      	bne.n	8000a8a <HAL_PCD_IRQHandler+0x3e6>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80009a0:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80009a4:	f891 2228 	ldrb.w	r2, [r1, #552]	; 0x228
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3306      	adds	r3, #6
 80009ac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80009b0:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80009b4:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 80009b8:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0U)
 80009bc:	b136      	cbz	r6, 80009cc <HAL_PCD_IRQHandler+0x328>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80009be:	f8b1 222c 	ldrh.w	r2, [r1, #556]	; 0x22c
 80009c2:	4633      	mov	r3, r6
 80009c4:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 80009c8:	f001 fa28 	bl	8001e1c <USB_ReadPMA>
 80009cc:	eb04 010a 	add.w	r1, r4, sl
        ep->xfer_count+=count;
 80009d0:	f8d1 3244 	ldr.w	r3, [r1, #580]	; 0x244
        ep->xfer_buff+=count;
 80009d4:	f8d1 223c 	ldr.w	r2, [r1, #572]	; 0x23c
        ep->xfer_count+=count;
 80009d8:	4433      	add	r3, r6
 80009da:	f8c1 3244 	str.w	r3, [r1, #580]	; 0x244
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80009de:	f8d1 3240 	ldr.w	r3, [r1, #576]	; 0x240
        ep->xfer_buff+=count;
 80009e2:	4432      	add	r2, r6
 80009e4:	f8c1 223c 	str.w	r2, [r1, #572]	; 0x23c
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80009e8:	b123      	cbz	r3, 80009f4 <HAL_PCD_IRQHandler+0x350>
 80009ea:	f8d1 0238 	ldr.w	r0, [r1, #568]	; 0x238
 80009ee:	4286      	cmp	r6, r0
 80009f0:	f080 8086 	bcs.w	8000b00 <HAL_PCD_IRQHandler+0x45c>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80009f4:	44a2      	add	sl, r4
 80009f6:	f89a 1228 	ldrb.w	r1, [sl, #552]	; 0x228
 80009fa:	4620      	mov	r0, r4
 80009fc:	f002 f828 	bl	8002a50 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8000a00:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000a04:	061a      	lsls	r2, r3, #24
 8000a06:	f57f aef8 	bpl.w	80007fa <HAL_PCD_IRQHandler+0x156>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a0a:	6820      	ldr	r0, [r4, #0]
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0U)
 8000a0c:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a0e:	f830 3025 	ldrh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a12:	19a1      	adds	r1, r4, r6
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000a14:	b29b      	uxth	r3, r3
 8000a16:	403b      	ands	r3, r7
 8000a18:	f820 3025 	strh.w	r3, [r0, r5, lsl #2]
        if (ep->doublebuffer == 0U)
 8000a1c:	f891 3032 	ldrb.w	r3, [r1, #50]	; 0x32
 8000a20:	3502      	adds	r5, #2
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d178      	bne.n	8000b18 <HAL_PCD_IRQHandler+0x474>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a26:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000a2a:	f891 2028 	ldrb.w	r2, [r1, #40]	; 0x28
 8000a2e:	b29b      	uxth	r3, r3
 8000a30:	3302      	adds	r3, #2
 8000a32:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000a36:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000a3a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000a3e:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000a42:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000a46:	606b      	str	r3, [r5, #4]
          if (ep->xfer_count != 0U)
 8000a48:	b11b      	cbz	r3, 8000a52 <HAL_PCD_IRQHandler+0x3ae>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000a4a:	8d8a      	ldrh	r2, [r1, #44]	; 0x2c
 8000a4c:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000a4e:	f001 f8d3 	bl	8001bf8 <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	4426      	add	r6, r4
 8000a56:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 8000a5a:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	3302      	adds	r3, #2
 8000a62:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8000a66:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8000a6a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        ep->xfer_buff+=ep->xfer_count;
 8000a6e:	6bf3      	ldr	r3, [r6, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000a70:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8000a74:	6472      	str	r2, [r6, #68]	; 0x44
        ep->xfer_buff+=ep->xfer_count;
 8000a76:	441a      	add	r2, r3
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0U)
 8000a78:	6c33      	ldr	r3, [r6, #64]	; 0x40
        ep->xfer_buff+=ep->xfer_count;
 8000a7a:	63f2      	str	r2, [r6, #60]	; 0x3c
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a7c:	4620      	mov	r0, r4
        if (ep->xfer_len == 0U)
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	f040 8085 	bne.w	8000b8e <HAL_PCD_IRQHandler+0x4ea>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8000a84:	f001 ffec 	bl	8002a60 <HAL_PCD_DataInStageCallback>
 8000a88:	e6b7      	b.n	80007fa <HAL_PCD_IRQHandler+0x156>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000a8a:	f891 3228 	ldrb.w	r3, [r1, #552]	; 0x228
 8000a8e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	f412 4f80 	tst.w	r2, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000a98:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000a9c:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 8000a9e:	d021      	beq.n	8000ae4 <HAL_PCD_IRQHandler+0x440>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000aa0:	3202      	adds	r2, #2
 8000aa2:	4413      	add	r3, r2
 8000aa4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000aa8:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000aac:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000ab0:	b136      	cbz	r6, 8000ac0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8000ab2:	4633      	mov	r3, r6
 8000ab4:	f8b1 222e 	ldrh.w	r2, [r1, #558]	; 0x22e
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000ab8:	f8d1 123c 	ldr.w	r1, [r1, #572]	; 0x23c
 8000abc:	f001 f9ae 	bl	8001e1c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 8000ac0:	eb04 030a 	add.w	r3, r4, sl
 8000ac4:	f893 1228 	ldrb.w	r1, [r3, #552]	; 0x228
 8000ac8:	6822      	ldr	r2, [r4, #0]
 8000aca:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000ace:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ad2:	051b      	lsls	r3, r3, #20
 8000ad4:	0d1b      	lsrs	r3, r3, #20
 8000ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ada:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000ade:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000ae2:	e773      	b.n	80009cc <HAL_PCD_IRQHandler+0x328>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000ae4:	3206      	adds	r2, #6
 8000ae6:	4413      	add	r3, r2
 8000ae8:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000aec:	f8d3 6400 	ldr.w	r6, [r3, #1024]	; 0x400
 8000af0:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0U)
 8000af4:	2e00      	cmp	r6, #0
 8000af6:	d0e3      	beq.n	8000ac0 <HAL_PCD_IRQHandler+0x41c>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8000af8:	4633      	mov	r3, r6
 8000afa:	f8b1 2230 	ldrh.w	r2, [r1, #560]	; 0x230
 8000afe:	e7db      	b.n	8000ab8 <HAL_PCD_IRQHandler+0x414>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b00:	f891 1228 	ldrb.w	r1, [r1, #552]	; 0x228
 8000b04:	4620      	mov	r0, r4
 8000b06:	f7ff fd98 	bl	800063a <HAL_PCD_EP_Receive>
 8000b0a:	e779      	b.n	8000a00 <HAL_PCD_IRQHandler+0x35c>
 8000b0c:	ffff8f0f 	.word	0xffff8f0f
 8000b10:	ffffbf8f 	.word	0xffffbf8f
 8000b14:	ffff8000 	.word	0xffff8000
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b18:	f891 3028 	ldrb.w	r3, [r1, #40]	; 0x28
 8000b1c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8000b20:	00db      	lsls	r3, r3, #3
 8000b22:	f012 0f40 	tst.w	r2, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b26:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8000b2a:	b292      	uxth	r2, r2
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8000b2c:	d020      	beq.n	8000b70 <HAL_PCD_IRQHandler+0x4cc>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8000b2e:	3202      	adds	r2, #2
 8000b30:	4413      	add	r3, r2
 8000b32:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b36:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b3a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b42:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b44:	b11b      	cbz	r3, 8000b4e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8000b46:	8dca      	ldrh	r2, [r1, #46]	; 0x2e
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b48:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000b4a:	f001 f855 	bl	8001bf8 <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8000b4e:	19a3      	adds	r3, r4, r6
 8000b50:	f893 1028 	ldrb.w	r1, [r3, #40]	; 0x28
 8000b54:	6822      	ldr	r2, [r4, #0]
 8000b56:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 8000b5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b5e:	051b      	lsls	r3, r3, #20
 8000b60:	0d1b      	lsrs	r3, r3, #20
 8000b62:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8000b6e:	e770      	b.n	8000a52 <HAL_PCD_IRQHandler+0x3ae>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8000b70:	3206      	adds	r2, #6
 8000b72:	4413      	add	r3, r2
 8000b74:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8000b78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8000b7c:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8000b80:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000b84:	606b      	str	r3, [r5, #4]
            if (ep->xfer_count != 0U)
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d0e1      	beq.n	8000b4e <HAL_PCD_IRQHandler+0x4aa>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8000b8a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8000b8c:	e7dc      	b.n	8000b48 <HAL_PCD_IRQHandler+0x4a4>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 8000b8e:	f7ff fd73 	bl	8000678 <HAL_PCD_EP_Transmit>
 8000b92:	e632      	b.n	80007fa <HAL_PCD_IRQHandler+0x156>

08000b94 <HAL_PCD_EP_SetStall>:
  ep->is_stall = 1U;
 8000b94:	2201      	movs	r2, #1
{
 8000b96:	b538      	push	{r3, r4, r5, lr}
  if ((0x80U & ep_addr) == 0x80U)
 8000b98:	b24b      	sxtb	r3, r1
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	f001 057f 	and.w	r5, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000ba0:	bfb5      	itete	lt
 8000ba2:	eb00 1145 	addlt.w	r1, r0, r5, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000ba6:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000baa:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bac:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bb0:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7FU;
 8000bb2:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1U;
 8000bb4:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000bb6:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000bb8:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8000bba:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000bbe:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 8000bc0:	4293      	cmp	r3, r2
 8000bc2:	d00e      	beq.n	8000be2 <HAL_PCD_EP_SetStall+0x4e>
 8000bc4:	f880 2428 	strb.w	r2, [r0, #1064]	; 0x428
  USB_EPSetStall(hpcd->Instance , ep);
 8000bc8:	6800      	ldr	r0, [r0, #0]
 8000bca:	f000 ff91 	bl	8001af0 <USB_EPSetStall>
  if((ep_addr & 0x7FU) == 0U)
 8000bce:	b925      	cbnz	r5, 8000bda <HAL_PCD_EP_SetStall+0x46>
    USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8000bd0:	f204 412c 	addw	r1, r4, #1068	; 0x42c
 8000bd4:	6820      	ldr	r0, [r4, #0]
 8000bd6:	f001 f80d 	bl	8001bf4 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f884 0428 	strb.w	r0, [r4, #1064]	; 0x428
  return HAL_OK;
 8000be0:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 8000be2:	2002      	movs	r0, #2
}
 8000be4:	bd38      	pop	{r3, r4, r5, pc}

08000be6 <HAL_PCD_EP_ClrStall>:
{
 8000be6:	b538      	push	{r3, r4, r5, lr}
  ep->is_stall = 0U;
 8000be8:	2400      	movs	r4, #0
  if ((0x80U & ep_addr) == 0x80U)
 8000bea:	b24b      	sxtb	r3, r1
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	f001 027f 	and.w	r2, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bf2:	bfb5      	itete	lt
 8000bf4:	eb00 1142 	addlt.w	r1, r0, r2, lsl #5
    ep = &hpcd->OUT_ep[ep_addr];
 8000bf8:	eb00 1141 	addge.w	r1, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000bfc:	3128      	addlt	r1, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000bfe:	f501 710a 	addge.w	r1, r1, #552	; 0x228
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c02:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0U;
 8000c04:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7FU;
 8000c06:	700a      	strb	r2, [r1, #0]
  ep->is_in = ((ep_addr & 0x80U) == 0x80U);
 8000c08:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8000c0a:	f890 3428 	ldrb.w	r3, [r0, #1064]	; 0x428
{
 8000c0e:	4605      	mov	r5, r0
  __HAL_LOCK(hpcd); 
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d009      	beq.n	8000c28 <HAL_PCD_EP_ClrStall+0x42>
 8000c14:	2301      	movs	r3, #1
 8000c16:	f880 3428 	strb.w	r3, [r0, #1064]	; 0x428
  USB_EPClearStall(hpcd->Instance , ep);
 8000c1a:	6800      	ldr	r0, [r0, #0]
 8000c1c:	f000 ff9a 	bl	8001b54 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 8000c20:	f885 4428 	strb.w	r4, [r5, #1064]	; 0x428
  return HAL_OK;
 8000c24:	4620      	mov	r0, r4
 8000c26:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8000c28:	2002      	movs	r0, #2
}
 8000c2a:	bd38      	pop	{r3, r4, r5, pc}

08000c2c <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((ep_addr & 0x80U) == 0x80U)
 8000c2c:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c30:	bf1b      	ittet	ne
 8000c32:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8000c36:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8000c3a:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7FU];
 8000c3e:	3028      	addne	r0, #40	; 0x28
    ep = &hpcd->OUT_ep[ep_addr];
 8000c40:	bf08      	it	eq
 8000c42:	f500 700a 	addeq.w	r0, r0, #552	; 0x228
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8000c46:	b91a      	cbnz	r2, 8000c50 <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0U;
 8000c48:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8000c4a:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
  }
  
  return HAL_OK; 
}
 8000c4c:	2000      	movs	r0, #0
 8000c4e:	4770      	bx	lr
    ep->doublebuffer = 1U;
 8000c50:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0x0000FFFFU;
 8000c52:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c54:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1U;
 8000c56:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000U) >> 16U;
 8000c58:	8103      	strh	r3, [r0, #8]
 8000c5a:	e7f7      	b.n	8000c4c <HAL_PCDEx_PMAConfig+0x20>

08000c5c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c5c:	6803      	ldr	r3, [r0, #0]
{
 8000c5e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c62:	07db      	lsls	r3, r3, #31
{
 8000c64:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c66:	d410      	bmi.n	8000c8a <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c68:	682b      	ldr	r3, [r5, #0]
 8000c6a:	079f      	lsls	r7, r3, #30
 8000c6c:	d45e      	bmi.n	8000d2c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000c6e:	682b      	ldr	r3, [r5, #0]
 8000c70:	0719      	lsls	r1, r3, #28
 8000c72:	f100 8095 	bmi.w	8000da0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000c76:	682b      	ldr	r3, [r5, #0]
 8000c78:	075a      	lsls	r2, r3, #29
 8000c7a:	f100 80bf 	bmi.w	8000dfc <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000c7e:	69ea      	ldr	r2, [r5, #28]
 8000c80:	2a00      	cmp	r2, #0
 8000c82:	f040 812d 	bne.w	8000ee0 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 8000c86:	2000      	movs	r0, #0
 8000c88:	e014      	b.n	8000cb4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000c8a:	4c90      	ldr	r4, [pc, #576]	; (8000ecc <HAL_RCC_OscConfig+0x270>)
 8000c8c:	6863      	ldr	r3, [r4, #4]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	d007      	beq.n	8000ca6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c96:	6863      	ldr	r3, [r4, #4]
 8000c98:	f003 030c 	and.w	r3, r3, #12
 8000c9c:	2b08      	cmp	r3, #8
 8000c9e:	d10c      	bne.n	8000cba <HAL_RCC_OscConfig+0x5e>
 8000ca0:	6863      	ldr	r3, [r4, #4]
 8000ca2:	03de      	lsls	r6, r3, #15
 8000ca4:	d509      	bpl.n	8000cba <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	039c      	lsls	r4, r3, #14
 8000caa:	d5dd      	bpl.n	8000c68 <HAL_RCC_OscConfig+0xc>
 8000cac:	686b      	ldr	r3, [r5, #4]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d1da      	bne.n	8000c68 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000cb2:	2001      	movs	r0, #1
}
 8000cb4:	b002      	add	sp, #8
 8000cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000cba:	686b      	ldr	r3, [r5, #4]
 8000cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000cc0:	d110      	bne.n	8000ce4 <HAL_RCC_OscConfig+0x88>
 8000cc2:	6823      	ldr	r3, [r4, #0]
 8000cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cc8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cca:	f7ff fa81 	bl	80001d0 <HAL_GetTick>
 8000cce:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cd0:	6823      	ldr	r3, [r4, #0]
 8000cd2:	0398      	lsls	r0, r3, #14
 8000cd4:	d4c8      	bmi.n	8000c68 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cd6:	f7ff fa7b 	bl	80001d0 <HAL_GetTick>
 8000cda:	1b80      	subs	r0, r0, r6
 8000cdc:	2864      	cmp	r0, #100	; 0x64
 8000cde:	d9f7      	bls.n	8000cd0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000ce0:	2003      	movs	r0, #3
 8000ce2:	e7e7      	b.n	8000cb4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ce4:	b99b      	cbnz	r3, 8000d0e <HAL_RCC_OscConfig+0xb2>
 8000ce6:	6823      	ldr	r3, [r4, #0]
 8000ce8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cec:	6023      	str	r3, [r4, #0]
 8000cee:	6823      	ldr	r3, [r4, #0]
 8000cf0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cf4:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000cf6:	f7ff fa6b 	bl	80001d0 <HAL_GetTick>
 8000cfa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000cfc:	6823      	ldr	r3, [r4, #0]
 8000cfe:	0399      	lsls	r1, r3, #14
 8000d00:	d5b2      	bpl.n	8000c68 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d02:	f7ff fa65 	bl	80001d0 <HAL_GetTick>
 8000d06:	1b80      	subs	r0, r0, r6
 8000d08:	2864      	cmp	r0, #100	; 0x64
 8000d0a:	d9f7      	bls.n	8000cfc <HAL_RCC_OscConfig+0xa0>
 8000d0c:	e7e8      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000d0e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000d12:	6823      	ldr	r3, [r4, #0]
 8000d14:	d103      	bne.n	8000d1e <HAL_RCC_OscConfig+0xc2>
 8000d16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d1a:	6023      	str	r3, [r4, #0]
 8000d1c:	e7d1      	b.n	8000cc2 <HAL_RCC_OscConfig+0x66>
 8000d1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000d22:	6023      	str	r3, [r4, #0]
 8000d24:	6823      	ldr	r3, [r4, #0]
 8000d26:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d2a:	e7cd      	b.n	8000cc8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000d2c:	4c67      	ldr	r4, [pc, #412]	; (8000ecc <HAL_RCC_OscConfig+0x270>)
 8000d2e:	6863      	ldr	r3, [r4, #4]
 8000d30:	f013 0f0c 	tst.w	r3, #12
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000d36:	6863      	ldr	r3, [r4, #4]
 8000d38:	f003 030c 	and.w	r3, r3, #12
 8000d3c:	2b08      	cmp	r3, #8
 8000d3e:	d110      	bne.n	8000d62 <HAL_RCC_OscConfig+0x106>
 8000d40:	6863      	ldr	r3, [r4, #4]
 8000d42:	03da      	lsls	r2, r3, #15
 8000d44:	d40d      	bmi.n	8000d62 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d46:	6823      	ldr	r3, [r4, #0]
 8000d48:	079b      	lsls	r3, r3, #30
 8000d4a:	d502      	bpl.n	8000d52 <HAL_RCC_OscConfig+0xf6>
 8000d4c:	692b      	ldr	r3, [r5, #16]
 8000d4e:	2b01      	cmp	r3, #1
 8000d50:	d1af      	bne.n	8000cb2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d52:	6823      	ldr	r3, [r4, #0]
 8000d54:	696a      	ldr	r2, [r5, #20]
 8000d56:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000d5a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d5e:	6023      	str	r3, [r4, #0]
 8000d60:	e785      	b.n	8000c6e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d62:	692a      	ldr	r2, [r5, #16]
 8000d64:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <HAL_RCC_OscConfig+0x274>)
 8000d66:	b16a      	cbz	r2, 8000d84 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d6c:	f7ff fa30 	bl	80001d0 <HAL_GetTick>
 8000d70:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d72:	6823      	ldr	r3, [r4, #0]
 8000d74:	079f      	lsls	r7, r3, #30
 8000d76:	d4ec      	bmi.n	8000d52 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d78:	f7ff fa2a 	bl	80001d0 <HAL_GetTick>
 8000d7c:	1b80      	subs	r0, r0, r6
 8000d7e:	2802      	cmp	r0, #2
 8000d80:	d9f7      	bls.n	8000d72 <HAL_RCC_OscConfig+0x116>
 8000d82:	e7ad      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000d84:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000d86:	f7ff fa23 	bl	80001d0 <HAL_GetTick>
 8000d8a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d8c:	6823      	ldr	r3, [r4, #0]
 8000d8e:	0798      	lsls	r0, r3, #30
 8000d90:	f57f af6d 	bpl.w	8000c6e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d94:	f7ff fa1c 	bl	80001d0 <HAL_GetTick>
 8000d98:	1b80      	subs	r0, r0, r6
 8000d9a:	2802      	cmp	r0, #2
 8000d9c:	d9f6      	bls.n	8000d8c <HAL_RCC_OscConfig+0x130>
 8000d9e:	e79f      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000da0:	69aa      	ldr	r2, [r5, #24]
 8000da2:	4c4a      	ldr	r4, [pc, #296]	; (8000ecc <HAL_RCC_OscConfig+0x270>)
 8000da4:	4b4b      	ldr	r3, [pc, #300]	; (8000ed4 <HAL_RCC_OscConfig+0x278>)
 8000da6:	b1da      	cbz	r2, 8000de0 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000da8:	2201      	movs	r2, #1
 8000daa:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000dac:	f7ff fa10 	bl	80001d0 <HAL_GetTick>
 8000db0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000db4:	079b      	lsls	r3, r3, #30
 8000db6:	d50d      	bpl.n	8000dd4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000db8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000dbc:	4b46      	ldr	r3, [pc, #280]	; (8000ed8 <HAL_RCC_OscConfig+0x27c>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dc4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000dc6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000dc8:	9b01      	ldr	r3, [sp, #4]
 8000dca:	1e5a      	subs	r2, r3, #1
 8000dcc:	9201      	str	r2, [sp, #4]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d1f9      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x16a>
 8000dd2:	e750      	b.n	8000c76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dd4:	f7ff f9fc 	bl	80001d0 <HAL_GetTick>
 8000dd8:	1b80      	subs	r0, r0, r6
 8000dda:	2802      	cmp	r0, #2
 8000ddc:	d9e9      	bls.n	8000db2 <HAL_RCC_OscConfig+0x156>
 8000dde:	e77f      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000de0:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000de2:	f7ff f9f5 	bl	80001d0 <HAL_GetTick>
 8000de6:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000de8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000dea:	079f      	lsls	r7, r3, #30
 8000dec:	f57f af43 	bpl.w	8000c76 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000df0:	f7ff f9ee 	bl	80001d0 <HAL_GetTick>
 8000df4:	1b80      	subs	r0, r0, r6
 8000df6:	2802      	cmp	r0, #2
 8000df8:	d9f6      	bls.n	8000de8 <HAL_RCC_OscConfig+0x18c>
 8000dfa:	e771      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dfc:	4c33      	ldr	r4, [pc, #204]	; (8000ecc <HAL_RCC_OscConfig+0x270>)
 8000dfe:	69e3      	ldr	r3, [r4, #28]
 8000e00:	00d8      	lsls	r0, r3, #3
 8000e02:	d424      	bmi.n	8000e4e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000e04:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e06:	69e3      	ldr	r3, [r4, #28]
 8000e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e0c:	61e3      	str	r3, [r4, #28]
 8000e0e:	69e3      	ldr	r3, [r4, #28]
 8000e10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e14:	9300      	str	r3, [sp, #0]
 8000e16:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e18:	4e30      	ldr	r6, [pc, #192]	; (8000edc <HAL_RCC_OscConfig+0x280>)
 8000e1a:	6833      	ldr	r3, [r6, #0]
 8000e1c:	05d9      	lsls	r1, r3, #23
 8000e1e:	d518      	bpl.n	8000e52 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e20:	68eb      	ldr	r3, [r5, #12]
 8000e22:	2b01      	cmp	r3, #1
 8000e24:	d126      	bne.n	8000e74 <HAL_RCC_OscConfig+0x218>
 8000e26:	6a23      	ldr	r3, [r4, #32]
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e2e:	f7ff f9cf 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e32:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000e36:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e38:	6a23      	ldr	r3, [r4, #32]
 8000e3a:	079b      	lsls	r3, r3, #30
 8000e3c:	d53f      	bpl.n	8000ebe <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000e3e:	2f00      	cmp	r7, #0
 8000e40:	f43f af1d 	beq.w	8000c7e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000e44:	69e3      	ldr	r3, [r4, #28]
 8000e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000e4a:	61e3      	str	r3, [r4, #28]
 8000e4c:	e717      	b.n	8000c7e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000e4e:	2700      	movs	r7, #0
 8000e50:	e7e2      	b.n	8000e18 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e52:	6833      	ldr	r3, [r6, #0]
 8000e54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e58:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000e5a:	f7ff f9b9 	bl	80001d0 <HAL_GetTick>
 8000e5e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e60:	6833      	ldr	r3, [r6, #0]
 8000e62:	05da      	lsls	r2, r3, #23
 8000e64:	d4dc      	bmi.n	8000e20 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e66:	f7ff f9b3 	bl	80001d0 <HAL_GetTick>
 8000e6a:	eba0 0008 	sub.w	r0, r0, r8
 8000e6e:	2864      	cmp	r0, #100	; 0x64
 8000e70:	d9f6      	bls.n	8000e60 <HAL_RCC_OscConfig+0x204>
 8000e72:	e735      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	b9ab      	cbnz	r3, 8000ea2 <HAL_RCC_OscConfig+0x246>
 8000e76:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e78:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e7c:	f023 0301 	bic.w	r3, r3, #1
 8000e80:	6223      	str	r3, [r4, #32]
 8000e82:	6a23      	ldr	r3, [r4, #32]
 8000e84:	f023 0304 	bic.w	r3, r3, #4
 8000e88:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000e8a:	f7ff f9a1 	bl	80001d0 <HAL_GetTick>
 8000e8e:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000e90:	6a23      	ldr	r3, [r4, #32]
 8000e92:	0798      	lsls	r0, r3, #30
 8000e94:	d5d3      	bpl.n	8000e3e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000e96:	f7ff f99b 	bl	80001d0 <HAL_GetTick>
 8000e9a:	1b80      	subs	r0, r0, r6
 8000e9c:	4540      	cmp	r0, r8
 8000e9e:	d9f7      	bls.n	8000e90 <HAL_RCC_OscConfig+0x234>
 8000ea0:	e71e      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ea2:	2b05      	cmp	r3, #5
 8000ea4:	6a23      	ldr	r3, [r4, #32]
 8000ea6:	d103      	bne.n	8000eb0 <HAL_RCC_OscConfig+0x254>
 8000ea8:	f043 0304 	orr.w	r3, r3, #4
 8000eac:	6223      	str	r3, [r4, #32]
 8000eae:	e7ba      	b.n	8000e26 <HAL_RCC_OscConfig+0x1ca>
 8000eb0:	f023 0301 	bic.w	r3, r3, #1
 8000eb4:	6223      	str	r3, [r4, #32]
 8000eb6:	6a23      	ldr	r3, [r4, #32]
 8000eb8:	f023 0304 	bic.w	r3, r3, #4
 8000ebc:	e7b6      	b.n	8000e2c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ebe:	f7ff f987 	bl	80001d0 <HAL_GetTick>
 8000ec2:	eba0 0008 	sub.w	r0, r0, r8
 8000ec6:	42b0      	cmp	r0, r6
 8000ec8:	d9b6      	bls.n	8000e38 <HAL_RCC_OscConfig+0x1dc>
 8000eca:	e709      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	42420000 	.word	0x42420000
 8000ed4:	42420480 	.word	0x42420480
 8000ed8:	20000118 	.word	0x20000118
 8000edc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000ee0:	4c22      	ldr	r4, [pc, #136]	; (8000f6c <HAL_RCC_OscConfig+0x310>)
 8000ee2:	6863      	ldr	r3, [r4, #4]
 8000ee4:	f003 030c 	and.w	r3, r3, #12
 8000ee8:	2b08      	cmp	r3, #8
 8000eea:	f43f aee2 	beq.w	8000cb2 <HAL_RCC_OscConfig+0x56>
 8000eee:	2300      	movs	r3, #0
 8000ef0:	4e1f      	ldr	r6, [pc, #124]	; (8000f70 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef2:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000ef4:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000ef6:	d12b      	bne.n	8000f50 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000ef8:	f7ff f96a 	bl	80001d0 <HAL_GetTick>
 8000efc:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000efe:	6823      	ldr	r3, [r4, #0]
 8000f00:	0199      	lsls	r1, r3, #6
 8000f02:	d41f      	bmi.n	8000f44 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000f04:	6a2b      	ldr	r3, [r5, #32]
 8000f06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f0a:	d105      	bne.n	8000f18 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f0c:	6862      	ldr	r2, [r4, #4]
 8000f0e:	68a9      	ldr	r1, [r5, #8]
 8000f10:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f14:	430a      	orrs	r2, r1
 8000f16:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000f18:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000f1a:	6862      	ldr	r2, [r4, #4]
 8000f1c:	430b      	orrs	r3, r1
 8000f1e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000f22:	4313      	orrs	r3, r2
 8000f24:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000f26:	2301      	movs	r3, #1
 8000f28:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000f2a:	f7ff f951 	bl	80001d0 <HAL_GetTick>
 8000f2e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000f30:	6823      	ldr	r3, [r4, #0]
 8000f32:	019a      	lsls	r2, r3, #6
 8000f34:	f53f aea7 	bmi.w	8000c86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f38:	f7ff f94a 	bl	80001d0 <HAL_GetTick>
 8000f3c:	1b40      	subs	r0, r0, r5
 8000f3e:	2802      	cmp	r0, #2
 8000f40:	d9f6      	bls.n	8000f30 <HAL_RCC_OscConfig+0x2d4>
 8000f42:	e6cd      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f44:	f7ff f944 	bl	80001d0 <HAL_GetTick>
 8000f48:	1bc0      	subs	r0, r0, r7
 8000f4a:	2802      	cmp	r0, #2
 8000f4c:	d9d7      	bls.n	8000efe <HAL_RCC_OscConfig+0x2a2>
 8000f4e:	e6c7      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000f50:	f7ff f93e 	bl	80001d0 <HAL_GetTick>
 8000f54:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	019b      	lsls	r3, r3, #6
 8000f5a:	f57f ae94 	bpl.w	8000c86 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f5e:	f7ff f937 	bl	80001d0 <HAL_GetTick>
 8000f62:	1b40      	subs	r0, r0, r5
 8000f64:	2802      	cmp	r0, #2
 8000f66:	d9f6      	bls.n	8000f56 <HAL_RCC_OscConfig+0x2fa>
 8000f68:	e6ba      	b.n	8000ce0 <HAL_RCC_OscConfig+0x84>
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000
 8000f70:	42420060 	.word	0x42420060

08000f74 <HAL_RCC_GetSysClockFreq>:
{
 8000f74:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f76:	4b19      	ldr	r3, [pc, #100]	; (8000fdc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000f78:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f7a:	ac02      	add	r4, sp, #8
 8000f7c:	f103 0510 	add.w	r5, r3, #16
 8000f80:	4622      	mov	r2, r4
 8000f82:	6818      	ldr	r0, [r3, #0]
 8000f84:	6859      	ldr	r1, [r3, #4]
 8000f86:	3308      	adds	r3, #8
 8000f88:	c203      	stmia	r2!, {r0, r1}
 8000f8a:	42ab      	cmp	r3, r5
 8000f8c:	4614      	mov	r4, r2
 8000f8e:	d1f7      	bne.n	8000f80 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f90:	2301      	movs	r3, #1
 8000f92:	f88d 3004 	strb.w	r3, [sp, #4]
 8000f96:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000f98:	4911      	ldr	r1, [pc, #68]	; (8000fe0 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f9a:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000f9e:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000fa0:	f003 020c 	and.w	r2, r3, #12
 8000fa4:	2a08      	cmp	r2, #8
 8000fa6:	d117      	bne.n	8000fd8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fa8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000fac:	a806      	add	r0, sp, #24
 8000fae:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fb0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fb2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000fb6:	d50c      	bpl.n	8000fd2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fb8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fba:	480a      	ldr	r0, [pc, #40]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fbc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fc0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000fc2:	aa06      	add	r2, sp, #24
 8000fc4:	4413      	add	r3, r2
 8000fc6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000fca:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000fce:	b007      	add	sp, #28
 8000fd0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000fd2:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <HAL_RCC_GetSysClockFreq+0x74>)
 8000fd4:	4350      	muls	r0, r2
 8000fd6:	e7fa      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000fd8:	4802      	ldr	r0, [pc, #8]	; (8000fe4 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000fda:	e7f8      	b.n	8000fce <HAL_RCC_GetSysClockFreq+0x5a>
 8000fdc:	08002db8 	.word	0x08002db8
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	007a1200 	.word	0x007a1200
 8000fe8:	003d0900 	.word	0x003d0900

08000fec <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000fec:	4a54      	ldr	r2, [pc, #336]	; (8001140 <HAL_RCC_ClockConfig+0x154>)
{
 8000fee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ff2:	6813      	ldr	r3, [r2, #0]
{
 8000ff4:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	428b      	cmp	r3, r1
{
 8000ffc:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000ffe:	d32a      	bcc.n	8001056 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001000:	6829      	ldr	r1, [r5, #0]
 8001002:	078c      	lsls	r4, r1, #30
 8001004:	d434      	bmi.n	8001070 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001006:	07ca      	lsls	r2, r1, #31
 8001008:	d447      	bmi.n	800109a <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 800100a:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_RCC_ClockConfig+0x154>)
 800100c:	6813      	ldr	r3, [r2, #0]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	429e      	cmp	r6, r3
 8001014:	f0c0 8082 	bcc.w	800111c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001018:	682a      	ldr	r2, [r5, #0]
 800101a:	4c4a      	ldr	r4, [pc, #296]	; (8001144 <HAL_RCC_ClockConfig+0x158>)
 800101c:	f012 0f04 	tst.w	r2, #4
 8001020:	f040 8087 	bne.w	8001132 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001024:	0713      	lsls	r3, r2, #28
 8001026:	d506      	bpl.n	8001036 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001028:	6863      	ldr	r3, [r4, #4]
 800102a:	692a      	ldr	r2, [r5, #16]
 800102c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001030:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001034:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001036:	f7ff ff9d 	bl	8000f74 <HAL_RCC_GetSysClockFreq>
 800103a:	6863      	ldr	r3, [r4, #4]
 800103c:	4a42      	ldr	r2, [pc, #264]	; (8001148 <HAL_RCC_ClockConfig+0x15c>)
 800103e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001042:	5cd3      	ldrb	r3, [r2, r3]
 8001044:	40d8      	lsrs	r0, r3
 8001046:	4b41      	ldr	r3, [pc, #260]	; (800114c <HAL_RCC_ClockConfig+0x160>)
 8001048:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800104a:	2000      	movs	r0, #0
 800104c:	f7ff f87e 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8001050:	2000      	movs	r0, #0
}
 8001052:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001056:	6813      	ldr	r3, [r2, #0]
 8001058:	f023 0307 	bic.w	r3, r3, #7
 800105c:	430b      	orrs	r3, r1
 800105e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001060:	6813      	ldr	r3, [r2, #0]
 8001062:	f003 0307 	and.w	r3, r3, #7
 8001066:	4299      	cmp	r1, r3
 8001068:	d0ca      	beq.n	8001000 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 800106a:	2001      	movs	r0, #1
 800106c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001070:	4b34      	ldr	r3, [pc, #208]	; (8001144 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001072:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001076:	bf1e      	ittt	ne
 8001078:	685a      	ldrne	r2, [r3, #4]
 800107a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 800107e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001080:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001082:	bf42      	ittt	mi
 8001084:	685a      	ldrmi	r2, [r3, #4]
 8001086:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 800108a:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800108c:	685a      	ldr	r2, [r3, #4]
 800108e:	68a8      	ldr	r0, [r5, #8]
 8001090:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001094:	4302      	orrs	r2, r0
 8001096:	605a      	str	r2, [r3, #4]
 8001098:	e7b5      	b.n	8001006 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	686a      	ldr	r2, [r5, #4]
 800109c:	4c29      	ldr	r4, [pc, #164]	; (8001144 <HAL_RCC_ClockConfig+0x158>)
 800109e:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010a2:	d11c      	bne.n	80010de <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010a8:	d0df      	beq.n	800106a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010aa:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ac:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010b0:	f023 0303 	bic.w	r3, r3, #3
 80010b4:	4313      	orrs	r3, r2
 80010b6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 80010b8:	f7ff f88a 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010bc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 80010be:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d114      	bne.n	80010ee <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80010c4:	6863      	ldr	r3, [r4, #4]
 80010c6:	f003 030c 	and.w	r3, r3, #12
 80010ca:	2b04      	cmp	r3, #4
 80010cc:	d09d      	beq.n	800100a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010ce:	f7ff f87f 	bl	80001d0 <HAL_GetTick>
 80010d2:	1bc0      	subs	r0, r0, r7
 80010d4:	4540      	cmp	r0, r8
 80010d6:	d9f5      	bls.n	80010c4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 80010d8:	2003      	movs	r0, #3
 80010da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010de:	2a02      	cmp	r2, #2
 80010e0:	d102      	bne.n	80010e8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010e2:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80010e6:	e7df      	b.n	80010a8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e8:	f013 0f02 	tst.w	r3, #2
 80010ec:	e7dc      	b.n	80010a8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80010ee:	2b02      	cmp	r3, #2
 80010f0:	d10f      	bne.n	8001112 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010f2:	6863      	ldr	r3, [r4, #4]
 80010f4:	f003 030c 	and.w	r3, r3, #12
 80010f8:	2b08      	cmp	r3, #8
 80010fa:	d086      	beq.n	800100a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff f868 	bl	80001d0 <HAL_GetTick>
 8001100:	1bc0      	subs	r0, r0, r7
 8001102:	4540      	cmp	r0, r8
 8001104:	d9f5      	bls.n	80010f2 <HAL_RCC_ClockConfig+0x106>
 8001106:	e7e7      	b.n	80010d8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001108:	f7ff f862 	bl	80001d0 <HAL_GetTick>
 800110c:	1bc0      	subs	r0, r0, r7
 800110e:	4540      	cmp	r0, r8
 8001110:	d8e2      	bhi.n	80010d8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001112:	6863      	ldr	r3, [r4, #4]
 8001114:	f013 0f0c 	tst.w	r3, #12
 8001118:	d1f6      	bne.n	8001108 <HAL_RCC_ClockConfig+0x11c>
 800111a:	e776      	b.n	800100a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	f023 0307 	bic.w	r3, r3, #7
 8001122:	4333      	orrs	r3, r6
 8001124:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001126:	6813      	ldr	r3, [r2, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	429e      	cmp	r6, r3
 800112e:	d19c      	bne.n	800106a <HAL_RCC_ClockConfig+0x7e>
 8001130:	e772      	b.n	8001018 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001132:	6863      	ldr	r3, [r4, #4]
 8001134:	68e9      	ldr	r1, [r5, #12]
 8001136:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800113a:	430b      	orrs	r3, r1
 800113c:	6063      	str	r3, [r4, #4]
 800113e:	e771      	b.n	8001024 <HAL_RCC_ClockConfig+0x38>
 8001140:	40022000 	.word	0x40022000
 8001144:	40021000 	.word	0x40021000
 8001148:	08002dc8 	.word	0x08002dc8
 800114c:	20000118 	.word	0x20000118

08001150 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001150:	6803      	ldr	r3, [r0, #0]
{
 8001152:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001156:	07d9      	lsls	r1, r3, #31
{
 8001158:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800115a:	d520      	bpl.n	800119e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800115c:	4c35      	ldr	r4, [pc, #212]	; (8001234 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 800115e:	69e3      	ldr	r3, [r4, #28]
 8001160:	00da      	lsls	r2, r3, #3
 8001162:	d432      	bmi.n	80011ca <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8001164:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8001166:	69e3      	ldr	r3, [r4, #28]
 8001168:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116c:	61e3      	str	r3, [r4, #28]
 800116e:	69e3      	ldr	r3, [r4, #28]
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	9301      	str	r3, [sp, #4]
 8001176:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001178:	4e2f      	ldr	r6, [pc, #188]	; (8001238 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800117a:	6833      	ldr	r3, [r6, #0]
 800117c:	05db      	lsls	r3, r3, #23
 800117e:	d526      	bpl.n	80011ce <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001180:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001182:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001186:	d136      	bne.n	80011f6 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8001188:	6a23      	ldr	r3, [r4, #32]
 800118a:	686a      	ldr	r2, [r5, #4]
 800118c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001190:	4313      	orrs	r3, r2
 8001192:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001194:	b11f      	cbz	r7, 800119e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001196:	69e3      	ldr	r3, [r4, #28]
 8001198:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800119c:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800119e:	6828      	ldr	r0, [r5, #0]
 80011a0:	0783      	lsls	r3, r0, #30
 80011a2:	d506      	bpl.n	80011b2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80011a4:	4a23      	ldr	r2, [pc, #140]	; (8001234 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011a6:	68a9      	ldr	r1, [r5, #8]
 80011a8:	6853      	ldr	r3, [r2, #4]
 80011aa:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80011ae:	430b      	orrs	r3, r1
 80011b0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80011b2:	f010 0010 	ands.w	r0, r0, #16
 80011b6:	d01b      	beq.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011b8:	4a1e      	ldr	r2, [pc, #120]	; (8001234 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 80011ba:	68e9      	ldr	r1, [r5, #12]
 80011bc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80011be:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80011c0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80011c4:	430b      	orrs	r3, r1
 80011c6:	6053      	str	r3, [r2, #4]
 80011c8:	e012      	b.n	80011f0 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2700      	movs	r7, #0
 80011cc:	e7d4      	b.n	8001178 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011ce:	6833      	ldr	r3, [r6, #0]
 80011d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d4:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80011d6:	f7fe fffb 	bl	80001d0 <HAL_GetTick>
 80011da:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011dc:	6833      	ldr	r3, [r6, #0]
 80011de:	05d8      	lsls	r0, r3, #23
 80011e0:	d4ce      	bmi.n	8001180 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e2:	f7fe fff5 	bl	80001d0 <HAL_GetTick>
 80011e6:	eba0 0008 	sub.w	r0, r0, r8
 80011ea:	2864      	cmp	r0, #100	; 0x64
 80011ec:	d9f6      	bls.n	80011dc <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 80011ee:	2003      	movs	r0, #3
}
 80011f0:	b002      	add	sp, #8
 80011f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80011f6:	686a      	ldr	r2, [r5, #4]
 80011f8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d0c3      	beq.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8001200:	2001      	movs	r0, #1
 8001202:	4a0e      	ldr	r2, [pc, #56]	; (800123c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001204:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8001206:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001208:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800120a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800120e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8001210:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001212:	07d9      	lsls	r1, r3, #31
 8001214:	d5b8      	bpl.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8001216:	f7fe ffdb 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800121a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 800121e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001220:	6a23      	ldr	r3, [r4, #32]
 8001222:	079a      	lsls	r2, r3, #30
 8001224:	d4b0      	bmi.n	8001188 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001226:	f7fe ffd3 	bl	80001d0 <HAL_GetTick>
 800122a:	1b80      	subs	r0, r0, r6
 800122c:	4540      	cmp	r0, r8
 800122e:	d9f7      	bls.n	8001220 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8001230:	e7dd      	b.n	80011ee <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8001232:	bf00      	nop
 8001234:	40021000 	.word	0x40021000
 8001238:	40007000 	.word	0x40007000
 800123c:	42420440 	.word	0x42420440

08001240 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001240:	6803      	ldr	r3, [r0, #0]
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);

  /* Return function status */
  return HAL_OK;
}
 8001242:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001244:	68da      	ldr	r2, [r3, #12]
 8001246:	f042 0201 	orr.w	r2, r2, #1
 800124a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	f042 0201 	orr.w	r2, r2, #1
 8001252:	601a      	str	r2, [r3, #0]
}
 8001254:	4770      	bx	lr

08001256 <HAL_TIM_ConfigClockSource>:
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)
{
  uint32_t tmpsmcr = 0U;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001256:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800125a:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 800125c:	2b01      	cmp	r3, #1
 800125e:	f04f 0302 	mov.w	r3, #2
 8001262:	d01c      	beq.n	800129e <HAL_TIM_ConfigClockSource+0x48>
 8001264:	2201      	movs	r2, #1

  htim->State = HAL_TIM_STATE_BUSY;
 8001266:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800126a:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 800126c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001270:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001272:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8001276:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800127a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800127c:	680a      	ldr	r2, [r1, #0]
 800127e:	2a40      	cmp	r2, #64	; 0x40
 8001280:	d079      	beq.n	8001376 <HAL_TIM_ConfigClockSource+0x120>
 8001282:	d819      	bhi.n	80012b8 <HAL_TIM_ConfigClockSource+0x62>
 8001284:	2a10      	cmp	r2, #16
 8001286:	f000 8093 	beq.w	80013b0 <HAL_TIM_ConfigClockSource+0x15a>
 800128a:	d80a      	bhi.n	80012a2 <HAL_TIM_ConfigClockSource+0x4c>
 800128c:	2a00      	cmp	r2, #0
 800128e:	f000 8089 	beq.w	80013a4 <HAL_TIM_ConfigClockSource+0x14e>
    break;

  default:
    break;
  }
  htim->State = HAL_TIM_STATE_READY;
 8001292:	2301      	movs	r3, #1
 8001294:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001298:	2300      	movs	r3, #0
 800129a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 800129e:	4618      	mov	r0, r3

  return HAL_OK;
}
 80012a0:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80012a2:	2a20      	cmp	r2, #32
 80012a4:	f000 808a 	beq.w	80013bc <HAL_TIM_ConfigClockSource+0x166>
 80012a8:	2a30      	cmp	r2, #48	; 0x30
 80012aa:	d1f2      	bne.n	8001292 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80012ac:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012b2:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80012b6:	e036      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80012b8:	2a70      	cmp	r2, #112	; 0x70
 80012ba:	d036      	beq.n	800132a <HAL_TIM_ConfigClockSource+0xd4>
 80012bc:	d81b      	bhi.n	80012f6 <HAL_TIM_ConfigClockSource+0xa0>
 80012be:	2a50      	cmp	r2, #80	; 0x50
 80012c0:	d042      	beq.n	8001348 <HAL_TIM_ConfigClockSource+0xf2>
 80012c2:	2a60      	cmp	r2, #96	; 0x60
 80012c4:	d1e5      	bne.n	8001292 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012c6:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012c8:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012ca:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80012ce:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80012d0:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80012d2:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80012d4:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80012d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80012da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80012de:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80012e2:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80012e6:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80012e8:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80012ea:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012f0:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 80012f4:	e017      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80012f6:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 80012fa:	d011      	beq.n	8001320 <HAL_TIM_ConfigClockSource+0xca>
 80012fc:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001300:	d1c7      	bne.n	8001292 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001302:	688a      	ldr	r2, [r1, #8]
 8001304:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001306:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001308:	68c9      	ldr	r1, [r1, #12]
 800130a:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800130c:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001310:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001314:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001316:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800131e:	e002      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001320:	689a      	ldr	r2, [r3, #8]
 8001322:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 8001326:	609a      	str	r2, [r3, #8]
 8001328:	e7b3      	b.n	8001292 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800132a:	688a      	ldr	r2, [r1, #8]
 800132c:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800132e:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001330:	68c9      	ldr	r1, [r1, #12]
 8001332:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001334:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001338:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800133c:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 800133e:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001340:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001342:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 8001346:	e7ee      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001348:	684c      	ldr	r4, [r1, #4]
 800134a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800134c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800134e:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001350:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001354:	f025 0501 	bic.w	r5, r5, #1
 8001358:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800135a:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800135c:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800135e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001362:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001366:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001368:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800136a:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800136c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001370:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001374:	e7d7      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001376:	684c      	ldr	r4, [r1, #4]
 8001378:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800137a:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800137c:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800137e:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001382:	f025 0501 	bic.w	r5, r5, #1
 8001386:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001388:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800138a:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800138c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001390:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8001394:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001396:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 8001398:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800139a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800139e:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80013a2:	e7c0      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013a4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013a6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013aa:	f042 0207 	orr.w	r2, r2, #7
 80013ae:	e7ba      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013b0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013b2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013b6:	f042 0217 	orr.w	r2, r2, #23
 80013ba:	e7b4      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80013bc:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80013be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80013c2:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80013c6:	e7ae      	b.n	8001326 <HAL_TIM_ConfigClockSource+0xd0>

080013c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80013c8:	4770      	bx	lr

080013ca <HAL_TIM_IC_CaptureCallback>:
 80013ca:	4770      	bx	lr

080013cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80013cc:	4770      	bx	lr

080013ce <HAL_TIM_TriggerCallback>:
 80013ce:	4770      	bx	lr

080013d0 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d0:	6803      	ldr	r3, [r0, #0]
{
 80013d2:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d4:	691a      	ldr	r2, [r3, #16]
{
 80013d6:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80013d8:	0791      	lsls	r1, r2, #30
 80013da:	d50e      	bpl.n	80013fa <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80013dc:	68da      	ldr	r2, [r3, #12]
 80013de:	0792      	lsls	r2, r2, #30
 80013e0:	d50b      	bpl.n	80013fa <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80013e2:	f06f 0202 	mvn.w	r2, #2
 80013e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013e8:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013ea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80013ec:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80013ee:	079b      	lsls	r3, r3, #30
 80013f0:	d077      	beq.n	80014e2 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 80013f2:	f7ff ffea 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013f6:	2300      	movs	r3, #0
 80013f8:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80013fa:	6823      	ldr	r3, [r4, #0]
 80013fc:	691a      	ldr	r2, [r3, #16]
 80013fe:	0750      	lsls	r0, r2, #29
 8001400:	d510      	bpl.n	8001424 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001402:	68da      	ldr	r2, [r3, #12]
 8001404:	0751      	lsls	r1, r2, #29
 8001406:	d50d      	bpl.n	8001424 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001408:	f06f 0204 	mvn.w	r2, #4
 800140c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800140e:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001410:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001412:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001414:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 8001418:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800141a:	d068      	beq.n	80014ee <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 800141c:	f7ff ffd5 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001420:	2300      	movs	r3, #0
 8001422:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001424:	6823      	ldr	r3, [r4, #0]
 8001426:	691a      	ldr	r2, [r3, #16]
 8001428:	0712      	lsls	r2, r2, #28
 800142a:	d50f      	bpl.n	800144c <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 800142c:	68da      	ldr	r2, [r3, #12]
 800142e:	0710      	lsls	r0, r2, #28
 8001430:	d50c      	bpl.n	800144c <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001432:	f06f 0208 	mvn.w	r2, #8
 8001436:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001438:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800143a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800143c:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800143e:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001440:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001442:	d05a      	beq.n	80014fa <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001444:	f7ff ffc1 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001448:	2300      	movs	r3, #0
 800144a:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800144c:	6823      	ldr	r3, [r4, #0]
 800144e:	691a      	ldr	r2, [r3, #16]
 8001450:	06d2      	lsls	r2, r2, #27
 8001452:	d510      	bpl.n	8001476 <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001454:	68da      	ldr	r2, [r3, #12]
 8001456:	06d0      	lsls	r0, r2, #27
 8001458:	d50d      	bpl.n	8001476 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800145a:	f06f 0210 	mvn.w	r2, #16
 800145e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001460:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001462:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001464:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001466:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800146a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800146c:	d04b      	beq.n	8001506 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 800146e:	f7ff ffac 	bl	80013ca <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001472:	2300      	movs	r3, #0
 8001474:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	07d1      	lsls	r1, r2, #31
 800147c:	d508      	bpl.n	8001490 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800147e:	68da      	ldr	r2, [r3, #12]
 8001480:	07d2      	lsls	r2, r2, #31
 8001482:	d505      	bpl.n	8001490 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001484:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8001488:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800148a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800148c:	f001 f9da 	bl	8002844 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001490:	6823      	ldr	r3, [r4, #0]
 8001492:	691a      	ldr	r2, [r3, #16]
 8001494:	0610      	lsls	r0, r2, #24
 8001496:	d508      	bpl.n	80014aa <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001498:	68da      	ldr	r2, [r3, #12]
 800149a:	0611      	lsls	r1, r2, #24
 800149c:	d505      	bpl.n	80014aa <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800149e:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80014a2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80014a4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80014a6:	f000 f8aa 	bl	80015fe <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80014aa:	6823      	ldr	r3, [r4, #0]
 80014ac:	691a      	ldr	r2, [r3, #16]
 80014ae:	0652      	lsls	r2, r2, #25
 80014b0:	d508      	bpl.n	80014c4 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80014b2:	68da      	ldr	r2, [r3, #12]
 80014b4:	0650      	lsls	r0, r2, #25
 80014b6:	d505      	bpl.n	80014c4 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80014bc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80014be:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80014c0:	f7ff ff85 	bl	80013ce <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80014c4:	6823      	ldr	r3, [r4, #0]
 80014c6:	691a      	ldr	r2, [r3, #16]
 80014c8:	0691      	lsls	r1, r2, #26
 80014ca:	d522      	bpl.n	8001512 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80014cc:	68da      	ldr	r2, [r3, #12]
 80014ce:	0692      	lsls	r2, r2, #26
 80014d0:	d51f      	bpl.n	8001512 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014d2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80014d6:	4620      	mov	r0, r4
}
 80014d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80014dc:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80014de:	f000 b88d 	b.w	80015fc <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80014e2:	f7ff ff71 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014e6:	4620      	mov	r0, r4
 80014e8:	f7ff ff70 	bl	80013cc <HAL_TIM_PWM_PulseFinishedCallback>
 80014ec:	e783      	b.n	80013f6 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014ee:	f7ff ff6b 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014f2:	4620      	mov	r0, r4
 80014f4:	f7ff ff6a 	bl	80013cc <HAL_TIM_PWM_PulseFinishedCallback>
 80014f8:	e792      	b.n	8001420 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80014fa:	f7ff ff65 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ff64 	bl	80013cc <HAL_TIM_PWM_PulseFinishedCallback>
 8001504:	e7a0      	b.n	8001448 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001506:	f7ff ff5f 	bl	80013c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800150a:	4620      	mov	r0, r4
 800150c:	f7ff ff5e 	bl	80013cc <HAL_TIM_PWM_PulseFinishedCallback>
 8001510:	e7af      	b.n	8001472 <HAL_TIM_IRQHandler+0xa2>
 8001512:	bd10      	pop	{r4, pc}

08001514 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001514:	4a1a      	ldr	r2, [pc, #104]	; (8001580 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 8001516:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001518:	4290      	cmp	r0, r2
 800151a:	d00a      	beq.n	8001532 <TIM_Base_SetConfig+0x1e>
 800151c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001520:	d007      	beq.n	8001532 <TIM_Base_SetConfig+0x1e>
 8001522:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 8001526:	4290      	cmp	r0, r2
 8001528:	d003      	beq.n	8001532 <TIM_Base_SetConfig+0x1e>
 800152a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800152e:	4290      	cmp	r0, r2
 8001530:	d115      	bne.n	800155e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001532:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001534:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8001538:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800153a:	4a11      	ldr	r2, [pc, #68]	; (8001580 <TIM_Base_SetConfig+0x6c>)
 800153c:	4290      	cmp	r0, r2
 800153e:	d00a      	beq.n	8001556 <TIM_Base_SetConfig+0x42>
 8001540:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001544:	d007      	beq.n	8001556 <TIM_Base_SetConfig+0x42>
 8001546:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800154a:	4290      	cmp	r0, r2
 800154c:	d003      	beq.n	8001556 <TIM_Base_SetConfig+0x42>
 800154e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001552:	4290      	cmp	r0, r2
 8001554:	d103      	bne.n	800155e <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001556:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8001558:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800155c:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 800155e:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001564:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 8001566:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001568:	688b      	ldr	r3, [r1, #8]
 800156a:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800156c:	680b      	ldr	r3, [r1, #0]
 800156e:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001570:	4b03      	ldr	r3, [pc, #12]	; (8001580 <TIM_Base_SetConfig+0x6c>)
 8001572:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001574:	bf04      	itt	eq
 8001576:	690b      	ldreq	r3, [r1, #16]
 8001578:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800157a:	2301      	movs	r3, #1
 800157c:	6143      	str	r3, [r0, #20]
 800157e:	4770      	bx	lr
 8001580:	40012c00 	.word	0x40012c00

08001584 <HAL_TIM_Base_Init>:
{
 8001584:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001586:	4604      	mov	r4, r0
 8001588:	b1a0      	cbz	r0, 80015b4 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800158a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800158e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001592:	b91b      	cbnz	r3, 800159c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001594:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001598:	f001 f996 	bl	80028c8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800159c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800159e:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80015a0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015a4:	1d21      	adds	r1, r4, #4
 80015a6:	f7ff ffb5 	bl	8001514 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80015aa:	2301      	movs	r3, #1
  return HAL_OK;
 80015ac:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80015ae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80015b2:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80015b4:	2001      	movs	r0, #1
}
 80015b6:	bd10      	pop	{r4, pc}

080015b8 <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80015b8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80015bc:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80015be:	2b01      	cmp	r3, #1
 80015c0:	f04f 0302 	mov.w	r3, #2
 80015c4:	d018      	beq.n	80015f8 <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80015c6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015ca:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80015cc:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015ce:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80015d0:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80015d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80015d6:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4322      	orrs	r2, r4
 80015dc:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80015de:	689a      	ldr	r2, [r3, #8]
 80015e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015e4:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80015ec:	2301      	movs	r3, #1
 80015ee:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80015f2:	2300      	movs	r3, #0
 80015f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80015f8:	4618      	mov	r0, r3

  return HAL_OK;
}
 80015fa:	bd10      	pop	{r4, pc}

080015fc <HAL_TIMEx_CommutationCallback>:
 80015fc:	4770      	bx	lr

080015fe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80015fe:	4770      	bx	lr

08001600 <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001600:	b084      	sub	sp, #16
 8001602:	a801      	add	r0, sp, #4
 8001604:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001608:	b004      	add	sp, #16
 800160a:	2000      	movs	r0, #0
 800160c:	4770      	bx	lr

0800160e <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
     | USB_CNTR_SOFM | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 800160e:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001612:	b29b      	uxth	r3, r3
 8001614:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001618:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 800161c:	2000      	movs	r0, #0
 800161e:	4770      	bx	lr

08001620 <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 8001620:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8001624:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8001628:	045b      	lsls	r3, r3, #17
 800162a:	0c5b      	lsrs	r3, r3, #17
 800162c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8001630:	2000      	movs	r0, #0
 8001632:	4770      	bx	lr

08001634 <USB_SetCurrentMode>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001634:	2000      	movs	r0, #0
 8001636:	4770      	bx	lr

08001638 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8001638:	b084      	sub	sp, #16
 800163a:	b510      	push	{r4, lr}
 800163c:	ac03      	add	r4, sp, #12
 800163e:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /* Enable USB Device Interrupt mask */
  USB_EnableGlobalInt(USBx);
    
  return HAL_OK;
}
 8001642:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = 0;
 8001646:	2200      	movs	r2, #0
  USBx->CNTR = USB_CNTR_FRES;
 8001648:	2301      	movs	r3, #1
 800164a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 800164e:	f8a0 2040 	strh.w	r2, [r0, #64]	; 0x40
  USBx->ISTR = 0;
 8001652:	f8a0 2044 	strh.w	r2, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8001656:	f8a0 2050 	strh.w	r2, [r0, #80]	; 0x50
  USBx->CNTR |= winterruptmask;
 800165a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
}
 800165e:	b004      	add	sp, #16
  USBx->CNTR |= winterruptmask;
 8001660:	b29b      	uxth	r3, r3
 8001662:	f443 433f 	orr.w	r3, r3, #48896	; 0xbf00
 8001666:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 800166a:	4610      	mov	r0, r2
 800166c:	4770      	bx	lr
	...

08001670 <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001670:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8001672:	78cb      	ldrb	r3, [r1, #3]
 8001674:	780a      	ldrb	r2, [r1, #0]
 8001676:	2b03      	cmp	r3, #3
 8001678:	d80f      	bhi.n	800169a <USB_ActivateEndpoint+0x2a>
 800167a:	e8df f003 	tbb	[pc, r3]
 800167e:	6402      	.short	0x6402
 8001680:	5950      	.short	0x5950
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8001682:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001686:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800168a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800168e:	041b      	lsls	r3, r3, #16
 8001690:	0c1b      	lsrs	r3, r3, #16
 8001692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001696:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800169a:	f640 730f 	movw	r3, #3855	; 0xf0f
 800169e:	780c      	ldrb	r4, [r1, #0]
 80016a0:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80016a4:	f444 4500 	orr.w	r5, r4, #32768	; 0x8000
 80016a8:	f045 0580 	orr.w	r5, r5, #128	; 0x80
 80016ac:	401a      	ands	r2, r3
 80016ae:	432a      	orrs	r2, r5
 80016b0:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
  
  if (ep->doublebuffer == 0) 
 80016b4:	7a8a      	ldrb	r2, [r1, #10]
 80016b6:	780d      	ldrb	r5, [r1, #0]
 80016b8:	2a00      	cmp	r2, #0
 80016ba:	f040 8097 	bne.w	80017ec <USB_ActivateEndpoint+0x17c>
  {
    if (ep->is_in)
 80016be:	784c      	ldrb	r4, [r1, #1]
 80016c0:	888a      	ldrh	r2, [r1, #4]
 80016c2:	2c00      	cmp	r4, #0
 80016c4:	d04a      	beq.n	800175c <USB_ActivateEndpoint+0xec>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80016c6:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 80016ca:	0852      	lsrs	r2, r2, #1
 80016cc:	b2a4      	uxth	r4, r4
 80016ce:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80016d2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80016d6:	0052      	lsls	r2, r2, #1
 80016d8:	f8c4 2400 	str.w	r2, [r4, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80016dc:	780c      	ldrb	r4, [r1, #0]
 80016de:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80016e2:	0652      	lsls	r2, r2, #25
 80016e4:	d508      	bpl.n	80016f8 <USB_ActivateEndpoint+0x88>
 80016e6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80016ea:	4013      	ands	r3, r2
 80016ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016f0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80016f4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 80016f8:	780a      	ldrb	r2, [r1, #0]
 80016fa:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80016fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001702:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001706:	041b      	lsls	r3, r3, #16
 8001708:	0c1b      	lsrs	r3, r3, #16
 800170a:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800170e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001712:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001716:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800171a:	2000      	movs	r0, #0
 800171c:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 800171e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001722:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001726:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800172a:	041b      	lsls	r3, r3, #16
 800172c:	0c1b      	lsrs	r3, r3, #16
 800172e:	e7b2      	b.n	8001696 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8001730:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001734:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8001738:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800173c:	041b      	lsls	r3, r3, #16
 800173e:	0c1b      	lsrs	r3, r3, #16
 8001740:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8001744:	e7a7      	b.n	8001696 <USB_ActivateEndpoint+0x26>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8001746:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800174a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800174e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001752:	041b      	lsls	r3, r3, #16
 8001754:	0c1b      	lsrs	r3, r3, #16
 8001756:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800175a:	e79c      	b.n	8001696 <USB_ActivateEndpoint+0x26>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800175c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8001760:	0852      	lsrs	r2, r2, #1
 8001762:	b29b      	uxth	r3, r3
 8001764:	3304      	adds	r3, #4
 8001766:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800176a:	0052      	lsls	r2, r2, #1
 800176c:	f500 6480 	add.w	r4, r0, #1024	; 0x400
 8001770:	f844 2013 	str.w	r2, [r4, r3, lsl #1]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8001774:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001778:	690d      	ldr	r5, [r1, #16]
 800177a:	b292      	uxth	r2, r2
 800177c:	780b      	ldrb	r3, [r1, #0]
 800177e:	3206      	adds	r2, #6
 8001780:	2d3e      	cmp	r5, #62	; 0x3e
 8001782:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
 8001786:	d929      	bls.n	80017dc <USB_ActivateEndpoint+0x16c>
 8001788:	f3c5 164f 	ubfx	r6, r5, #5, #16
 800178c:	06eb      	lsls	r3, r5, #27
 800178e:	bf04      	itt	eq
 8001790:	f106 33ff 	addeq.w	r3, r6, #4294967295
 8001794:	b29e      	uxtheq	r6, r3
 8001796:	4b6e      	ldr	r3, [pc, #440]	; (8001950 <USB_ActivateEndpoint+0x2e0>)
 8001798:	ea43 2386 	orr.w	r3, r3, r6, lsl #10
 800179c:	b29b      	uxth	r3, r3
 800179e:	f844 3012 	str.w	r3, [r4, r2, lsl #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80017a2:	780a      	ldrb	r2, [r1, #0]
 80017a4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017a8:	045e      	lsls	r6, r3, #17
 80017aa:	d50b      	bpl.n	80017c4 <USB_ActivateEndpoint+0x154>
 80017ac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017b4:	051b      	lsls	r3, r3, #20
 80017b6:	0d1b      	lsrs	r3, r3, #20
 80017b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017c0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80017c4:	780a      	ldrb	r2, [r1, #0]
 80017c6:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80017ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80017ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80017d2:	041b      	lsls	r3, r3, #16
 80017d4:	0c1b      	lsrs	r3, r3, #16
 80017d6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80017da:	e798      	b.n	800170e <USB_ActivateEndpoint+0x9e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80017dc:	f3c5 034f 	ubfx	r3, r5, #1, #16
 80017e0:	07ed      	lsls	r5, r5, #31
 80017e2:	bf44      	itt	mi
 80017e4:	3301      	addmi	r3, #1
 80017e6:	b29b      	uxthmi	r3, r3
 80017e8:	029b      	lsls	r3, r3, #10
 80017ea:	e7d7      	b.n	800179c <USB_ActivateEndpoint+0x12c>
    PCD_SET_EP_DBUF(USBx, ep->num);
 80017ec:	f830 2025 	ldrh.w	r2, [r0, r5, lsl #2]
 80017f0:	f422 72f8 	bic.w	r2, r2, #496	; 0x1f0
 80017f4:	0512      	lsls	r2, r2, #20
 80017f6:	0d12      	lsrs	r2, r2, #20
 80017f8:	f442 4201 	orr.w	r2, r2, #33024	; 0x8100
 80017fc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001800:	f820 2025 	strh.w	r2, [r0, r5, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8001804:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001808:	780c      	ldrb	r4, [r1, #0]
 800180a:	b292      	uxth	r2, r2
 800180c:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 8001810:	88cc      	ldrh	r4, [r1, #6]
 8001812:	f500 6580 	add.w	r5, r0, #1024	; 0x400
 8001816:	0864      	lsrs	r4, r4, #1
 8001818:	0064      	lsls	r4, r4, #1
 800181a:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
 800181e:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8001822:	780c      	ldrb	r4, [r1, #0]
 8001824:	b292      	uxth	r2, r2
 8001826:	3204      	adds	r2, #4
 8001828:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800182c:	890c      	ldrh	r4, [r1, #8]
 800182e:	0864      	lsrs	r4, r4, #1
 8001830:	0064      	lsls	r4, r4, #1
 8001832:	f845 4012 	str.w	r4, [r5, r2, lsl #1]
    if (ep->is_in==0)
 8001836:	784a      	ldrb	r2, [r1, #1]
 8001838:	780c      	ldrb	r4, [r1, #0]
 800183a:	2a00      	cmp	r2, #0
 800183c:	d147      	bne.n	80018ce <USB_ActivateEndpoint+0x25e>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800183e:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 8001842:	0455      	lsls	r5, r2, #17
 8001844:	d508      	bpl.n	8001858 <USB_ActivateEndpoint+0x1e8>
 8001846:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 800184a:	4013      	ands	r3, r2
 800184c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001850:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001854:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001858:	780a      	ldrb	r2, [r1, #0]
 800185a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 800185e:	065c      	lsls	r4, r3, #25
 8001860:	d50b      	bpl.n	800187a <USB_ActivateEndpoint+0x20a>
 8001862:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001866:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800186a:	051b      	lsls	r3, r3, #20
 800186c:	0d1b      	lsrs	r3, r3, #20
 800186e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001872:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001876:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 800187a:	780a      	ldrb	r2, [r1, #0]
 800187c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001880:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001884:	051b      	lsls	r3, r3, #20
 8001886:	0d1b      	lsrs	r3, r3, #20
 8001888:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800188c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001890:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001894:	f248 0280 	movw	r2, #32896	; 0x8080
 8001898:	780c      	ldrb	r4, [r1, #0]
 800189a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800189e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80018a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018a6:	041b      	lsls	r3, r3, #16
 80018a8:	0c1b      	lsrs	r3, r3, #16
 80018aa:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 80018ae:	4313      	orrs	r3, r2
 80018b0:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80018b4:	7809      	ldrb	r1, [r1, #0]
 80018b6:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 80018ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80018be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80018c2:	041b      	lsls	r3, r3, #16
 80018c4:	0c1b      	lsrs	r3, r3, #16
 80018c6:	4313      	orrs	r3, r2
 80018c8:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 80018cc:	e725      	b.n	800171a <USB_ActivateEndpoint+0xaa>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80018ce:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80018d2:	0452      	lsls	r2, r2, #17
 80018d4:	d508      	bpl.n	80018e8 <USB_ActivateEndpoint+0x278>
 80018d6:	f830 2024 	ldrh.w	r2, [r0, r4, lsl #2]
 80018da:	4013      	ands	r3, r2
 80018dc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80018e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018e4:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80018e8:	780a      	ldrb	r2, [r1, #0]
 80018ea:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018ee:	065b      	lsls	r3, r3, #25
 80018f0:	d50b      	bpl.n	800190a <USB_ActivateEndpoint+0x29a>
 80018f2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80018f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80018fa:	051b      	lsls	r3, r3, #20
 80018fc:	0d1b      	lsrs	r3, r3, #20
 80018fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001902:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001906:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 800190a:	780a      	ldrb	r2, [r1, #0]
 800190c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001910:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001914:	051b      	lsls	r3, r3, #20
 8001916:	0d1b      	lsrs	r3, r3, #20
 8001918:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800191c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001920:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001924:	f248 0280 	movw	r2, #32896	; 0x8080
 8001928:	780c      	ldrb	r4, [r1, #0]
 800192a:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 800192e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001932:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001936:	041b      	lsls	r3, r3, #16
 8001938:	0c1b      	lsrs	r3, r3, #16
 800193a:	4313      	orrs	r3, r2
 800193c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001940:	7809      	ldrb	r1, [r1, #0]
 8001942:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001946:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800194a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800194e:	e7b8      	b.n	80018c2 <USB_ActivateEndpoint+0x252>
 8001950:	ffff8000 	.word	0xffff8000

08001954 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8001954:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0) 
 8001956:	7a8c      	ldrb	r4, [r1, #10]
 8001958:	784a      	ldrb	r2, [r1, #1]
 800195a:	780b      	ldrb	r3, [r1, #0]
 800195c:	bbcc      	cbnz	r4, 80019d2 <USB_DeactivateEndpoint+0x7e>
  {
    if (ep->is_in)
 800195e:	b302      	cbz	r2, 80019a2 <USB_DeactivateEndpoint+0x4e>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001960:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001964:	0652      	lsls	r2, r2, #25
 8001966:	d50b      	bpl.n	8001980 <USB_DeactivateEndpoint+0x2c>
 8001968:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 800196c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001970:	0512      	lsls	r2, r2, #20
 8001972:	0d12      	lsrs	r2, r2, #20
 8001974:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001978:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 800197c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8001980:	780a      	ldrb	r2, [r1, #0]
 8001982:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800198a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800198e:	041b      	lsls	r3, r3, #16
 8001990:	0c1b      	lsrs	r3, r3, #16
 8001992:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001996:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800199a:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 800199e:	2000      	movs	r0, #0
 80019a0:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019a2:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019a6:	0454      	lsls	r4, r2, #17
 80019a8:	d50b      	bpl.n	80019c2 <USB_DeactivateEndpoint+0x6e>
 80019aa:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019ae:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019b2:	0512      	lsls	r2, r2, #20
 80019b4:	0d12      	lsrs	r2, r2, #20
 80019b6:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019ba:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019be:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80019c2:	780a      	ldrb	r2, [r1, #0]
 80019c4:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019c8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80019cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019d0:	e7dd      	b.n	800198e <USB_DeactivateEndpoint+0x3a>
    if (ep->is_in==0)
 80019d2:	2a00      	cmp	r2, #0
 80019d4:	d148      	bne.n	8001a68 <USB_DeactivateEndpoint+0x114>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80019d6:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019da:	0452      	lsls	r2, r2, #17
 80019dc:	d50b      	bpl.n	80019f6 <USB_DeactivateEndpoint+0xa2>
 80019de:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 80019e2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80019e6:	0512      	lsls	r2, r2, #20
 80019e8:	0d12      	lsrs	r2, r2, #20
 80019ea:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80019ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80019f2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80019f6:	780a      	ldrb	r2, [r1, #0]
 80019f8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 80019fc:	065c      	lsls	r4, r3, #25
 80019fe:	d50b      	bpl.n	8001a18 <USB_DeactivateEndpoint+0xc4>
 8001a00:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a08:	051b      	lsls	r3, r3, #20
 8001a0a:	0d1b      	lsrs	r3, r3, #20
 8001a0c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a10:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a14:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8001a18:	780a      	ldrb	r2, [r1, #0]
 8001a1a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a22:	051b      	lsls	r3, r3, #20
 8001a24:	0d1b      	lsrs	r3, r3, #20
 8001a26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a2a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001a2e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a32:	f248 0280 	movw	r2, #32896	; 0x8080
 8001a36:	780c      	ldrb	r4, [r1, #0]
 8001a38:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001a3c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001a40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001a44:	041b      	lsls	r3, r3, #16
 8001a46:	0c1b      	lsrs	r3, r3, #16
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001a4e:	7809      	ldrb	r1, [r1, #0]
 8001a50:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001a54:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001a58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001a5c:	041b      	lsls	r3, r3, #16
 8001a5e:	0c1b      	lsrs	r3, r3, #16
 8001a60:	4313      	orrs	r3, r2
 8001a62:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8001a66:	e79a      	b.n	800199e <USB_DeactivateEndpoint+0x4a>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001a68:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a6c:	0452      	lsls	r2, r2, #17
 8001a6e:	d50b      	bpl.n	8001a88 <USB_DeactivateEndpoint+0x134>
 8001a70:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8001a74:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8001a78:	0512      	lsls	r2, r2, #20
 8001a7a:	0d12      	lsrs	r2, r2, #20
 8001a7c:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8001a80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001a84:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001a88:	780a      	ldrb	r2, [r1, #0]
 8001a8a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a8e:	065b      	lsls	r3, r3, #25
 8001a90:	d50b      	bpl.n	8001aaa <USB_DeactivateEndpoint+0x156>
 8001a92:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a9a:	051b      	lsls	r3, r3, #20
 8001a9c:	0d1b      	lsrs	r3, r3, #20
 8001a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001aa2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001aa6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8001aaa:	780a      	ldrb	r2, [r1, #0]
 8001aac:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ab0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ab4:	051b      	lsls	r3, r3, #20
 8001ab6:	0d1b      	lsrs	r3, r3, #20
 8001ab8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001abc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ac0:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8001ac4:	f248 0280 	movw	r2, #32896	; 0x8080
 8001ac8:	780c      	ldrb	r4, [r1, #0]
 8001aca:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8001ace:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ad2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001ad6:	041b      	lsls	r3, r3, #16
 8001ad8:	0c1b      	lsrs	r3, r3, #16
 8001ada:	4313      	orrs	r3, r2
 8001adc:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8001ae0:	7809      	ldrb	r1, [r1, #0]
 8001ae2:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8001ae6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001aee:	e7b5      	b.n	8001a5c <USB_DeactivateEndpoint+0x108>

08001af0 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8001af0:	780a      	ldrb	r2, [r1, #0]
 8001af2:	b98a      	cbnz	r2, 8001b18 <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8001af4:	8803      	ldrh	r3, [r0, #0]
 8001af6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001afa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001afe:	041b      	lsls	r3, r3, #16
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b06:	f083 0310 	eor.w	r3, r3, #16
 8001b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b12:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8001b14:	2000      	movs	r0, #0
 8001b16:	4770      	bx	lr
    if (ep->is_in)
 8001b18:	784b      	ldrb	r3, [r1, #1]
 8001b1a:	b183      	cbz	r3, 8001b3e <USB_EPSetStall+0x4e>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8001b1c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b20:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b24:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b28:	041b      	lsls	r3, r3, #16
 8001b2a:	0c1b      	lsrs	r3, r3, #16
 8001b2c:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8001b30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b38:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8001b3c:	e7ea      	b.n	8001b14 <USB_EPSetStall+0x24>
 8001b3e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b42:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b4a:	041b      	lsls	r3, r3, #16
 8001b4c:	0c1b      	lsrs	r3, r3, #16
 8001b4e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001b52:	e7ed      	b.n	8001b30 <USB_EPSetStall+0x40>

08001b54 <USB_EPClearStall>:
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in)
 8001b54:	784b      	ldrb	r3, [r1, #1]
 8001b56:	780a      	ldrb	r2, [r1, #0]
 8001b58:	b313      	cbz	r3, 8001ba0 <USB_EPClearStall+0x4c>
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8001b5a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b5e:	065b      	lsls	r3, r3, #25
 8001b60:	d50b      	bpl.n	8001b7a <USB_EPClearStall+0x26>
 8001b62:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b6a:	051b      	lsls	r3, r3, #20
 8001b6c:	0d1b      	lsrs	r3, r3, #20
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001b76:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001b7a:	780a      	ldrb	r2, [r1, #0]
 8001b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001b80:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001b84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001b88:	041b      	lsls	r3, r3, #16
 8001b8a:	0c1b      	lsrs	r3, r3, #16
 8001b8c:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001b90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b98:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8001b9c:	2000      	movs	r0, #0
 8001b9e:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8001ba0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001ba4:	045b      	lsls	r3, r3, #17
 8001ba6:	d50b      	bpl.n	8001bc0 <USB_EPClearStall+0x6c>
 8001ba8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bac:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bb0:	051b      	lsls	r3, r3, #20
 8001bb2:	0d1b      	lsrs	r3, r3, #20
 8001bb4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001bbc:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001bc0:	780a      	ldrb	r2, [r1, #0]
 8001bc2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8001bc6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001bce:	041b      	lsls	r3, r3, #16
 8001bd0:	0c1b      	lsrs	r3, r3, #16
 8001bd2:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001bd6:	e7db      	b.n	8001b90 <USB_EPClearStall+0x3c>

08001bd8 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8001bd8:	b911      	cbnz	r1, 8001be0 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8001bda:	2380      	movs	r3, #128	; 0x80
 8001bdc:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8001be0:	2000      	movs	r0, #0
 8001be2:	4770      	bx	lr

08001be4 <USB_DevConnect>:
 8001be4:	2000      	movs	r0, #0
 8001be6:	4770      	bx	lr

08001be8 <USB_DevDisconnect>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001be8:	2000      	movs	r0, #0
 8001bea:	4770      	bx	lr

08001bec <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8001bec:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8001bf0:	b280      	uxth	r0, r0
 8001bf2:	4770      	bx	lr

08001bf4 <USB_EP0_OutStart>:
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used 
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
}
 8001bf4:	2000      	movs	r0, #0
 8001bf6:	4770      	bx	lr

08001bf8 <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001bf8:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
  uint32_t index = 0, temp1 = 0, temp2 = 0;
  uint16_t *pdwVal = NULL;
  
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001bfa:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001bfc:	3301      	adds	r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001bfe:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;   /* nbytes = (wNBytes + 1) / 2 */
 8001c02:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001c04:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001c08:	42a3      	cmp	r3, r4
 8001c0a:	d100      	bne.n	8001c0e <USB_WritePMA+0x16>
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pdwVal++;
    pbUsrBuf++;
  }
}
 8001c0c:	bd10      	pop	{r4, pc}
 8001c0e:	f831 0b02 	ldrh.w	r0, [r1], #2
    *pdwVal++ = temp2;
 8001c12:	f822 0024 	strh.w	r0, [r2, r4, lsl #2]
 8001c16:	3401      	adds	r4, #1
 8001c18:	e7f6      	b.n	8001c08 <USB_WritePMA+0x10>
	...

08001c1c <USB_EPStartXfer>:
{
 8001c1c:	b570      	push	{r4, r5, r6, lr}
 8001c1e:	460e      	mov	r6, r1
  uint32_t len = ep->xfer_len;
 8001c20:	698a      	ldr	r2, [r1, #24]
  if (ep->is_in == 1)
 8001c22:	7849      	ldrb	r1, [r1, #1]
{
 8001c24:	4605      	mov	r5, r0
  if (ep->is_in == 1)
 8001c26:	2901      	cmp	r1, #1
 8001c28:	6933      	ldr	r3, [r6, #16]
 8001c2a:	7ab0      	ldrb	r0, [r6, #10]
 8001c2c:	d166      	bne.n	8001cfc <USB_EPStartXfer+0xe0>
    if (ep->xfer_len > ep->maxpacket)
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	461c      	mov	r4, r3
      ep->xfer_len =0;
 8001c32:	bf9b      	ittet	ls
 8001c34:	2300      	movls	r3, #0
 8001c36:	4614      	movls	r4, r2
      ep->xfer_len-=len; 
 8001c38:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8001c3a:	61b3      	strls	r3, [r6, #24]
      ep->xfer_len-=len; 
 8001c3c:	bf88      	it	hi
 8001c3e:	61b2      	strhi	r2, [r6, #24]
 8001c40:	b2a3      	uxth	r3, r4
    if (ep->doublebuffer == 0) 
 8001c42:	bb10      	cbnz	r0, 8001c8a <USB_EPStartXfer+0x6e>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 8001c44:	88b2      	ldrh	r2, [r6, #4]
 8001c46:	6971      	ldr	r1, [r6, #20]
 8001c48:	4628      	mov	r0, r5
 8001c4a:	f7ff ffd5 	bl	8001bf8 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8001c4e:	f8b5 3050 	ldrh.w	r3, [r5, #80]	; 0x50
 8001c52:	7832      	ldrb	r2, [r6, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	3302      	adds	r3, #2
 8001c58:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001c5c:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8001c60:	f8c3 4400 	str.w	r4, [r3, #1024]	; 0x400
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8001c64:	7832      	ldrb	r2, [r6, #0]
 8001c66:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001c6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001c6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001c72:	041b      	lsls	r3, r3, #16
 8001c74:	0c1b      	lsrs	r3, r3, #16
 8001c76:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c82:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
}
 8001c86:	2000      	movs	r0, #0
 8001c88:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001c8a:	7832      	ldrb	r2, [r6, #0]
 8001c8c:	f835 1022 	ldrh.w	r1, [r5, r2, lsl #2]
 8001c90:	00d2      	lsls	r2, r2, #3
 8001c92:	f011 0f40 	tst.w	r1, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c96:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001c9a:	b289      	uxth	r1, r1
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 8001c9c:	d01a      	beq.n	8001cd4 <USB_EPStartXfer+0xb8>
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8001c9e:	3102      	adds	r1, #2
 8001ca0:	440a      	add	r2, r1
 8001ca2:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001ca6:	f8c2 4400 	str.w	r4, [r2, #1024]	; 0x400
        pmabuffer = ep->pmaaddr1;
 8001caa:	8932      	ldrh	r2, [r6, #8]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 8001cac:	6971      	ldr	r1, [r6, #20]
 8001cae:	4628      	mov	r0, r5
 8001cb0:	f7ff ffa2 	bl	8001bf8 <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001cb4:	7873      	ldrb	r3, [r6, #1]
 8001cb6:	7832      	ldrb	r2, [r6, #0]
 8001cb8:	b99b      	cbnz	r3, 8001ce2 <USB_EPStartXfer+0xc6>
 8001cba:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001cbe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cc2:	051b      	lsls	r3, r3, #20
 8001cc4:	0d1b      	lsrs	r3, r3, #20
 8001cc6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001cca:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001cce:	f825 3022 	strh.w	r3, [r5, r2, lsl #2]
 8001cd2:	e7c7      	b.n	8001c64 <USB_EPStartXfer+0x48>
        PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8001cd4:	440a      	add	r2, r1
 8001cd6:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001cda:	f8c2 4404 	str.w	r4, [r2, #1028]	; 0x404
        pmabuffer = ep->pmaaddr0;
 8001cde:	88f2      	ldrh	r2, [r6, #6]
 8001ce0:	e7e4      	b.n	8001cac <USB_EPStartXfer+0x90>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d1be      	bne.n	8001c64 <USB_EPStartXfer+0x48>
 8001ce6:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001cea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cee:	051b      	lsls	r3, r3, #20
 8001cf0:	0d1b      	lsrs	r3, r3, #20
 8001cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001cf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cfa:	e7e8      	b.n	8001cce <USB_EPStartXfer+0xb2>
    if (ep->xfer_len > ep->maxpacket)
 8001cfc:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8001cfe:	bf93      	iteet	ls
 8001d00:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8001d02:	1ad2      	subhi	r2, r2, r3
 8001d04:	61b2      	strhi	r2, [r6, #24]
      ep->xfer_len =0;
 8001d06:	61b3      	strls	r3, [r6, #24]
 8001d08:	bf98      	it	ls
 8001d0a:	4613      	movls	r3, r2
 8001d0c:	7832      	ldrb	r2, [r6, #0]
    if (ep->doublebuffer == 0) 
 8001d0e:	bb70      	cbnz	r0, 8001d6e <USB_EPStartXfer+0x152>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001d10:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001d14:	2b3e      	cmp	r3, #62	; 0x3e
 8001d16:	b289      	uxth	r1, r1
 8001d18:	f101 0106 	add.w	r1, r1, #6
 8001d1c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001d20:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001d24:	d918      	bls.n	8001d58 <USB_EPStartXfer+0x13c>
 8001d26:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8001d2a:	06db      	lsls	r3, r3, #27
 8001d2c:	bf04      	itt	eq
 8001d2e:	f102 33ff 	addeq.w	r3, r2, #4294967295
 8001d32:	b29a      	uxtheq	r2, r3
 8001d34:	4b38      	ldr	r3, [pc, #224]	; (8001e18 <USB_EPStartXfer+0x1fc>)
 8001d36:	ea43 2382 	orr.w	r3, r3, r2, lsl #10
 8001d3a:	b29b      	uxth	r3, r3
 8001d3c:	f840 3011 	str.w	r3, [r0, r1, lsl #1]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8001d40:	7832      	ldrb	r2, [r6, #0]
 8001d42:	f835 3022 	ldrh.w	r3, [r5, r2, lsl #2]
 8001d46:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001d4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d4e:	041b      	lsls	r3, r3, #16
 8001d50:	0c1b      	lsrs	r3, r3, #16
 8001d52:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8001d56:	e790      	b.n	8001c7a <USB_EPStartXfer+0x5e>
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8001d58:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001d5c:	07dc      	lsls	r4, r3, #31
 8001d5e:	bf44      	itt	mi
 8001d60:	3201      	addmi	r2, #1
 8001d62:	b292      	uxthmi	r2, r2
 8001d64:	0292      	lsls	r2, r2, #10
 8001d66:	b292      	uxth	r2, r2
 8001d68:	f840 2011 	str.w	r2, [r0, r1, lsl #1]
 8001d6c:	e7e8      	b.n	8001d40 <USB_EPStartXfer+0x124>
      PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8001d6e:	b9b9      	cbnz	r1, 8001da0 <USB_EPStartXfer+0x184>
 8001d70:	f8b5 1050 	ldrh.w	r1, [r5, #80]	; 0x50
 8001d74:	2b3e      	cmp	r3, #62	; 0x3e
 8001d76:	b289      	uxth	r1, r1
 8001d78:	f101 0102 	add.w	r1, r1, #2
 8001d7c:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 8001d80:	f505 6480 	add.w	r4, r5, #1024	; 0x400
 8001d84:	d928      	bls.n	8001dd8 <USB_EPStartXfer+0x1bc>
 8001d86:	f3c3 104f 	ubfx	r0, r3, #5, #16
 8001d8a:	06da      	lsls	r2, r3, #27
 8001d8c:	bf04      	itt	eq
 8001d8e:	f100 32ff 	addeq.w	r2, r0, #4294967295
 8001d92:	b290      	uxtheq	r0, r2
 8001d94:	4a20      	ldr	r2, [pc, #128]	; (8001e18 <USB_EPStartXfer+0x1fc>)
 8001d96:	ea42 2280 	orr.w	r2, r2, r0, lsl #10
 8001d9a:	b292      	uxth	r2, r2
 8001d9c:	f844 2011 	str.w	r2, [r4, r1, lsl #1]
 8001da0:	7872      	ldrb	r2, [r6, #1]
 8001da2:	7831      	ldrb	r1, [r6, #0]
 8001da4:	bb5a      	cbnz	r2, 8001dfe <USB_EPStartXfer+0x1e2>
 8001da6:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001daa:	2b3e      	cmp	r3, #62	; 0x3e
 8001dac:	b292      	uxth	r2, r2
 8001dae:	f102 0206 	add.w	r2, r2, #6
 8001db2:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001db6:	f505 6080 	add.w	r0, r5, #1024	; 0x400
 8001dba:	d915      	bls.n	8001de8 <USB_EPStartXfer+0x1cc>
 8001dbc:	f3c3 114f 	ubfx	r1, r3, #5, #16
 8001dc0:	06dc      	lsls	r4, r3, #27
 8001dc2:	bf04      	itt	eq
 8001dc4:	f101 33ff 	addeq.w	r3, r1, #4294967295
 8001dc8:	b299      	uxtheq	r1, r3
 8001dca:	4b13      	ldr	r3, [pc, #76]	; (8001e18 <USB_EPStartXfer+0x1fc>)
 8001dcc:	ea43 2381 	orr.w	r3, r3, r1, lsl #10
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	f840 3012 	str.w	r3, [r0, r2, lsl #1]
 8001dd6:	e7b3      	b.n	8001d40 <USB_EPStartXfer+0x124>
 8001dd8:	f3c3 024f 	ubfx	r2, r3, #1, #16
 8001ddc:	07d8      	lsls	r0, r3, #31
 8001dde:	bf44      	itt	mi
 8001de0:	3201      	addmi	r2, #1
 8001de2:	b292      	uxthmi	r2, r2
 8001de4:	0292      	lsls	r2, r2, #10
 8001de6:	e7d8      	b.n	8001d9a <USB_EPStartXfer+0x17e>
 8001de8:	f3c3 014f 	ubfx	r1, r3, #1, #16
 8001dec:	07db      	lsls	r3, r3, #31
 8001dee:	bf44      	itt	mi
 8001df0:	3101      	addmi	r1, #1
 8001df2:	b289      	uxthmi	r1, r1
 8001df4:	0289      	lsls	r1, r1, #10
 8001df6:	b289      	uxth	r1, r1
 8001df8:	f840 1012 	str.w	r1, [r0, r2, lsl #1]
 8001dfc:	e7a0      	b.n	8001d40 <USB_EPStartXfer+0x124>
 8001dfe:	2a01      	cmp	r2, #1
 8001e00:	d19e      	bne.n	8001d40 <USB_EPStartXfer+0x124>
 8001e02:	f8b5 2050 	ldrh.w	r2, [r5, #80]	; 0x50
 8001e06:	b292      	uxth	r2, r2
 8001e08:	3202      	adds	r2, #2
 8001e0a:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8001e0e:	eb05 0242 	add.w	r2, r5, r2, lsl #1
 8001e12:	f8c2 3400 	str.w	r3, [r2, #1024]	; 0x400
 8001e16:	e793      	b.n	8001d40 <USB_EPStartXfer+0x124>
 8001e18:	ffff8000 	.word	0xffff8000

08001e1c <USB_ReadPMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8001e1c:	b510      	push	{r4, lr}
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
  uint32_t index = 0;
  uint32_t *pdwVal = NULL;
  
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
  for (index = nbytes; index != 0; index--)
 8001e1e:	2400      	movs	r4, #0
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001e20:	3301      	adds	r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e22:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t nbytes = (wNBytes + 1) >> 1;/* /2*/
 8001e26:	105b      	asrs	r3, r3, #1
  pdwVal = (uint32_t *)(wPMABufAddr * 2 + (uint32_t)USBx + 0x400);
 8001e28:	eb00 0242 	add.w	r2, r0, r2, lsl #1
  for (index = nbytes; index != 0; index--)
 8001e2c:	42a3      	cmp	r3, r4
 8001e2e:	d100      	bne.n	8001e32 <USB_ReadPMA+0x16>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 8001e30:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8001e32:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
 8001e36:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8001e3a:	3401      	adds	r4, #1
 8001e3c:	e7f6      	b.n	8001e2c <USB_ReadPMA+0x10>

08001e3e <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e3e:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8001e42:	b11b      	cbz	r3, 8001e4c <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8001e44:	2000      	movs	r0, #0
 8001e46:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8001e4a:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 8001e4c:	2002      	movs	r0, #2
  }
}
 8001e4e:	4770      	bx	lr

08001e50 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001e50:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 8001e54:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001e56:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 8001e5a:	b15b      	cbz	r3, 8001e74 <USBD_CDC_EP0_RxReady+0x24>
 8001e5c:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 8001e60:	28ff      	cmp	r0, #255	; 0xff
 8001e62:	d007      	beq.n	8001e74 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 8001e6a:	4621      	mov	r1, r4
 8001e6c:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 8001e6e:	23ff      	movs	r3, #255	; 0xff
 8001e70:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 8001e74:	2000      	movs	r0, #0
 8001e76:	bd10      	pop	{r4, pc}

08001e78 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 8001e78:	2343      	movs	r3, #67	; 0x43
 8001e7a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8001e7c:	4800      	ldr	r0, [pc, #0]	; (8001e80 <USBD_CDC_GetFSCfgDesc+0x8>)
 8001e7e:	4770      	bx	lr
 8001e80:	20000040 	.word	0x20000040

08001e84 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 8001e84:	2343      	movs	r3, #67	; 0x43
 8001e86:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8001e88:	4800      	ldr	r0, [pc, #0]	; (8001e8c <USBD_CDC_GetHSCfgDesc+0x8>)
 8001e8a:	4770      	bx	lr
 8001e8c:	20000084 	.word	0x20000084

08001e90 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 8001e90:	2343      	movs	r3, #67	; 0x43
 8001e92:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8001e94:	4800      	ldr	r0, [pc, #0]	; (8001e98 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8001e96:	4770      	bx	lr
 8001e98:	200000d4 	.word	0x200000d4

08001e9c <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 8001e9c:	230a      	movs	r3, #10
 8001e9e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 8001ea0:	4800      	ldr	r0, [pc, #0]	; (8001ea4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 8001ea2:	4770      	bx	lr
 8001ea4:	200000c8 	.word	0x200000c8

08001ea8 <USBD_CDC_DataOut>:
{      
 8001ea8:	b538      	push	{r3, r4, r5, lr}
 8001eaa:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001eac:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001eb0:	f000 fec6 	bl	8002c40 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8001eb4:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8001eb8:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 8001ebc:	b14b      	cbz	r3, 8001ed2 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8001ebe:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8001ec2:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8001ecc:	4798      	blx	r3
    return USBD_OK;
 8001ece:	2000      	movs	r0, #0
 8001ed0:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8001ed2:	2002      	movs	r0, #2
}
 8001ed4:	bd38      	pop	{r3, r4, r5, pc}
	...

08001ed8 <USBD_CDC_Setup>:
{
 8001ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001eda:	780f      	ldrb	r7, [r1, #0]
{
 8001edc:	4606      	mov	r6, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ede:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8001ee2:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8001ee4:	d023      	beq.n	8001f2e <USBD_CDC_Setup+0x56>
 8001ee6:	2b20      	cmp	r3, #32
 8001ee8:	d119      	bne.n	8001f1e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 8001eea:	88ca      	ldrh	r2, [r1, #6]
 8001eec:	784b      	ldrb	r3, [r1, #1]
 8001eee:	b1c2      	cbz	r2, 8001f22 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8001ef0:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8001ef2:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8001ef6:	d50b      	bpl.n	8001f10 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001ef8:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 8001efc:	4618      	mov	r0, r3
 8001efe:	688f      	ldr	r7, [r1, #8]
 8001f00:	4629      	mov	r1, r5
 8001f02:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8001f04:	4629      	mov	r1, r5
 8001f06:	4630      	mov	r0, r6
 8001f08:	88e2      	ldrh	r2, [r4, #6]
      USBD_CtlSendData (pdev,
 8001f0a:	f000 fb72 	bl	80025f2 <USBD_CtlSendData>
      break;
 8001f0e:	e006      	b.n	8001f1e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8001f10:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8001f14:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8001f18:	4629      	mov	r1, r5
 8001f1a:	f000 fb7f 	bl	800261c <USBD_CtlPrepareRx>
}
 8001f1e:	2000      	movs	r0, #0
 8001f20:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8001f22:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8001f26:	6884      	ldr	r4, [r0, #8]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	47a0      	blx	r4
 8001f2c:	e7f7      	b.n	8001f1e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 8001f2e:	784b      	ldrb	r3, [r1, #1]
 8001f30:	2b0a      	cmp	r3, #10
 8001f32:	d1f4      	bne.n	8001f1e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8001f34:	2201      	movs	r2, #1
 8001f36:	4901      	ldr	r1, [pc, #4]	; (8001f3c <USBD_CDC_Setup+0x64>)
 8001f38:	e7e7      	b.n	8001f0a <USBD_CDC_Setup+0x32>
 8001f3a:	bf00      	nop
 8001f3c:	2000017c 	.word	0x2000017c

08001f40 <USBD_CDC_DeInit>:
{
 8001f40:	b510      	push	{r4, lr}
 8001f42:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8001f44:	2181      	movs	r1, #129	; 0x81
 8001f46:	f000 fe17 	bl	8002b78 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001f4a:	2101      	movs	r1, #1
 8001f4c:	4620      	mov	r0, r4
 8001f4e:	f000 fe13 	bl	8002b78 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 8001f52:	2182      	movs	r1, #130	; 0x82
 8001f54:	4620      	mov	r0, r4
 8001f56:	f000 fe0f 	bl	8002b78 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 8001f5a:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 8001f5e:	b153      	cbz	r3, 8001f76 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8001f60:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8001f68:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 8001f6c:	f000 fe72 	bl	8002c54 <USBD_static_free>
    pdev->pClassData = NULL;
 8001f70:	2300      	movs	r3, #0
 8001f72:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 8001f76:	2000      	movs	r0, #0
 8001f78:	bd10      	pop	{r4, pc}

08001f7a <USBD_CDC_Init>:
{
 8001f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f7c:	7c03      	ldrb	r3, [r0, #16]
{
 8001f7e:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001f80:	bb7b      	cbnz	r3, 8001fe2 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 8001f82:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001f86:	2202      	movs	r2, #2
 8001f88:	2181      	movs	r1, #129	; 0x81
 8001f8a:	f000 fde5 	bl	8002b58 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001f8e:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 8001f92:	2202      	movs	r2, #2
 8001f94:	2101      	movs	r1, #1
 8001f96:	4620      	mov	r0, r4
 8001f98:	f000 fdde 	bl	8002b58 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 8001f9c:	2308      	movs	r3, #8
 8001f9e:	2203      	movs	r2, #3
 8001fa0:	2182      	movs	r1, #130	; 0x82
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	f000 fdd8 	bl	8002b58 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 8001fa8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8001fac:	f000 fe4e 	bl	8002c4c <USBD_static_malloc>
 8001fb0:	4606      	mov	r6, r0
 8001fb2:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8001fb6:	b320      	cbz	r0, 8002002 <USBD_CDC_Init+0x88>
    hcdc->TxState =0;
 8001fb8:	2500      	movs	r5, #0
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8001fba:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fc2:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8001fc4:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8001fc8:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8001fcc:	b987      	cbnz	r7, 8001ff0 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 8001fce:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fd2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	4620      	mov	r0, r4
 8001fda:	f000 fe23 	bl	8002c24 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001fde:	4638      	mov	r0, r7
 8001fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8001fe2:	2340      	movs	r3, #64	; 0x40
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	2181      	movs	r1, #129	; 0x81
 8001fe8:	f000 fdb6 	bl	8002b58 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 8001fec:	2340      	movs	r3, #64	; 0x40
 8001fee:	e7d0      	b.n	8001f92 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8001ff0:	2340      	movs	r3, #64	; 0x40
 8001ff2:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8001ff6:	2101      	movs	r1, #1
 8001ff8:	4620      	mov	r0, r4
 8001ffa:	f000 fe13 	bl	8002c24 <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 8001ffe:	4628      	mov	r0, r5
 8002000:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8002002:	2001      	movs	r0, #1
}
 8002004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002006 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8002006:	b119      	cbz	r1, 8002010 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8002008:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800200c:	2000      	movs	r0, #0
 800200e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8002010:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8002012:	4770      	bx	lr

08002014 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002014:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8002018:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800201a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800201e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8002022:	4770      	bx	lr

08002024 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8002024:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8002028:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800202a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800202e:	4770      	bx	lr

08002030 <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8002030:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8002034:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 8002036:	b162      	cbz	r2, 8002052 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8002038:	7c04      	ldrb	r4, [r0, #16]
 800203a:	b944      	cbnz	r4, 800204e <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800203c:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8002040:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 8002044:	2101      	movs	r1, #1
 8002046:	f000 fded 	bl	8002c24 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800204a:	2000      	movs	r0, #0
 800204c:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 800204e:	2340      	movs	r3, #64	; 0x40
 8002050:	e7f6      	b.n	8002040 <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 8002052:	2002      	movs	r0, #2
  }
}
 8002054:	bd10      	pop	{r4, pc}

08002056 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8002056:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 8002058:	b180      	cbz	r0, 800207c <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800205a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800205e:	b113      	cbz	r3, 8002066 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 8002060:	2300      	movs	r3, #0
 8002062:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 8002066:	b109      	cbz	r1, 800206c <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 8002068:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800206c:	2301      	movs	r3, #1
  pdev->id = id;
 800206e:	7002      	strb	r2, [r0, #0]
  pdev->dev_state  = USBD_STATE_DEFAULT;
 8002070:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8002074:	f000 fd20 	bl	8002ab8 <USBD_LL_Init>
  
  return USBD_OK; 
 8002078:	2000      	movs	r0, #0
 800207a:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 800207c:	2002      	movs	r0, #2
}
 800207e:	bd08      	pop	{r3, pc}

08002080 <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 8002080:	b119      	cbz	r1, 800208a <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8002082:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8002086:	2000      	movs	r0, #0
 8002088:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 800208a:	2002      	movs	r0, #2
  }
  
  return status;
}
 800208c:	4770      	bx	lr

0800208e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800208e:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 8002090:	f000 fd54 	bl	8002b3c <USBD_LL_Start>
  
  return USBD_OK;  
}
 8002094:	2000      	movs	r0, #0
 8002096:	bd08      	pop	{r3, pc}

08002098 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8002098:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 800209a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800209e:	b90b      	cbnz	r3, 80020a4 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 80020a0:	2002      	movs	r0, #2
 80020a2:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4798      	blx	r3
 80020a8:	2800      	cmp	r0, #0
 80020aa:	d1f9      	bne.n	80020a0 <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 80020ac:	bd08      	pop	{r3, pc}

080020ae <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80020ae:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 80020b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	4798      	blx	r3
  return USBD_OK;
}
 80020b8:	2000      	movs	r0, #0
 80020ba:	bd08      	pop	{r3, pc}

080020bc <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80020bc:	b538      	push	{r3, r4, r5, lr}

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80020be:	f500 7502 	add.w	r5, r0, #520	; 0x208
{
 80020c2:	4604      	mov	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80020c4:	4628      	mov	r0, r5
 80020c6:	f000 fa64 	bl	8002592 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 80020ca:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 80020cc:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 80020d0:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 80020d4:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 80020d8:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 80020dc:	f001 031f 	and.w	r3, r1, #31
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d00e      	beq.n	8002102 <USBD_LL_SetupStage+0x46>
 80020e4:	d307      	bcc.n	80020f6 <USBD_LL_SetupStage+0x3a>
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d010      	beq.n	800210c <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 80020ea:	f001 0180 	and.w	r1, r1, #128	; 0x80
 80020ee:	4620      	mov	r0, r4
 80020f0:	f000 fd50 	bl	8002b94 <USBD_LL_StallEP>
    break;
 80020f4:	e003      	b.n	80020fe <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 80020f6:	4629      	mov	r1, r5
 80020f8:	4620      	mov	r0, r4
 80020fa:	f000 f8d5 	bl	80022a8 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 80020fe:	2000      	movs	r0, #0
 8002100:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8002102:	4629      	mov	r1, r5
 8002104:	4620      	mov	r0, r4
 8002106:	f000 f9c9 	bl	800249c <USBD_StdItfReq>
    break;
 800210a:	e7f8      	b.n	80020fe <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800210c:	4629      	mov	r1, r5
 800210e:	4620      	mov	r0, r4
 8002110:	f000 f9dc 	bl	80024cc <USBD_StdEPReq>
    break;
 8002114:	e7f3      	b.n	80020fe <USBD_LL_SetupStage+0x42>

08002116 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8002116:	b538      	push	{r3, r4, r5, lr}
 8002118:	4604      	mov	r4, r0
 800211a:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800211c:	bb11      	cbnz	r1, 8002164 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800211e:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 8002122:	2b03      	cmp	r3, #3
 8002124:	d10f      	bne.n	8002146 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 8002126:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 800212a:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 800212e:	4293      	cmp	r3, r2
 8002130:	d90b      	bls.n	800214a <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 8002132:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 8002134:	429a      	cmp	r2, r3
 8002136:	bf28      	it	cs
 8002138:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 800213a:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 800213e:	b292      	uxth	r2, r2
 8002140:	4629      	mov	r1, r5
 8002142:	f000 fa7a 	bl	800263a <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 8002146:	2000      	movs	r0, #0
 8002148:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800214a:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	b123      	cbz	r3, 800215c <USBD_LL_DataOutStage+0x46>
 8002152:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002156:	2a03      	cmp	r2, #3
 8002158:	d100      	bne.n	800215c <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 800215a:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 800215c:	4620      	mov	r0, r4
 800215e:	f000 fa74 	bl	800264a <USBD_CtlSendStatus>
 8002162:	e7f0      	b.n	8002146 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 8002164:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d0eb      	beq.n	8002146 <USBD_LL_DataOutStage+0x30>
 800216e:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002172:	2a03      	cmp	r2, #3
 8002174:	d1e7      	bne.n	8002146 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 8002176:	4798      	blx	r3
 8002178:	e7e5      	b.n	8002146 <USBD_LL_DataOutStage+0x30>

0800217a <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 800217a:	b570      	push	{r4, r5, r6, lr}
 800217c:	4613      	mov	r3, r2
 800217e:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 8002180:	460e      	mov	r6, r1
 8002182:	2900      	cmp	r1, #0
 8002184:	d13d      	bne.n	8002202 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8002186:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 800218a:	2a02      	cmp	r2, #2
 800218c:	d10f      	bne.n	80021ae <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800218e:	69c5      	ldr	r5, [r0, #28]
 8002190:	6a02      	ldr	r2, [r0, #32]
 8002192:	4295      	cmp	r5, r2
 8002194:	d914      	bls.n	80021c0 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8002196:	1aaa      	subs	r2, r5, r2
 8002198:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 800219a:	4619      	mov	r1, r3
 800219c:	b292      	uxth	r2, r2
 800219e:	f000 fa35 	bl	800260c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80021a2:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 80021a4:	461a      	mov	r2, r3
 80021a6:	4619      	mov	r1, r3
 80021a8:	4620      	mov	r0, r4
 80021aa:	f000 fd3b 	bl	8002c24 <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 80021ae:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d102      	bne.n	80021bc <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 80021b6:	2300      	movs	r3, #0
 80021b8:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 80021bc:	2000      	movs	r0, #0
 80021be:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 80021c0:	6983      	ldr	r3, [r0, #24]
 80021c2:	fbb3 f5f2 	udiv	r5, r3, r2
 80021c6:	fb02 3515 	mls	r5, r2, r5, r3
 80021ca:	b965      	cbnz	r5, 80021e6 <USBD_LL_DataInStage+0x6c>
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d80a      	bhi.n	80021e6 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 80021d0:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d206      	bcs.n	80021e6 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 80021d8:	462a      	mov	r2, r5
 80021da:	f000 fa17 	bl	800260c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 80021de:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 80021e2:	462b      	mov	r3, r5
 80021e4:	e7de      	b.n	80021a4 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 80021e6:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	b12b      	cbz	r3, 80021fa <USBD_LL_DataInStage+0x80>
 80021ee:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 80021f2:	2a03      	cmp	r2, #3
 80021f4:	d101      	bne.n	80021fa <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 80021f6:	4620      	mov	r0, r4
 80021f8:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 80021fa:	4620      	mov	r0, r4
 80021fc:	f000 fa30 	bl	8002660 <USBD_CtlReceiveStatus>
 8002200:	e7d5      	b.n	80021ae <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8002202:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002206:	695b      	ldr	r3, [r3, #20]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0d7      	beq.n	80021bc <USBD_LL_DataInStage+0x42>
 800220c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002210:	2a03      	cmp	r2, #3
 8002212:	d1d3      	bne.n	80021bc <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8002214:	4798      	blx	r3
 8002216:	e7d1      	b.n	80021bc <USBD_LL_DataInStage+0x42>

08002218 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8002218:	2200      	movs	r2, #0
{
 800221a:	b538      	push	{r3, r4, r5, lr}
 800221c:	4604      	mov	r4, r0
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800221e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 8002220:	4611      	mov	r1, r2
 8002222:	2340      	movs	r3, #64	; 0x40
 8002224:	f000 fc98 	bl	8002b58 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 8002228:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800222a:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 800222e:	2200      	movs	r2, #0
 8002230:	2180      	movs	r1, #128	; 0x80
 8002232:	4620      	mov	r0, r4
 8002234:	f000 fc90 	bl	8002b58 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8002238:	2301      	movs	r3, #1
 800223a:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 800223e:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8002242:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 8002244:	b12b      	cbz	r3, 8002252 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 8002246:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800224a:	7921      	ldrb	r1, [r4, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	4620      	mov	r0, r4
 8002250:	4798      	blx	r3
 
  
  return USBD_OK;
}
 8002252:	2000      	movs	r0, #0
 8002254:	bd38      	pop	{r3, r4, r5, pc}

08002256 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8002256:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 8002258:	2000      	movs	r0, #0
 800225a:	4770      	bx	lr

0800225c <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 800225c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002260:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8002264:	2304      	movs	r3, #4
 8002266:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 800226a:	2000      	movs	r0, #0
 800226c:	4770      	bx	lr

0800226e <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 800226e:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 8002272:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 8002276:	2000      	movs	r0, #0
 8002278:	4770      	bx	lr

0800227a <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800227a:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800227c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002280:	2a03      	cmp	r2, #3
 8002282:	d104      	bne.n	800228e <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8002284:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002288:	69db      	ldr	r3, [r3, #28]
 800228a:	b103      	cbz	r3, 800228e <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800228c:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800228e:	2000      	movs	r0, #0
 8002290:	bd08      	pop	{r3, pc}

08002292 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8002292:	b510      	push	{r4, lr}
 8002294:	4604      	mov	r4, r0
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8002296:	2180      	movs	r1, #128	; 0x80
 8002298:	f000 fc7c 	bl	8002b94 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800229c:	4620      	mov	r0, r4
}
 800229e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 80022a2:	2100      	movs	r1, #0
 80022a4:	f000 bc76 	b.w	8002b94 <USBD_LL_StallEP>

080022a8 <USBD_StdDevReq>:
{
 80022a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 80022aa:	784b      	ldrb	r3, [r1, #1]
{
 80022ac:	4604      	mov	r4, r0
 80022ae:	460d      	mov	r5, r1
  switch (req->bRequest) 
 80022b0:	2b09      	cmp	r3, #9
 80022b2:	d879      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
 80022b4:	e8df f013 	tbh	[pc, r3, lsl #1]
 80022b8:	00e500c9 	.word	0x00e500c9
 80022bc:	00d90078 	.word	0x00d90078
 80022c0:	006d0078 	.word	0x006d0078
 80022c4:	0078000a 	.word	0x0078000a
 80022c8:	008d00b9 	.word	0x008d00b9
  switch (req->wValue >> 8)
 80022cc:	884b      	ldrh	r3, [r1, #2]
 80022ce:	0a1a      	lsrs	r2, r3, #8
 80022d0:	3a01      	subs	r2, #1
 80022d2:	2a06      	cmp	r2, #6
 80022d4:	d868      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
 80022d6:	e8df f002 	tbb	[pc, r2]
 80022da:	1c04      	.short	0x1c04
 80022dc:	49676729 	.word	0x49676729
 80022e0:	52          	.byte	0x52
 80022e1:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80022e2:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80022e6:	681b      	ldr	r3, [r3, #0]
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80022e8:	f10d 0106 	add.w	r1, sp, #6
 80022ec:	7c20      	ldrb	r0, [r4, #16]
 80022ee:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 80022f0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 80022f4:	2a00      	cmp	r2, #0
 80022f6:	d067      	beq.n	80023c8 <USBD_StdDevReq+0x120>
 80022f8:	88eb      	ldrh	r3, [r5, #6]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d064      	beq.n	80023c8 <USBD_StdDevReq+0x120>
    len = MIN(len , req->wLength);
 80022fe:	429a      	cmp	r2, r3
 8002300:	bf28      	it	cs
 8002302:	461a      	movcs	r2, r3
    USBD_CtlSendData (pdev, 
 8002304:	4601      	mov	r1, r0
    len = MIN(len , req->wLength);
 8002306:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 800230a:	4620      	mov	r0, r4
 800230c:	f000 f971 	bl	80025f2 <USBD_CtlSendData>
 8002310:	e05a      	b.n	80023c8 <USBD_StdDevReq+0x120>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 8002312:	7c02      	ldrb	r2, [r0, #16]
 8002314:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002318:	b932      	cbnz	r2, 8002328 <USBD_StdDevReq+0x80>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800231a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800231c:	f10d 0006 	add.w	r0, sp, #6
 8002320:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8002322:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8002324:	7043      	strb	r3, [r0, #1]
 8002326:	e7e3      	b.n	80022f0 <USBD_StdDevReq+0x48>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 8002328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800232a:	e7f7      	b.n	800231c <USBD_StdDevReq+0x74>
    switch ((uint8_t)(req->wValue))
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d83a      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
 8002332:	e8df f003 	tbb	[pc, r3]
 8002336:	0703      	.short	0x0703
 8002338:	17130f0b 	.word	0x17130f0b
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 800233c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	e7d1      	b.n	80022e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8002344:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002348:	689b      	ldr	r3, [r3, #8]
 800234a:	e7cd      	b.n	80022e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800234c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	e7c9      	b.n	80022e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8002354:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	e7c5      	b.n	80022e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800235c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002360:	695b      	ldr	r3, [r3, #20]
 8002362:	e7c1      	b.n	80022e8 <USBD_StdDevReq+0x40>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8002364:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8002368:	699b      	ldr	r3, [r3, #24]
 800236a:	e7bd      	b.n	80022e8 <USBD_StdDevReq+0x40>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800236c:	7c03      	ldrb	r3, [r0, #16]
 800236e:	b9db      	cbnz	r3, 80023a8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8002370:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002374:	f10d 0006 	add.w	r0, sp, #6
 8002378:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800237a:	4798      	blx	r3
 800237c:	e7b8      	b.n	80022f0 <USBD_StdDevReq+0x48>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 800237e:	7c03      	ldrb	r3, [r0, #16]
 8002380:	b993      	cbnz	r3, 80023a8 <USBD_StdDevReq+0x100>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8002382:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8002386:	f10d 0006 	add.w	r0, sp, #6
 800238a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238c:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800238e:	2307      	movs	r3, #7
 8002390:	e7c8      	b.n	8002324 <USBD_StdDevReq+0x7c>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8002392:	888b      	ldrh	r3, [r1, #4]
 8002394:	b943      	cbnz	r3, 80023a8 <USBD_StdDevReq+0x100>
 8002396:	88cb      	ldrh	r3, [r1, #6]
 8002398:	b933      	cbnz	r3, 80023a8 <USBD_StdDevReq+0x100>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800239a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 800239e:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023a0:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 80023a2:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 80023a6:	d103      	bne.n	80023b0 <USBD_StdDevReq+0x108>
    USBD_CtlError(pdev , req);
 80023a8:	4620      	mov	r0, r4
 80023aa:	f7ff ff72 	bl	8002292 <USBD_CtlError.constprop.0>
    break;
 80023ae:	e00b      	b.n	80023c8 <USBD_StdDevReq+0x120>
      pdev->dev_address = dev_addr;
 80023b0:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 80023b4:	4629      	mov	r1, r5
 80023b6:	f000 fc19 	bl	8002bec <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 80023ba:	4620      	mov	r0, r4
 80023bc:	f000 f945 	bl	800264a <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 80023c0:	b12d      	cbz	r5, 80023ce <USBD_StdDevReq+0x126>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 80023c2:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023c4:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 80023c8:	2000      	movs	r0, #0
 80023ca:	b003      	add	sp, #12
 80023cc:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 80023ce:	2301      	movs	r3, #1
 80023d0:	e7f8      	b.n	80023c4 <USBD_StdDevReq+0x11c>
  cfgidx = (uint8_t)(req->wValue);                 
 80023d2:	7889      	ldrb	r1, [r1, #2]
 80023d4:	4d30      	ldr	r5, [pc, #192]	; (8002498 <USBD_StdDevReq+0x1f0>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80023d6:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 80023d8:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 80023da:	d8e5      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state) 
 80023dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d00c      	beq.n	80023fe <USBD_StdDevReq+0x156>
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d1df      	bne.n	80023a8 <USBD_StdDevReq+0x100>
      if (cfgidx == 0) 
 80023e8:	b9b1      	cbnz	r1, 8002418 <USBD_StdDevReq+0x170>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023ea:	2302      	movs	r3, #2
        pdev->dev_config = cfgidx;          
 80023ec:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80023ee:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        USBD_ClrClassConfig(pdev , cfgidx);
 80023f2:	f7ff fe5c 	bl	80020ae <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 80023f6:	4620      	mov	r0, r4
 80023f8:	f000 f927 	bl	800264a <USBD_CtlSendStatus>
 80023fc:	e7e4      	b.n	80023c8 <USBD_StdDevReq+0x120>
      if (cfgidx) 
 80023fe:	2900      	cmp	r1, #0
 8002400:	d0f9      	beq.n	80023f6 <USBD_StdDevReq+0x14e>
        pdev->dev_config = cfgidx;
 8002402:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002404:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8002406:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8002408:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800240c:	4620      	mov	r0, r4
 800240e:	f7ff fe43 	bl	8002098 <USBD_SetClassConfig>
 8002412:	2802      	cmp	r0, #2
 8002414:	d1ef      	bne.n	80023f6 <USBD_StdDevReq+0x14e>
 8002416:	e7c7      	b.n	80023a8 <USBD_StdDevReq+0x100>
      else  if (cfgidx != pdev->dev_config) 
 8002418:	6841      	ldr	r1, [r0, #4]
 800241a:	2901      	cmp	r1, #1
 800241c:	d0eb      	beq.n	80023f6 <USBD_StdDevReq+0x14e>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 800241e:	b2c9      	uxtb	r1, r1
 8002420:	f7ff fe45 	bl	80020ae <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8002424:	7829      	ldrb	r1, [r5, #0]
 8002426:	6061      	str	r1, [r4, #4]
 8002428:	e7f0      	b.n	800240c <USBD_StdDevReq+0x164>
  if (req->wLength != 1) 
 800242a:	88ca      	ldrh	r2, [r1, #6]
 800242c:	2a01      	cmp	r2, #1
 800242e:	d1bb      	bne.n	80023a8 <USBD_StdDevReq+0x100>
    switch (pdev->dev_state )  
 8002430:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002434:	2b02      	cmp	r3, #2
 8002436:	d003      	beq.n	8002440 <USBD_StdDevReq+0x198>
 8002438:	2b03      	cmp	r3, #3
 800243a:	d1b5      	bne.n	80023a8 <USBD_StdDevReq+0x100>
      USBD_CtlSendData (pdev, 
 800243c:	1d01      	adds	r1, r0, #4
 800243e:	e764      	b.n	800230a <USBD_StdDevReq+0x62>
      pdev->dev_default_config = 0;
 8002440:	4601      	mov	r1, r0
 8002442:	2300      	movs	r3, #0
 8002444:	f841 3f08 	str.w	r3, [r1, #8]!
 8002448:	e75f      	b.n	800230a <USBD_StdDevReq+0x62>
  switch (pdev->dev_state) 
 800244a:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 800244e:	3b02      	subs	r3, #2
 8002450:	2b01      	cmp	r3, #1
 8002452:	d8a9      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 8002454:	2301      	movs	r3, #1
 8002456:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 8002458:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 800245c:	b10b      	cbz	r3, 8002462 <USBD_StdDevReq+0x1ba>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 800245e:	2303      	movs	r3, #3
 8002460:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 8002462:	2202      	movs	r2, #2
 8002464:	f104 010c 	add.w	r1, r4, #12
 8002468:	e74f      	b.n	800230a <USBD_StdDevReq+0x62>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800246a:	884b      	ldrh	r3, [r1, #2]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d1ab      	bne.n	80023c8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002470:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8002474:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8002478:	4629      	mov	r1, r5
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	4620      	mov	r0, r4
 800247e:	4798      	blx	r3
 8002480:	e7b9      	b.n	80023f6 <USBD_StdDevReq+0x14e>
  switch (pdev->dev_state)
 8002482:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8002486:	3b02      	subs	r3, #2
 8002488:	2b01      	cmp	r3, #1
 800248a:	d88d      	bhi.n	80023a8 <USBD_StdDevReq+0x100>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800248c:	884b      	ldrh	r3, [r1, #2]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d19a      	bne.n	80023c8 <USBD_StdDevReq+0x120>
      pdev->dev_remote_wakeup = 0; 
 8002492:	2300      	movs	r3, #0
 8002494:	e7ec      	b.n	8002470 <USBD_StdDevReq+0x1c8>
 8002496:	bf00      	nop
 8002498:	2000017d 	.word	0x2000017d

0800249c <USBD_StdItfReq>:
{
 800249c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800249e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
{
 80024a2:	4604      	mov	r4, r0
  switch (pdev->dev_state) 
 80024a4:	2b03      	cmp	r3, #3
{
 80024a6:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 80024a8:	d10d      	bne.n	80024c6 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 80024aa:	790b      	ldrb	r3, [r1, #4]
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d80a      	bhi.n	80024c6 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 80024b0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 80024b8:	88eb      	ldrh	r3, [r5, #6]
 80024ba:	b913      	cbnz	r3, 80024c2 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 80024bc:	4620      	mov	r0, r4
 80024be:	f000 f8c4 	bl	800264a <USBD_CtlSendStatus>
}
 80024c2:	2000      	movs	r0, #0
 80024c4:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 80024c6:	f7ff fee4 	bl	8002292 <USBD_CtlError.constprop.0>
    break;
 80024ca:	e7fa      	b.n	80024c2 <USBD_StdItfReq+0x26>

080024cc <USBD_StdEPReq>:
{
 80024cc:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 80024ce:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 80024d0:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 80024d2:	f002 0260 	and.w	r2, r2, #96	; 0x60
 80024d6:	2a20      	cmp	r2, #32
{
 80024d8:	4604      	mov	r4, r0
 80024da:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 80024dc:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 80024de:	d105      	bne.n	80024ec <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 80024e0:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	4798      	blx	r3
}
 80024e8:	2000      	movs	r0, #0
 80024ea:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 80024ec:	784a      	ldrb	r2, [r1, #1]
 80024ee:	2a01      	cmp	r2, #1
 80024f0:	d01c      	beq.n	800252c <USBD_StdEPReq+0x60>
 80024f2:	d32a      	bcc.n	800254a <USBD_StdEPReq+0x7e>
 80024f4:	2a03      	cmp	r2, #3
 80024f6:	d1f7      	bne.n	80024e8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80024f8:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80024fc:	2a02      	cmp	r2, #2
 80024fe:	d040      	beq.n	8002582 <USBD_StdEPReq+0xb6>
 8002500:	2a03      	cmp	r2, #3
 8002502:	d002      	beq.n	800250a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8002504:	f7ff fec5 	bl	8002292 <USBD_CtlError.constprop.0>
      break;
 8002508:	e7ee      	b.n	80024e8 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800250a:	884a      	ldrh	r2, [r1, #2]
 800250c:	b922      	cbnz	r2, 8002518 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800250e:	065e      	lsls	r6, r3, #25
 8002510:	d002      	beq.n	8002518 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 8002512:	4619      	mov	r1, r3
 8002514:	f000 fb3e 	bl	8002b94 <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 8002518:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800251c:	4629      	mov	r1, r5
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	4620      	mov	r0, r4
 8002522:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8002524:	4620      	mov	r0, r4
 8002526:	f000 f890 	bl	800264a <USBD_CtlSendStatus>
 800252a:	e7dd      	b.n	80024e8 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 800252c:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 8002530:	2a02      	cmp	r2, #2
 8002532:	d026      	beq.n	8002582 <USBD_StdEPReq+0xb6>
 8002534:	2a03      	cmp	r2, #3
 8002536:	d1e5      	bne.n	8002504 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 8002538:	884a      	ldrh	r2, [r1, #2]
 800253a:	2a00      	cmp	r2, #0
 800253c:	d1d4      	bne.n	80024e8 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 800253e:	0659      	lsls	r1, r3, #25
 8002540:	d0f0      	beq.n	8002524 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 8002542:	4619      	mov	r1, r3
 8002544:	f000 fb34 	bl	8002bb0 <USBD_LL_ClearStallEP>
 8002548:	e7e6      	b.n	8002518 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 800254a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800254e:	2a02      	cmp	r2, #2
 8002550:	d017      	beq.n	8002582 <USBD_StdEPReq+0xb6>
 8002552:	2a03      	cmp	r2, #3
 8002554:	d1d6      	bne.n	8002504 <USBD_StdEPReq+0x38>
 8002556:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 800255a:	f016 0f80 	tst.w	r6, #128	; 0x80
 800255e:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 8002562:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 8002564:	bf14      	ite	ne
 8002566:	3514      	addne	r5, #20
 8002568:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 800256c:	f000 fb2e 	bl	8002bcc <USBD_LL_IsStallEP>
 8002570:	b168      	cbz	r0, 800258e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8002572:	2301      	movs	r3, #1
 8002574:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8002576:	2202      	movs	r2, #2
 8002578:	4629      	mov	r1, r5
 800257a:	4620      	mov	r0, r4
 800257c:	f000 f839 	bl	80025f2 <USBD_CtlSendData>
      break;
 8002580:	e7b2      	b.n	80024e8 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8002582:	065a      	lsls	r2, r3, #25
 8002584:	d0b0      	beq.n	80024e8 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8002586:	4619      	mov	r1, r3
 8002588:	f000 fb04 	bl	8002b94 <USBD_LL_StallEP>
 800258c:	e7ac      	b.n	80024e8 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800258e:	6028      	str	r0, [r5, #0]
 8002590:	e7f1      	b.n	8002576 <USBD_StdEPReq+0xaa>

08002592 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8002592:	780b      	ldrb	r3, [r1, #0]
 8002594:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8002596:	784b      	ldrb	r3, [r1, #1]
 8002598:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800259a:	78ca      	ldrb	r2, [r1, #3]
 800259c:	788b      	ldrb	r3, [r1, #2]
 800259e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025a2:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 80025a4:	794a      	ldrb	r2, [r1, #5]
 80025a6:	790b      	ldrb	r3, [r1, #4]
 80025a8:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025ac:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 80025ae:	79ca      	ldrb	r2, [r1, #7]
 80025b0:	798b      	ldrb	r3, [r1, #6]
 80025b2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 80025b6:	80c3      	strh	r3, [r0, #6]
 80025b8:	4770      	bx	lr

080025ba <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80025ba:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 80025bc:	b188      	cbz	r0, 80025e2 <USBD_GetString+0x28>
 80025be:	4605      	mov	r5, r0
 80025c0:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 80025c2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2c00      	cmp	r4, #0
 80025ca:	d1f9      	bne.n	80025c0 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	3302      	adds	r3, #2
 80025d0:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 80025d2:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 80025d4:	2303      	movs	r3, #3
 80025d6:	704b      	strb	r3, [r1, #1]
 80025d8:	2302      	movs	r3, #2
 80025da:	3801      	subs	r0, #1
    while (*desc != '\0') 
 80025dc:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80025e0:	b905      	cbnz	r5, 80025e4 <USBD_GetString+0x2a>
 80025e2:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 80025e4:	1c5a      	adds	r2, r3, #1
 80025e6:	54cd      	strb	r5, [r1, r3]
 80025e8:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0x00;
 80025ea:	3302      	adds	r3, #2
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	548c      	strb	r4, [r1, r2]
 80025f0:	e7f4      	b.n	80025dc <USBD_GetString+0x22>

080025f2 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 80025f2:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025f4:	2202      	movs	r2, #2
{
 80025f6:	b510      	push	{r4, lr}
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 80025f8:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 80025fc:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 80025fe:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8002600:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8002602:	2100      	movs	r1, #0
 8002604:	f000 fb00 	bl	8002c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002608:	2000      	movs	r0, #0
 800260a:	bd10      	pop	{r4, pc}

0800260c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800260c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800260e:	4613      	mov	r3, r2
 8002610:	460a      	mov	r2, r1
 8002612:	2100      	movs	r1, #0
 8002614:	f000 faf8 	bl	8002c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8002618:	2000      	movs	r0, #0
 800261a:	bd08      	pop	{r3, pc}

0800261c <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 800261c:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 800261e:	2203      	movs	r2, #3
{
 8002620:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 8002622:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 8002626:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 800262a:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 800262c:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 8002630:	2100      	movs	r1, #0
 8002632:	f000 faf7 	bl	8002c24 <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 8002636:	2000      	movs	r0, #0
 8002638:	bd10      	pop	{r4, pc}

0800263a <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 800263a:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 800263c:	4613      	mov	r3, r2
 800263e:	460a      	mov	r2, r1
 8002640:	2100      	movs	r1, #0
 8002642:	f000 faef 	bl	8002c24 <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 8002646:	2000      	movs	r0, #0
 8002648:	bd08      	pop	{r3, pc}

0800264a <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 800264a:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800264c:	2304      	movs	r3, #4
 800264e:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 8002652:	2300      	movs	r3, #0
 8002654:	461a      	mov	r2, r3
 8002656:	4619      	mov	r1, r3
 8002658:	f000 fad6 	bl	8002c08 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 800265c:	2000      	movs	r0, #0
 800265e:	bd08      	pop	{r3, pc}

08002660 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 8002660:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 8002662:	2305      	movs	r3, #5
 8002664:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 8002668:	2300      	movs	r3, #0
 800266a:	461a      	mov	r2, r3
 800266c:	4619      	mov	r1, r3
 800266e:	f000 fad9 	bl	8002c24 <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8002672:	2000      	movs	r0, #0
 8002674:	bd08      	pop	{r3, pc}

08002676 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002676:	2228      	movs	r2, #40	; 0x28
{
 8002678:	b570      	push	{r4, r5, r6, lr}
 800267a:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800267c:	eb0d 0002 	add.w	r0, sp, r2
 8002680:	2100      	movs	r1, #0
 8002682:	f000 fb85 	bl	8002d90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002686:	2214      	movs	r2, #20
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002688:	2610      	movs	r6, #16
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800268a:	eb0d 0002 	add.w	r0, sp, r2
 800268e:	2100      	movs	r1, #0
 8002690:	f000 fb7e 	bl	8002d90 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002694:	4632      	mov	r2, r6
 8002696:	2100      	movs	r1, #0
 8002698:	a801      	add	r0, sp, #4
 800269a:	f000 fb79 	bl	8002d90 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800269e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026a2:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026a4:	2502      	movs	r5, #2
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80026a6:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80026a8:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026aa:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026ae:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80026b0:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80026b2:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80026b4:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80026b6:	9511      	str	r5, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80026b8:	f7fe fad0 	bl	8000c5c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026bc:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026be:	2400      	movs	r4, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80026c0:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026c6:	4629      	mov	r1, r5
 80026c8:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80026ca:	9308      	str	r3, [sp, #32]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026cc:	9506      	str	r5, [sp, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80026ce:	9407      	str	r4, [sp, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80026d0:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80026d2:	f7fe fc8b 	bl	8000fec <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d6:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80026d8:	9601      	str	r6, [sp, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 80026da:	9404      	str	r4, [sp, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026dc:	f7fe fd38 	bl	8001150 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 80026e0:	b014      	add	sp, #80	; 0x50
 80026e2:	bd70      	pop	{r4, r5, r6, pc}

080026e4 <main>:
{
 80026e4:	b500      	push	{lr}
 80026e6:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 80026e8:	f7fd fd54 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 80026ec:	f7ff ffc3 	bl	8002676 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026f0:	2210      	movs	r2, #16
 80026f2:	2100      	movs	r1, #0
 80026f4:	a806      	add	r0, sp, #24
 80026f6:	f000 fb4b 	bl	8002d90 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80026fa:	4b4c      	ldr	r3, [pc, #304]	; (800282c <main+0x148>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80026fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002700:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002702:	484b      	ldr	r0, [pc, #300]	; (8002830 <main+0x14c>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002704:	f042 0210 	orr.w	r2, r2, #16
 8002708:	619a      	str	r2, [r3, #24]
 800270a:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800270e:	f002 0210 	and.w	r2, r2, #16
 8002712:	9200      	str	r2, [sp, #0]
 8002714:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002716:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002718:	2601      	movs	r6, #1
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800271a:	f042 0220 	orr.w	r2, r2, #32
 800271e:	619a      	str	r2, [r3, #24]
 8002720:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002722:	2502      	movs	r5, #2
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002724:	f002 0220 	and.w	r2, r2, #32
 8002728:	9201      	str	r2, [sp, #4]
 800272a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	f042 0204 	orr.w	r2, r2, #4
 8002732:	619a      	str	r2, [r3, #24]
 8002734:	699a      	ldr	r2, [r3, #24]
 8002736:	f002 0204 	and.w	r2, r2, #4
 800273a:	9202      	str	r2, [sp, #8]
 800273c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	f042 0208 	orr.w	r2, r2, #8
 8002744:	619a      	str	r2, [r3, #24]
 8002746:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002748:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800274a:	f003 0308 	and.w	r3, r3, #8
 800274e:	9303      	str	r3, [sp, #12]
 8002750:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8002752:	f7fd fe91 	bl	8000478 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8002756:	2200      	movs	r2, #0
 8002758:	21f0      	movs	r1, #240	; 0xf0
 800275a:	4836      	ldr	r0, [pc, #216]	; (8002834 <main+0x150>)
 800275c:	f7fd fe8c 	bl	8000478 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002760:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002764:	a906      	add	r1, sp, #24
 8002766:	4832      	ldr	r0, [pc, #200]	; (8002830 <main+0x14c>)
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002768:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800276a:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800276c:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800276e:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002770:	f7fd fd9c 	bl	80002ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002774:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	a906      	add	r1, sp, #24
 8002778:	482e      	ldr	r0, [pc, #184]	; (8002834 <main+0x150>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800277a:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800277c:	9607      	str	r6, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800277e:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002780:	9509      	str	r5, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002782:	f7fd fd93 	bl	80002ac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002786:	f44f 4370 	mov.w	r3, #61440	; 0xf000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	a906      	add	r1, sp, #24
 800278c:	482a      	ldr	r0, [pc, #168]	; (8002838 <main+0x154>)
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800278e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002790:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002794:	f7fd fd8a 	bl	80002ac <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002798:	4621      	mov	r1, r4
 800279a:	2210      	movs	r2, #16
 800279c:	a806      	add	r0, sp, #24
 800279e:	f000 faf7 	bl	8002d90 <memset>
  htim2.Init.Prescaler = 719;
 80027a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80027a6:	f240 23cf 	movw	r3, #719	; 0x2cf
  htim2.Instance = TIM2;
 80027aa:	4d24      	ldr	r5, [pc, #144]	; (800283c <main+0x158>)
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027ac:	9404      	str	r4, [sp, #16]
  htim2.Init.Prescaler = 719;
 80027ae:	e885 000c 	stmia.w	r5, {r2, r3}
  htim2.Init.Period = 99;
 80027b2:	2363      	movs	r3, #99	; 0x63
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027b4:	4628      	mov	r0, r5
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027b6:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 99;
 80027b8:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027ba:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027bc:	61ac      	str	r4, [r5, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80027be:	9405      	str	r4, [sp, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80027c0:	f7fe fee0 	bl	8001584 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027c8:	a906      	add	r1, sp, #24
 80027ca:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027cc:	9306      	str	r3, [sp, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80027ce:	f7fe fd42 	bl	8001256 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027d2:	a904      	add	r1, sp, #16
 80027d4:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d6:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027d8:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80027da:	f7fe feed 	bl	80015b8 <HAL_TIMEx_MasterConfigSynchronization>
  MX_USB_DEVICE_Init();
 80027de:	f000 f8cb 	bl	8002978 <MX_USB_DEVICE_Init>
  HAL_TIM_Base_Start_IT(&htim2);
 80027e2:	4628      	mov	r0, r5
 80027e4:	f7fe fd2c 	bl	8001240 <HAL_TIM_Base_Start_IT>
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)==1){
 80027e8:	4e13      	ldr	r6, [pc, #76]	; (8002838 <main+0x154>)
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 80027ea:	4d11      	ldr	r5, [pc, #68]	; (8002830 <main+0x14c>)
		  bandera=2;
 80027ec:	4c14      	ldr	r4, [pc, #80]	; (8002840 <main+0x15c>)
	  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)==1){
 80027ee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027f2:	4811      	ldr	r0, [pc, #68]	; (8002838 <main+0x154>)
 80027f4:	f7fd fe3a 	bl	800046c <HAL_GPIO_ReadPin>
 80027f8:	2801      	cmp	r0, #1
 80027fa:	d107      	bne.n	800280c <main+0x128>
		  bandera=1;
 80027fc:	6020      	str	r0, [r4, #0]
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,0);
 80027fe:	2200      	movs	r2, #0
 8002800:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002804:	4628      	mov	r0, r5
 8002806:	f7fd fe37 	bl	8000478 <HAL_GPIO_WritePin>
 800280a:	e7f0      	b.n	80027ee <main+0x10a>
	  }else if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_12)==0){
 800280c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002810:	4630      	mov	r0, r6
 8002812:	f7fd fe2b 	bl	800046c <HAL_GPIO_ReadPin>
 8002816:	2800      	cmp	r0, #0
 8002818:	d1e9      	bne.n	80027ee <main+0x10a>
		  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800281a:	2201      	movs	r2, #1
 800281c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002820:	4628      	mov	r0, r5
 8002822:	f7fd fe29 	bl	8000478 <HAL_GPIO_WritePin>
		  bandera=2;
 8002826:	2302      	movs	r3, #2
 8002828:	6023      	str	r3, [r4, #0]
 800282a:	e7e0      	b.n	80027ee <main+0x10a>
 800282c:	40021000 	.word	0x40021000
 8002830:	40011000 	.word	0x40011000
 8002834:	40010800 	.word	0x40010800
 8002838:	40010c00 	.word	0x40010c00
 800283c:	200003dc 	.word	0x200003dc
 8002840:	20000180 	.word	0x20000180

08002844 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2){
 8002844:	6803      	ldr	r3, [r0, #0]
 8002846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800284a:	d10e      	bne.n	800286a <HAL_TIM_PeriodElapsedCallback+0x26>
 800284c:	2300      	movs	r3, #0
		int i;
		for(i=0;i<=TIMERS;i++){
			if(timers[i]!=0){
 800284e:	4907      	ldr	r1, [pc, #28]	; (800286c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8002850:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8002854:	b292      	uxth	r2, r2
 8002856:	b12a      	cbz	r2, 8002864 <HAL_TIM_PeriodElapsedCallback+0x20>
				timers[i]--;
 8002858:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800285c:	3a01      	subs	r2, #1
 800285e:	b292      	uxth	r2, r2
 8002860:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
		for(i=0;i<=TIMERS;i++){
 8002864:	3301      	adds	r3, #1
 8002866:	2b0a      	cmp	r3, #10
 8002868:	d1f2      	bne.n	8002850 <HAL_TIM_PeriodElapsedCallback+0xc>
 800286a:	4770      	bx	lr
 800286c:	200003a8 	.word	0x200003a8

08002870 <CDC_Receive_Callback>:
			}
			break;
	}
}
void CDC_Receive_Callback(uint8_t *buf,uint32_t len){
	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 8002870:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002874:	4801      	ldr	r0, [pc, #4]	; (800287c <CDC_Receive_Callback+0xc>)
 8002876:	f7fd be04 	b.w	8000482 <HAL_GPIO_TogglePin>
 800287a:	bf00      	nop
 800287c:	40011000 	.word	0x40011000

08002880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002880:	4770      	bx	lr
	...

08002884 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002884:	4b0e      	ldr	r3, [pc, #56]	; (80028c0 <HAL_MspInit+0x3c>)
{
 8002886:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8002888:	699a      	ldr	r2, [r3, #24]
 800288a:	f042 0201 	orr.w	r2, r2, #1
 800288e:	619a      	str	r2, [r3, #24]
 8002890:	699a      	ldr	r2, [r3, #24]
 8002892:	f002 0201 	and.w	r2, r2, #1
 8002896:	9200      	str	r2, [sp, #0]
 8002898:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	69da      	ldr	r2, [r3, #28]
 800289c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80028a0:	61da      	str	r2, [r3, #28]
 80028a2:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028a4:	4a07      	ldr	r2, [pc, #28]	; (80028c4 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	9301      	str	r3, [sp, #4]
 80028ac:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80028ae:	6853      	ldr	r3, [r2, #4]
 80028b0:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80028b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028ba:	b002      	add	sp, #8
 80028bc:	4770      	bx	lr
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
 80028c4:	40010000 	.word	0x40010000

080028c8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80028c8:	6803      	ldr	r3, [r0, #0]
{
 80028ca:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d112      	bne.n	80028f8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d2:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 80028d6:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028d8:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028da:	f042 0201 	orr.w	r2, r2, #1
 80028de:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028e0:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e2:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028e4:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028ee:	f7fd fc87 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028f2:	201c      	movs	r0, #28
 80028f4:	f7fd fcb8 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80028f8:	b003      	add	sp, #12
 80028fa:	f85d fb04 	ldr.w	pc, [sp], #4

080028fe <NMI_Handler>:
 80028fe:	4770      	bx	lr

08002900 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002900:	e7fe      	b.n	8002900 <HardFault_Handler>

08002902 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002902:	e7fe      	b.n	8002902 <MemManage_Handler>

08002904 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002904:	e7fe      	b.n	8002904 <BusFault_Handler>

08002906 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002906:	e7fe      	b.n	8002906 <UsageFault_Handler>

08002908 <SVC_Handler>:
 8002908:	4770      	bx	lr

0800290a <DebugMon_Handler>:
 800290a:	4770      	bx	lr

0800290c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800290c:	4770      	bx	lr

0800290e <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800290e:	f7fd bc53 	b.w	80001b8 <HAL_IncTick>
	...

08002914 <USB_LP_CAN1_RX0_IRQHandler>:
void USB_LP_CAN1_RX0_IRQHandler(void)
{
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8002914:	4801      	ldr	r0, [pc, #4]	; (800291c <USB_LP_CAN1_RX0_IRQHandler+0x8>)
 8002916:	f7fd bec5 	b.w	80006a4 <HAL_PCD_IRQHandler>
 800291a:	bf00      	nop
 800291c:	20000e10 	.word	0x20000e10

08002920 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002920:	4801      	ldr	r0, [pc, #4]	; (8002928 <TIM2_IRQHandler+0x8>)
 8002922:	f7fe bd55 	b.w	80013d0 <HAL_TIM_IRQHandler>
 8002926:	bf00      	nop
 8002928:	200003dc 	.word	0x200003dc

0800292c <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800292c:	4b0f      	ldr	r3, [pc, #60]	; (800296c <SystemInit+0x40>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	f042 0201 	orr.w	r2, r2, #1
 8002934:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8002936:	6859      	ldr	r1, [r3, #4]
 8002938:	4a0d      	ldr	r2, [pc, #52]	; (8002970 <SystemInit+0x44>)
 800293a:	400a      	ands	r2, r1
 800293c:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8002944:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002948:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800294a:	681a      	ldr	r2, [r3, #0]
 800294c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002950:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002952:	685a      	ldr	r2, [r3, #4]
 8002954:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8002958:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800295a:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800295e:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002960:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002964:	4b03      	ldr	r3, [pc, #12]	; (8002974 <SystemInit+0x48>)
 8002966:	609a      	str	r2, [r3, #8]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	40021000 	.word	0x40021000
 8002970:	f8ff0000 	.word	0xf8ff0000
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8002978:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PreTreatment */
  
  /* Init Device Library, add supported class and start the library. */
  USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS);
 800297a:	4c09      	ldr	r4, [pc, #36]	; (80029a0 <MX_USB_DEVICE_Init+0x28>)
 800297c:	2200      	movs	r2, #0
 800297e:	4909      	ldr	r1, [pc, #36]	; (80029a4 <MX_USB_DEVICE_Init+0x2c>)
 8002980:	4620      	mov	r0, r4
 8002982:	f7ff fb68 	bl	8002056 <USBD_Init>

  USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8002986:	4908      	ldr	r1, [pc, #32]	; (80029a8 <MX_USB_DEVICE_Init+0x30>)
 8002988:	4620      	mov	r0, r4
 800298a:	f7ff fb79 	bl	8002080 <USBD_RegisterClass>

  USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 800298e:	4620      	mov	r0, r4
 8002990:	4906      	ldr	r1, [pc, #24]	; (80029ac <MX_USB_DEVICE_Init+0x34>)
 8002992:	f7ff fb38 	bl	8002006 <USBD_CDC_RegisterInterface>

  USBD_Start(&hUsbDeviceFS);
 8002996:	4620      	mov	r0, r4

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  
  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8002998:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_Start(&hUsbDeviceFS);
 800299c:	f7ff bb77 	b.w	800208e <USBD_Start>
 80029a0:	2000041c 	.word	0x2000041c
 80029a4:	2000012c 	.word	0x2000012c
 80029a8:	20000008 	.word	0x20000008
 80029ac:	2000011c 	.word	0x2000011c

080029b0 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 80029b0:	2000      	movs	r0, #0
 80029b2:	4770      	bx	lr

080029b4 <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 80029b4:	2000      	movs	r0, #0
 80029b6:	4770      	bx	lr

080029b8 <CDC_Init_FS>:
{
 80029b8:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80029ba:	4c06      	ldr	r4, [pc, #24]	; (80029d4 <CDC_Init_FS+0x1c>)
 80029bc:	2200      	movs	r2, #0
 80029be:	4906      	ldr	r1, [pc, #24]	; (80029d8 <CDC_Init_FS+0x20>)
 80029c0:	4620      	mov	r0, r4
 80029c2:	f7ff fb27 	bl	8002014 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80029c6:	4905      	ldr	r1, [pc, #20]	; (80029dc <CDC_Init_FS+0x24>)
 80029c8:	4620      	mov	r0, r4
 80029ca:	f7ff fb2b 	bl	8002024 <USBD_CDC_SetRxBuffer>
}
 80029ce:	2000      	movs	r0, #0
 80029d0:	bd10      	pop	{r4, pc}
 80029d2:	bf00      	nop
 80029d4:	2000041c 	.word	0x2000041c
 80029d8:	20000a28 	.word	0x20000a28
 80029dc:	20000640 	.word	0x20000640

080029e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80029e0:	b570      	push	{r4, r5, r6, lr}
 80029e2:	4604      	mov	r4, r0
 80029e4:	460e      	mov	r6, r1
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80029e6:	4d07      	ldr	r5, [pc, #28]	; (8002a04 <CDC_Receive_FS+0x24>)
 80029e8:	4601      	mov	r1, r0
 80029ea:	4628      	mov	r0, r5
 80029ec:	f7ff fb1a 	bl	8002024 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80029f0:	4628      	mov	r0, r5
 80029f2:	f7ff fb1d 	bl	8002030 <USBD_CDC_ReceivePacket>
  CDC_Receive_Callback(Buf,Len[0]);
 80029f6:	4620      	mov	r0, r4
 80029f8:	6831      	ldr	r1, [r6, #0]
 80029fa:	f7ff ff39 	bl	8002870 <CDC_Receive_Callback>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 80029fe:	2000      	movs	r0, #0
 8002a00:	bd70      	pop	{r4, r5, r6, pc}
 8002a02:	bf00      	nop
 8002a04:	2000041c 	.word	0x2000041c

08002a08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002a08:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8002a0a:	4b0d      	ldr	r3, [pc, #52]	; (8002a40 <HAL_PCD_MspInit+0x38>)
 8002a0c:	6802      	ldr	r2, [r0, #0]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d112      	bne.n	8002a38 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8002a12:	f503 33da 	add.w	r3, r3, #111616	; 0x1b400
 8002a16:	69da      	ldr	r2, [r3, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a18:	2014      	movs	r0, #20
    __HAL_RCC_USB_CLK_ENABLE();
 8002a1a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002a1e:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a20:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8002a22:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a24:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8002a26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002a2a:	9301      	str	r3, [sp, #4]
 8002a2c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8002a2e:	f7fd fbe7 	bl	8000200 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8002a32:	2014      	movs	r0, #20
 8002a34:	f7fd fc18 	bl	8000268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8002a38:	b003      	add	sp, #12
 8002a3a:	f85d fb04 	ldr.w	pc, [sp], #4
 8002a3e:	bf00      	nop
 8002a40:	40005c00 	.word	0x40005c00

08002a44 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8002a44:	f200 412c 	addw	r1, r0, #1068	; 0x42c
 8002a48:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a4c:	f7ff bb36 	b.w	80020bc <USBD_LL_SetupStage>

08002a50 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8002a50:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002a54:	f8d3 223c 	ldr.w	r2, [r3, #572]	; 0x23c
 8002a58:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a5c:	f7ff bb5b 	b.w	8002116 <USBD_LL_DataOutStage>

08002a60 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8002a60:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8002a64:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a66:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a6a:	f7ff bb86 	b.w	800217a <USBD_LL_DataInStage>

08002a6e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8002a6e:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a72:	f7ff bc02 	b.w	800227a <USBD_LL_SOF>

08002a76 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 8002a76:	b510      	push	{r4, lr}
 8002a78:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8002a7a:	2101      	movs	r1, #1
 8002a7c:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a80:	f7ff fbe9 	bl	8002256 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a84:	f8d4 045c 	ldr.w	r0, [r4, #1116]	; 0x45c
}
 8002a88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8002a8c:	f7ff bbc4 	b.w	8002218 <USBD_LL_Reset>

08002a90 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 8002a90:	b510      	push	{r4, lr}
 8002a92:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8002a94:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002a98:	f7ff fbe0 	bl	800225c <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8002a9c:	69a3      	ldr	r3, [r4, #24]
 8002a9e:	b123      	cbz	r3, 8002aaa <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8002aa0:	4a02      	ldr	r2, [pc, #8]	; (8002aac <HAL_PCD_SuspendCallback+0x1c>)
 8002aa2:	6913      	ldr	r3, [r2, #16]
 8002aa4:	f043 0306 	orr.w	r3, r3, #6
 8002aa8:	6113      	str	r3, [r2, #16]
 8002aaa:	bd10      	pop	{r4, pc}
 8002aac:	e000ed00 	.word	0xe000ed00

08002ab0 <HAL_PCD_ResumeCallback>:
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8002ab0:	f8d0 045c 	ldr.w	r0, [r0, #1116]	; 0x45c
 8002ab4:	f7ff bbdb 	b.w	800226e <USBD_LL_Resume>

08002ab8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8002ab8:	b510      	push	{r4, lr}
  pdev->pData = &hpcd_USB_FS;

  hpcd_USB_FS.Instance = USB;
  hpcd_USB_FS.Init.dev_endpoints = 8;
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002aba:	2302      	movs	r3, #2
 8002abc:	2208      	movs	r2, #8
 8002abe:	f04f 0e03 	mov.w	lr, #3
{
 8002ac2:	4604      	mov	r4, r0
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002ac4:	491b      	ldr	r1, [pc, #108]	; (8002b34 <USBD_LL_Init+0x7c>)
  hpcd_USB_FS.pData = pdev;
 8002ac6:	481c      	ldr	r0, [pc, #112]	; (8002b38 <USBD_LL_Init+0x80>)
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_8;
 8002ac8:	e880 400e 	stmia.w	r0, {r1, r2, r3, lr}
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002acc:	2300      	movs	r3, #0
  hpcd_USB_FS.pData = pdev;
 8002ace:	f8c0 445c 	str.w	r4, [r0, #1116]	; 0x45c
  pdev->pData = &hpcd_USB_FS;
 8002ad2:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8002ad6:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8002ad8:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8002ada:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8002adc:	f7fd fcd5 	bl	800048a <HAL_PCD_Init>
 8002ae0:	b108      	cbz	r0, 8002ae6 <USBD_LL_Init+0x2e>
  {
    Error_Handler( );
 8002ae2:	f7ff fecd 	bl	8002880 <Error_Handler>
  }

  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	2318      	movs	r3, #24
 8002aea:	4611      	mov	r1, r2
 8002aec:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002af0:	f7fe f89c 	bl	8000c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8002af4:	2358      	movs	r3, #88	; 0x58
 8002af6:	2200      	movs	r2, #0
 8002af8:	2180      	movs	r1, #128	; 0x80
 8002afa:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002afe:	f7fe f895 	bl	8000c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8002b02:	23c0      	movs	r3, #192	; 0xc0
 8002b04:	2200      	movs	r2, #0
 8002b06:	2181      	movs	r1, #129	; 0x81
 8002b08:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b0c:	f7fe f88e 	bl	8000c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8002b10:	f44f 7388 	mov.w	r3, #272	; 0x110
 8002b14:	2200      	movs	r2, #0
 8002b16:	2101      	movs	r1, #1
 8002b18:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b1c:	f7fe f886 	bl	8000c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8002b20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002b24:	2200      	movs	r2, #0
 8002b26:	2182      	movs	r1, #130	; 0x82
 8002b28:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8002b2c:	f7fe f87e 	bl	8000c2c <HAL_PCDEx_PMAConfig>
  return USBD_OK;
}
 8002b30:	2000      	movs	r0, #0
 8002b32:	bd10      	pop	{r4, pc}
 8002b34:	40005c00 	.word	0x40005c00
 8002b38:	20000e10 	.word	0x20000e10

08002b3c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8002b3c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
 
  hal_status = HAL_PCD_Start(pdev->pData);
 8002b3e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b42:	f7fd fd0b 	bl	800055c <HAL_PCD_Start>
 8002b46:	2803      	cmp	r0, #3
 8002b48:	bf9a      	itte	ls
 8002b4a:	4b02      	ldrls	r3, [pc, #8]	; (8002b54 <USBD_LL_Start+0x18>)
 8002b4c:	5c18      	ldrbls	r0, [r3, r0]
 8002b4e:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002b50:	bd08      	pop	{r3, pc}
 8002b52:	bf00      	nop
 8002b54:	08002dd8 	.word	0x08002dd8

08002b58 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	461c      	mov	r4, r3
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8002b5c:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b60:	4613      	mov	r3, r2
 8002b62:	4622      	mov	r2, r4
 8002b64:	f7fd fd25 	bl	80005b2 <HAL_PCD_EP_Open>
 8002b68:	2803      	cmp	r0, #3
 8002b6a:	bf9a      	itte	ls
 8002b6c:	4b01      	ldrls	r3, [pc, #4]	; (8002b74 <USBD_LL_OpenEP+0x1c>)
 8002b6e:	5c18      	ldrbls	r0, [r3, r0]
 8002b70:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;
}
 8002b72:	bd10      	pop	{r4, pc}
 8002b74:	08002dd8 	.word	0x08002dd8

08002b78 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b78:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8002b7a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b7e:	f7fd fd3b 	bl	80005f8 <HAL_PCD_EP_Close>
 8002b82:	2803      	cmp	r0, #3
 8002b84:	bf9a      	itte	ls
 8002b86:	4b02      	ldrls	r3, [pc, #8]	; (8002b90 <USBD_LL_CloseEP+0x18>)
 8002b88:	5c18      	ldrbls	r0, [r3, r0]
 8002b8a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002b8c:	bd08      	pop	{r3, pc}
 8002b8e:	bf00      	nop
 8002b90:	08002dd8 	.word	0x08002dd8

08002b94 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002b94:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8002b96:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002b9a:	f7fd fffb 	bl	8000b94 <HAL_PCD_EP_SetStall>
 8002b9e:	2803      	cmp	r0, #3
 8002ba0:	bf9a      	itte	ls
 8002ba2:	4b02      	ldrls	r3, [pc, #8]	; (8002bac <USBD_LL_StallEP+0x18>)
 8002ba4:	5c18      	ldrbls	r0, [r3, r0]
 8002ba6:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002ba8:	bd08      	pop	{r3, pc}
 8002baa:	bf00      	nop
 8002bac:	08002dd8 	.word	0x08002dd8

08002bb0 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002bb0:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 8002bb2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bb6:	f7fe f816 	bl	8000be6 <HAL_PCD_EP_ClrStall>
 8002bba:	2803      	cmp	r0, #3
 8002bbc:	bf9a      	itte	ls
 8002bbe:	4b02      	ldrls	r3, [pc, #8]	; (8002bc8 <USBD_LL_ClearStallEP+0x18>)
 8002bc0:	5c18      	ldrbls	r0, [r3, r0]
 8002bc2:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002bc4:	bd08      	pop	{r3, pc}
 8002bc6:	bf00      	nop
 8002bc8:	08002dd8 	.word	0x08002dd8

08002bcc <USBD_LL_IsStallEP>:
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
  
  if((ep_addr & 0x80) == 0x80)
 8002bcc:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8002bce:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002bd2:	bf45      	ittet	mi
 8002bd4:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8002bd8:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002bdc:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8002be0:	f893 002a 	ldrbmi.w	r0, [r3, #42]	; 0x2a
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8002be4:	bf58      	it	pl
 8002be6:	f893 022a 	ldrbpl.w	r0, [r3, #554]	; 0x22a
  }
}
 8002bea:	4770      	bx	lr

08002bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8002bec:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;
  
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8002bee:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002bf2:	f7fd fcca 	bl	800058a <HAL_PCD_SetAddress>
 8002bf6:	2803      	cmp	r0, #3
 8002bf8:	bf9a      	itte	ls
 8002bfa:	4b02      	ldrls	r3, [pc, #8]	; (8002c04 <USBD_LL_SetUSBAddress+0x18>)
 8002bfc:	5c18      	ldrbls	r0, [r3, r0]
 8002bfe:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;  
}
 8002c00:	bd08      	pop	{r3, pc}
 8002c02:	bf00      	nop
 8002c04:	08002dd8 	.word	0x08002dd8

08002c08 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size    
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002c08:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8002c0a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c0e:	f7fd fd33 	bl	8000678 <HAL_PCD_EP_Transmit>
 8002c12:	2803      	cmp	r0, #3
 8002c14:	bf9a      	itte	ls
 8002c16:	4b02      	ldrls	r3, [pc, #8]	; (8002c20 <USBD_LL_Transmit+0x18>)
 8002c18:	5c18      	ldrbls	r0, [r3, r0]
 8002c1a:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status;    
}
 8002c1c:	bd08      	pop	{r3, pc}
 8002c1e:	bf00      	nop
 8002c20:	08002dd8 	.word	0x08002dd8

08002c24 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8002c24:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hal_status = HAL_OK;
  USBD_StatusTypeDef usb_status = USBD_OK;

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8002c26:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c2a:	f7fd fd06 	bl	800063a <HAL_PCD_EP_Receive>
 8002c2e:	2803      	cmp	r0, #3
 8002c30:	bf9a      	itte	ls
 8002c32:	4b02      	ldrls	r3, [pc, #8]	; (8002c3c <USBD_LL_PrepareReceive+0x18>)
 8002c34:	5c18      	ldrbls	r0, [r3, r0]
 8002c36:	2002      	movhi	r0, #2
    default :
      usb_status = USBD_FAIL;
    break;
  }
  return usb_status; 
}
 8002c38:	bd08      	pop	{r3, pc}
 8002c3a:	bf00      	nop
 8002c3c:	08002dd8 	.word	0x08002dd8

08002c40 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Recived Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8002c40:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8002c42:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8002c46:	f7fd fd10 	bl	800066a <HAL_PCD_EP_GetRxCount>
}
 8002c4a:	bd08      	pop	{r3, pc}

08002c4c <USBD_static_malloc>:
  */
void *USBD_static_malloc(uint32_t size)
{
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
}
 8002c4c:	4800      	ldr	r0, [pc, #0]	; (8002c50 <USBD_static_malloc+0x4>)
 8002c4e:	4770      	bx	lr
 8002c50:	20000184 	.word	0x20000184

08002c54 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002c54:	4770      	bx	lr

08002c56 <HAL_PCDEx_SetConnectionState>:
  * @param hpcd: PCD handle
  * @param state: Connection state (0: disconnected / 1: connected)
  * @retval None
  */
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
{
 8002c56:	4770      	bx	lr

08002c58 <USBD_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c58:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8002c5a:	4801      	ldr	r0, [pc, #4]	; (8002c60 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8002c5c:	800b      	strh	r3, [r1, #0]
}
 8002c5e:	4770      	bx	lr
 8002c60:	20000148 	.word	0x20000148

08002c64 <USBD_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_LangIDDesc);
 8002c64:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8002c66:	4801      	ldr	r0, [pc, #4]	; (8002c6c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8002c68:	800b      	strh	r3, [r1, #0]
}
 8002c6a:	4770      	bx	lr
 8002c6c:	2000015c 	.word	0x2000015c

08002c70 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002c70:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8002c72:	4c04      	ldr	r4, [pc, #16]	; (8002c84 <USBD_FS_ManufacturerStrDescriptor+0x14>)
 8002c74:	460a      	mov	r2, r1
 8002c76:	4804      	ldr	r0, [pc, #16]	; (8002c88 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8002c78:	4621      	mov	r1, r4
 8002c7a:	f7ff fc9e 	bl	80025ba <USBD_GetString>
  return USBD_StrDesc;
}
 8002c7e:	4620      	mov	r0, r4
 8002c80:	bd10      	pop	{r4, pc}
 8002c82:	bf00      	nop
 8002c84:	20001270 	.word	0x20001270
 8002c88:	08002df5 	.word	0x08002df5

08002c8c <USBD_FS_ProductStrDescriptor>:
{
 8002c8c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8002c8e:	4c04      	ldr	r4, [pc, #16]	; (8002ca0 <USBD_FS_ProductStrDescriptor+0x14>)
 8002c90:	460a      	mov	r2, r1
 8002c92:	4804      	ldr	r0, [pc, #16]	; (8002ca4 <USBD_FS_ProductStrDescriptor+0x18>)
 8002c94:	4621      	mov	r1, r4
 8002c96:	f7ff fc90 	bl	80025ba <USBD_GetString>
}
 8002c9a:	4620      	mov	r0, r4
 8002c9c:	bd10      	pop	{r4, pc}
 8002c9e:	bf00      	nop
 8002ca0:	20001270 	.word	0x20001270
 8002ca4:	08002e08 	.word	0x08002e08

08002ca8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002ca8:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
 8002caa:	4c04      	ldr	r4, [pc, #16]	; (8002cbc <USBD_FS_SerialStrDescriptor+0x14>)
 8002cac:	460a      	mov	r2, r1
 8002cae:	4804      	ldr	r0, [pc, #16]	; (8002cc0 <USBD_FS_SerialStrDescriptor+0x18>)
 8002cb0:	4621      	mov	r1, r4
 8002cb2:	f7ff fc82 	bl	80025ba <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002cb6:	4620      	mov	r0, r4
 8002cb8:	bd10      	pop	{r4, pc}
 8002cba:	bf00      	nop
 8002cbc:	20001270 	.word	0x20001270
 8002cc0:	08002e1e 	.word	0x08002e1e

08002cc4 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002cc4:	b510      	push	{r4, lr}
  if(speed == USBD_SPEED_HIGH)
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8002cc6:	4c04      	ldr	r4, [pc, #16]	; (8002cd8 <USBD_FS_ConfigStrDescriptor+0x14>)
 8002cc8:	460a      	mov	r2, r1
 8002cca:	4804      	ldr	r0, [pc, #16]	; (8002cdc <USBD_FS_ConfigStrDescriptor+0x18>)
 8002ccc:	4621      	mov	r1, r4
 8002cce:	f7ff fc74 	bl	80025ba <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002cd2:	4620      	mov	r0, r4
 8002cd4:	bd10      	pop	{r4, pc}
 8002cd6:	bf00      	nop
 8002cd8:	20001270 	.word	0x20001270
 8002cdc:	08002ddc 	.word	0x08002ddc

08002ce0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8002ce0:	b510      	push	{r4, lr}
  if(speed == 0)
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8002ce2:	4c04      	ldr	r4, [pc, #16]	; (8002cf4 <USBD_FS_InterfaceStrDescriptor+0x14>)
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	4804      	ldr	r0, [pc, #16]	; (8002cf8 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8002ce8:	4621      	mov	r1, r4
 8002cea:	f7ff fc66 	bl	80025ba <USBD_GetString>
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
  }
  return USBD_StrDesc;
}
 8002cee:	4620      	mov	r0, r4
 8002cf0:	bd10      	pop	{r4, pc}
 8002cf2:	bf00      	nop
 8002cf4:	20001270 	.word	0x20001270
 8002cf8:	08002de7 	.word	0x08002de7

08002cfc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8002cfc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8002cfe:	e003      	b.n	8002d08 <LoopCopyDataInit>

08002d00 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8002d00:	4b0b      	ldr	r3, [pc, #44]	; (8002d30 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8002d02:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8002d04:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8002d06:	3104      	adds	r1, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8002d08:	480a      	ldr	r0, [pc, #40]	; (8002d34 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8002d0c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8002d0e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8002d10:	d3f6      	bcc.n	8002d00 <CopyDataInit>
  ldr r2, =_sbss
 8002d12:	4a0a      	ldr	r2, [pc, #40]	; (8002d3c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8002d14:	e002      	b.n	8002d1c <LoopFillZerobss>

08002d16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8002d16:	2300      	movs	r3, #0
  str r3, [r2], #4
 8002d18:	f842 3b04 	str.w	r3, [r2], #4

08002d1c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8002d1c:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8002d1e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8002d20:	d3f9      	bcc.n	8002d16 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002d22:	f7ff fe03 	bl	800292c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d26:	f000 f80f 	bl	8002d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002d2a:	f7ff fcdb 	bl	80026e4 <main>
  bx lr
 8002d2e:	4770      	bx	lr
  ldr r3, =_sidata
 8002d30:	08002e34 	.word	0x08002e34
  ldr r0, =_sdata
 8002d34:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8002d38:	20000160 	.word	0x20000160
  ldr r2, =_sbss
 8002d3c:	20000160 	.word	0x20000160
  ldr r3, = _ebss
 8002d40:	20001470 	.word	0x20001470

08002d44 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002d44:	e7fe      	b.n	8002d44 <ADC1_2_IRQHandler>
	...

08002d48 <__libc_init_array>:
 8002d48:	b570      	push	{r4, r5, r6, lr}
 8002d4a:	2500      	movs	r5, #0
 8002d4c:	4e0c      	ldr	r6, [pc, #48]	; (8002d80 <__libc_init_array+0x38>)
 8002d4e:	4c0d      	ldr	r4, [pc, #52]	; (8002d84 <__libc_init_array+0x3c>)
 8002d50:	1ba4      	subs	r4, r4, r6
 8002d52:	10a4      	asrs	r4, r4, #2
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	d109      	bne.n	8002d6c <__libc_init_array+0x24>
 8002d58:	f000 f822 	bl	8002da0 <_init>
 8002d5c:	2500      	movs	r5, #0
 8002d5e:	4e0a      	ldr	r6, [pc, #40]	; (8002d88 <__libc_init_array+0x40>)
 8002d60:	4c0a      	ldr	r4, [pc, #40]	; (8002d8c <__libc_init_array+0x44>)
 8002d62:	1ba4      	subs	r4, r4, r6
 8002d64:	10a4      	asrs	r4, r4, #2
 8002d66:	42a5      	cmp	r5, r4
 8002d68:	d105      	bne.n	8002d76 <__libc_init_array+0x2e>
 8002d6a:	bd70      	pop	{r4, r5, r6, pc}
 8002d6c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d70:	4798      	blx	r3
 8002d72:	3501      	adds	r5, #1
 8002d74:	e7ee      	b.n	8002d54 <__libc_init_array+0xc>
 8002d76:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002d7a:	4798      	blx	r3
 8002d7c:	3501      	adds	r5, #1
 8002d7e:	e7f2      	b.n	8002d66 <__libc_init_array+0x1e>
 8002d80:	08002e2c 	.word	0x08002e2c
 8002d84:	08002e2c 	.word	0x08002e2c
 8002d88:	08002e2c 	.word	0x08002e2c
 8002d8c:	08002e30 	.word	0x08002e30

08002d90 <memset>:
 8002d90:	4603      	mov	r3, r0
 8002d92:	4402      	add	r2, r0
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d100      	bne.n	8002d9a <memset+0xa>
 8002d98:	4770      	bx	lr
 8002d9a:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9e:	e7f9      	b.n	8002d94 <memset+0x4>

08002da0 <_init>:
 8002da0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002da2:	bf00      	nop
 8002da4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002da6:	bc08      	pop	{r3}
 8002da8:	469e      	mov	lr, r3
 8002daa:	4770      	bx	lr

08002dac <_fini>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr
