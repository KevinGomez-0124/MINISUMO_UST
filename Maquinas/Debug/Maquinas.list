
Maquinas.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001dc4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08001ed0  08001ed0  00011ed0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001f08  08001f08  00011f08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f0c  08001f0c  00011f0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  08001f10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000104  20000010  08001f20  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  20000114  08001f20  00020114  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00010fca  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000022e9  00000000  00000000  00031003  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000052f1  00000000  00000000  000332ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000007d0  00000000  00000000  000385e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000aa8  00000000  00000000  00038db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   00004776  00000000  00000000  00039858  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0000322b  00000000  00000000  0003dfce  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  000411f9  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00001674  00000000  00000000  00041278  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000010 	.word	0x20000010
 8000128:	00000000 	.word	0x00000000
 800012c:	08001eb8 	.word	0x08001eb8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000014 	.word	0x20000014
 8000148:	08001eb8 	.word	0x08001eb8

0800014c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800014c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800014e:	4b0e      	ldr	r3, [pc, #56]	; (8000188 <HAL_InitTick+0x3c>)
{
 8000150:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000152:	7818      	ldrb	r0, [r3, #0]
 8000154:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000158:	fbb3 f3f0 	udiv	r3, r3, r0
 800015c:	4a0b      	ldr	r2, [pc, #44]	; (800018c <HAL_InitTick+0x40>)
 800015e:	6810      	ldr	r0, [r2, #0]
 8000160:	fbb0 f0f3 	udiv	r0, r0, r3
 8000164:	f000 fb08 	bl	8000778 <HAL_SYSTICK_Config>
 8000168:	4604      	mov	r4, r0
 800016a:	b958      	cbnz	r0, 8000184 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800016c:	2d0f      	cmp	r5, #15
 800016e:	d809      	bhi.n	8000184 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000170:	4602      	mov	r2, r0
 8000172:	4629      	mov	r1, r5
 8000174:	f04f 30ff 	mov.w	r0, #4294967295
 8000178:	f000 fabe 	bl	80006f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <HAL_InitTick+0x44>)
 800017e:	4620      	mov	r0, r4
 8000180:	601d      	str	r5, [r3, #0]
 8000182:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000184:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8000186:	bd38      	pop	{r3, r4, r5, pc}
 8000188:	20000000 	.word	0x20000000
 800018c:	2000000c 	.word	0x2000000c
 8000190:	20000004 	.word	0x20000004

08000194 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000194:	4a07      	ldr	r2, [pc, #28]	; (80001b4 <HAL_Init+0x20>)
{
 8000196:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000198:	6813      	ldr	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800019a:	2003      	movs	r0, #3
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800019c:	f043 0310 	orr.w	r3, r3, #16
 80001a0:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a2:	f000 fa97 	bl	80006d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001a6:	2000      	movs	r0, #0
 80001a8:	f7ff ffd0 	bl	800014c <HAL_InitTick>
  HAL_MspInit();
 80001ac:	f001 fd54 	bl	8001c58 <HAL_MspInit>
}
 80001b0:	2000      	movs	r0, #0
 80001b2:	bd08      	pop	{r3, pc}
 80001b4:	40022000 	.word	0x40022000

080001b8 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80001b8:	4a03      	ldr	r2, [pc, #12]	; (80001c8 <HAL_IncTick+0x10>)
 80001ba:	4b04      	ldr	r3, [pc, #16]	; (80001cc <HAL_IncTick+0x14>)
 80001bc:	6811      	ldr	r1, [r2, #0]
 80001be:	781b      	ldrb	r3, [r3, #0]
 80001c0:	440b      	add	r3, r1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	20000038 	.word	0x20000038
 80001cc:	20000000 	.word	0x20000000

080001d0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001d0:	4b01      	ldr	r3, [pc, #4]	; (80001d8 <HAL_GetTick+0x8>)
 80001d2:	6818      	ldr	r0, [r3, #0]
}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	20000038 	.word	0x20000038

080001dc <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80001dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  uint32_t tickstart = 0U;
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001de:	2600      	movs	r6, #0
{
 80001e0:	4604      	mov	r4, r0
 80001e2:	460d      	mov	r5, r1
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80001e4:	9601      	str	r6, [sp, #4]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80001e6:	f7ff fff3 	bl	80001d0 <HAL_GetTick>
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ea:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80001ec:	4607      	mov	r7, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80001ee:	689a      	ldr	r2, [r3, #8]
 80001f0:	05d2      	lsls	r2, r2, #23
 80001f2:	d508      	bpl.n	8000206 <HAL_ADC_PollForConversion+0x2a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
    
    return HAL_ERROR;
 80001f4:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001f6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_UNLOCK(hadc);
 80001f8:	f884 6024 	strb.w	r6, [r4, #36]	; 0x24
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80001fc:	f043 0320 	orr.w	r3, r3, #32
 8000200:	62a3      	str	r3, [r4, #40]	; 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8000202:	b003      	add	sp, #12
 8000204:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8000206:	685a      	ldr	r2, [r3, #4]
 8000208:	05d6      	lsls	r6, r2, #23
 800020a:	d403      	bmi.n	8000214 <HAL_ADC_PollForConversion+0x38>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 800020c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800020e:	f413 0f70 	tst.w	r3, #15728640	; 0xf00000
 8000212:	d03b      	beq.n	800028c <HAL_ADC_PollForConversion+0xb0>
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000214:	4b3a      	ldr	r3, [pc, #232]	; (8000300 <HAL_ADC_PollForConversion+0x124>)
 8000216:	2002      	movs	r0, #2
 8000218:	681e      	ldr	r6, [r3, #0]
 800021a:	f000 feb1 	bl	8000f80 <HAL_RCCEx_GetPeriphCLKFreq>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800021e:	6823      	ldr	r3, [r4, #0]
 8000220:	4a38      	ldr	r2, [pc, #224]	; (8000304 <HAL_ADC_PollForConversion+0x128>)
 8000222:	6919      	ldr	r1, [r3, #16]
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8000224:	fbb6 f0f0 	udiv	r0, r6, r0
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 8000228:	4211      	tst	r1, r2
 800022a:	4a37      	ldr	r2, [pc, #220]	; (8000308 <HAL_ADC_PollForConversion+0x12c>)
 800022c:	d14f      	bne.n	80002ce <HAL_ADC_PollForConversion+0xf2>
 800022e:	68de      	ldr	r6, [r3, #12]
 8000230:	4936      	ldr	r1, [pc, #216]	; (800030c <HAL_ADC_PollForConversion+0x130>)
 8000232:	420e      	tst	r6, r1
 8000234:	d14b      	bne.n	80002ce <HAL_ADC_PollForConversion+0xf2>
 8000236:	6919      	ldr	r1, [r3, #16]
 8000238:	4211      	tst	r1, r2
 800023a:	d159      	bne.n	80002f0 <HAL_ADC_PollForConversion+0x114>
 800023c:	68da      	ldr	r2, [r3, #12]
 800023e:	4b34      	ldr	r3, [pc, #208]	; (8000310 <HAL_ADC_PollForConversion+0x134>)
 8000240:	421a      	tst	r2, r3
 8000242:	bf14      	ite	ne
 8000244:	2329      	movne	r3, #41	; 0x29
 8000246:	2314      	moveq	r3, #20
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8000248:	fb00 f603 	mul.w	r6, r0, r3
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800024c:	9b01      	ldr	r3, [sp, #4]
 800024e:	429e      	cmp	r6, r3
 8000250:	d920      	bls.n	8000294 <HAL_ADC_PollForConversion+0xb8>
      if(Timeout != HAL_MAX_DELAY)
 8000252:	1c6b      	adds	r3, r5, #1
 8000254:	d005      	beq.n	8000262 <HAL_ADC_PollForConversion+0x86>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000256:	b15d      	cbz	r5, 8000270 <HAL_ADC_PollForConversion+0x94>
 8000258:	f7ff ffba 	bl	80001d0 <HAL_GetTick>
 800025c:	1bc0      	subs	r0, r0, r7
 800025e:	4285      	cmp	r5, r0
 8000260:	d306      	bcc.n	8000270 <HAL_ADC_PollForConversion+0x94>
      Conversion_Timeout_CPU_cycles ++;
 8000262:	9b01      	ldr	r3, [sp, #4]
 8000264:	3301      	adds	r3, #1
 8000266:	9301      	str	r3, [sp, #4]
 8000268:	e7f0      	b.n	800024c <HAL_ADC_PollForConversion+0x70>
      if(Timeout != HAL_MAX_DELAY)
 800026a:	1c68      	adds	r0, r5, #1
 800026c:	d00f      	beq.n	800028e <HAL_ADC_PollForConversion+0xb2>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800026e:	b945      	cbnz	r5, 8000282 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000270:	6aa3      	ldr	r3, [r4, #40]	; 0x28
          return HAL_TIMEOUT;
 8000272:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000274:	f043 0304 	orr.w	r3, r3, #4
 8000278:	62a3      	str	r3, [r4, #40]	; 0x28
          __HAL_UNLOCK(hadc);
 800027a:	2300      	movs	r3, #0
 800027c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          return HAL_TIMEOUT;
 8000280:	e7bf      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000282:	f7ff ffa5 	bl	80001d0 <HAL_GetTick>
 8000286:	1bc0      	subs	r0, r0, r7
 8000288:	4285      	cmp	r5, r0
 800028a:	d3f1      	bcc.n	8000270 <HAL_ADC_PollForConversion+0x94>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800028c:	6822      	ldr	r2, [r4, #0]
 800028e:	6813      	ldr	r3, [r2, #0]
 8000290:	0799      	lsls	r1, r3, #30
 8000292:	d5ea      	bpl.n	800026a <HAL_ADC_PollForConversion+0x8e>
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000294:	f06f 0312 	mvn.w	r3, #18
 8000298:	6822      	ldr	r2, [r4, #0]
 800029a:	6013      	str	r3, [r2, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800029c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800029e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002a2:	62a3      	str	r3, [r4, #40]	; 0x28
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80002a4:	6893      	ldr	r3, [r2, #8]
 80002a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80002aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80002ae:	d125      	bne.n	80002fc <HAL_ADC_PollForConversion+0x120>
 80002b0:	68e3      	ldr	r3, [r4, #12]
 80002b2:	bb1b      	cbnz	r3, 80002fc <HAL_ADC_PollForConversion+0x120>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80002b4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002ba:	62a3      	str	r3, [r4, #40]	; 0x28
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80002bc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 80002be:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 80002c2:	d11b      	bne.n	80002fc <HAL_ADC_PollForConversion+0x120>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80002c4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80002c6:	f043 0301 	orr.w	r3, r3, #1
 80002ca:	62a3      	str	r3, [r4, #40]	; 0x28
 80002cc:	e799      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80002ce:	6919      	ldr	r1, [r3, #16]
 80002d0:	4211      	tst	r1, r2
 80002d2:	d103      	bne.n	80002dc <HAL_ADC_PollForConversion+0x100>
 80002d4:	68d9      	ldr	r1, [r3, #12]
 80002d6:	4a0e      	ldr	r2, [pc, #56]	; (8000310 <HAL_ADC_PollForConversion+0x134>)
 80002d8:	4211      	tst	r1, r2
 80002da:	d00b      	beq.n	80002f4 <HAL_ADC_PollForConversion+0x118>
 80002dc:	6919      	ldr	r1, [r3, #16]
 80002de:	4a0d      	ldr	r2, [pc, #52]	; (8000314 <HAL_ADC_PollForConversion+0x138>)
 80002e0:	4211      	tst	r1, r2
 80002e2:	d109      	bne.n	80002f8 <HAL_ADC_PollForConversion+0x11c>
 80002e4:	68db      	ldr	r3, [r3, #12]
 80002e6:	4213      	tst	r3, r2
 80002e8:	bf14      	ite	ne
 80002ea:	23fc      	movne	r3, #252	; 0xfc
 80002ec:	2354      	moveq	r3, #84	; 0x54
 80002ee:	e7ab      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f0:	2329      	movs	r3, #41	; 0x29
 80002f2:	e7a9      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f4:	2354      	movs	r3, #84	; 0x54
 80002f6:	e7a7      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
 80002f8:	23fc      	movs	r3, #252	; 0xfc
 80002fa:	e7a5      	b.n	8000248 <HAL_ADC_PollForConversion+0x6c>
  return HAL_OK;
 80002fc:	2000      	movs	r0, #0
 80002fe:	e780      	b.n	8000202 <HAL_ADC_PollForConversion+0x26>
 8000300:	2000000c 	.word	0x2000000c
 8000304:	24924924 	.word	0x24924924
 8000308:	12492492 	.word	0x12492492
 800030c:	00924924 	.word	0x00924924
 8000310:	00492492 	.word	0x00492492
 8000314:	00249249 	.word	0x00249249

08000318 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000318:	6803      	ldr	r3, [r0, #0]
 800031a:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
}
 800031c:	4770      	bx	lr
	...

08000320 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8000320:	2300      	movs	r3, #0
{ 
 8000322:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 8000324:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000326:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 800032a:	2b01      	cmp	r3, #1
 800032c:	d074      	beq.n	8000418 <HAL_ADC_ConfigChannel+0xf8>
 800032e:	2301      	movs	r3, #1
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000330:	684d      	ldr	r5, [r1, #4]
  __HAL_LOCK(hadc);
 8000332:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  if (sConfig->Rank < 7U)
 8000336:	2d06      	cmp	r5, #6
 8000338:	6802      	ldr	r2, [r0, #0]
 800033a:	ea4f 0385 	mov.w	r3, r5, lsl #2
 800033e:	680c      	ldr	r4, [r1, #0]
 8000340:	d825      	bhi.n	800038e <HAL_ADC_ConfigChannel+0x6e>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000342:	442b      	add	r3, r5
 8000344:	251f      	movs	r5, #31
 8000346:	6b56      	ldr	r6, [r2, #52]	; 0x34
 8000348:	3b05      	subs	r3, #5
 800034a:	409d      	lsls	r5, r3
 800034c:	ea26 0505 	bic.w	r5, r6, r5
 8000350:	fa04 f303 	lsl.w	r3, r4, r3
 8000354:	432b      	orrs	r3, r5
 8000356:	6353      	str	r3, [r2, #52]	; 0x34
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8000358:	2c09      	cmp	r4, #9
 800035a:	ea4f 0344 	mov.w	r3, r4, lsl #1
 800035e:	688d      	ldr	r5, [r1, #8]
 8000360:	d92f      	bls.n	80003c2 <HAL_ADC_ConfigChannel+0xa2>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000362:	2607      	movs	r6, #7
 8000364:	4423      	add	r3, r4
 8000366:	68d1      	ldr	r1, [r2, #12]
 8000368:	3b1e      	subs	r3, #30
 800036a:	409e      	lsls	r6, r3
 800036c:	ea21 0106 	bic.w	r1, r1, r6
 8000370:	fa05 f303 	lsl.w	r3, r5, r3
 8000374:	430b      	orrs	r3, r1
 8000376:	60d3      	str	r3, [r2, #12]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8000378:	f1a4 0310 	sub.w	r3, r4, #16
 800037c:	2b01      	cmp	r3, #1
 800037e:	d92b      	bls.n	80003d8 <HAL_ADC_ConfigChannel+0xb8>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000380:	2300      	movs	r3, #0
      tmp_hal_status = HAL_ERROR;
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000382:	2200      	movs	r2, #0
 8000384:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
}
 8000388:	4618      	mov	r0, r3
 800038a:	b002      	add	sp, #8
 800038c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13U)
 800038e:	2d0c      	cmp	r5, #12
 8000390:	d80b      	bhi.n	80003aa <HAL_ADC_ConfigChannel+0x8a>
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000392:	442b      	add	r3, r5
 8000394:	251f      	movs	r5, #31
 8000396:	6b16      	ldr	r6, [r2, #48]	; 0x30
 8000398:	3b23      	subs	r3, #35	; 0x23
 800039a:	409d      	lsls	r5, r3
 800039c:	ea26 0505 	bic.w	r5, r6, r5
 80003a0:	fa04 f303 	lsl.w	r3, r4, r3
 80003a4:	432b      	orrs	r3, r5
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
 80003a8:	e7d6      	b.n	8000358 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80003aa:	442b      	add	r3, r5
 80003ac:	251f      	movs	r5, #31
 80003ae:	6ad6      	ldr	r6, [r2, #44]	; 0x2c
 80003b0:	3b41      	subs	r3, #65	; 0x41
 80003b2:	409d      	lsls	r5, r3
 80003b4:	ea26 0505 	bic.w	r5, r6, r5
 80003b8:	fa04 f303 	lsl.w	r3, r4, r3
 80003bc:	432b      	orrs	r3, r5
 80003be:	62d3      	str	r3, [r2, #44]	; 0x2c
 80003c0:	e7ca      	b.n	8000358 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 80003c2:	2607      	movs	r6, #7
 80003c4:	6911      	ldr	r1, [r2, #16]
 80003c6:	4423      	add	r3, r4
 80003c8:	409e      	lsls	r6, r3
 80003ca:	ea21 0106 	bic.w	r1, r1, r6
 80003ce:	fa05 f303 	lsl.w	r3, r5, r3
 80003d2:	430b      	orrs	r3, r1
 80003d4:	6113      	str	r3, [r2, #16]
 80003d6:	e7cf      	b.n	8000378 <HAL_ADC_ConfigChannel+0x58>
    if (hadc->Instance == ADC1)
 80003d8:	4b10      	ldr	r3, [pc, #64]	; (800041c <HAL_ADC_ConfigChannel+0xfc>)
 80003da:	429a      	cmp	r2, r3
 80003dc:	d116      	bne.n	800040c <HAL_ADC_ConfigChannel+0xec>
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80003de:	6893      	ldr	r3, [r2, #8]
 80003e0:	021b      	lsls	r3, r3, #8
 80003e2:	d4cd      	bmi.n	8000380 <HAL_ADC_ConfigChannel+0x60>
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003e4:	6893      	ldr	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003e6:	2c10      	cmp	r4, #16
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80003e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003ec:	6093      	str	r3, [r2, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80003ee:	d1c7      	bne.n	8000380 <HAL_ADC_ConfigChannel+0x60>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80003f0:	4b0b      	ldr	r3, [pc, #44]	; (8000420 <HAL_ADC_ConfigChannel+0x100>)
 80003f2:	4a0c      	ldr	r2, [pc, #48]	; (8000424 <HAL_ADC_ConfigChannel+0x104>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80003fa:	230a      	movs	r3, #10
 80003fc:	4353      	muls	r3, r2
            wait_loop_index--;
 80003fe:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8000400:	9b01      	ldr	r3, [sp, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d0bc      	beq.n	8000380 <HAL_ADC_ConfigChannel+0x60>
            wait_loop_index--;
 8000406:	9b01      	ldr	r3, [sp, #4]
 8000408:	3b01      	subs	r3, #1
 800040a:	e7f8      	b.n	80003fe <HAL_ADC_ConfigChannel+0xde>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800040c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 800040e:	f043 0320 	orr.w	r3, r3, #32
 8000412:	6283      	str	r3, [r0, #40]	; 0x28
      tmp_hal_status = HAL_ERROR;
 8000414:	2301      	movs	r3, #1
 8000416:	e7b4      	b.n	8000382 <HAL_ADC_ConfigChannel+0x62>
  __HAL_LOCK(hadc);
 8000418:	2302      	movs	r3, #2
 800041a:	e7b5      	b.n	8000388 <HAL_ADC_ConfigChannel+0x68>
 800041c:	40012400 	.word	0x40012400
 8000420:	2000000c 	.word	0x2000000c
 8000424:	000f4240 	.word	0x000f4240

08000428 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0U;
  __IO uint32_t wait_loop_index = 0U;
 8000428:	2300      	movs	r3, #0
{
 800042a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0U;
 800042c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800042e:	6803      	ldr	r3, [r0, #0]
{
 8000430:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000432:	689a      	ldr	r2, [r3, #8]
 8000434:	07d2      	lsls	r2, r2, #31
 8000436:	d502      	bpl.n	800043e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8000438:	2000      	movs	r0, #0
}
 800043a:	b002      	add	sp, #8
 800043c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_ADC_ENABLE(hadc);
 800043e:	689a      	ldr	r2, [r3, #8]
 8000440:	f042 0201 	orr.w	r2, r2, #1
 8000444:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000446:	4b12      	ldr	r3, [pc, #72]	; (8000490 <ADC_Enable+0x68>)
 8000448:	4a12      	ldr	r2, [pc, #72]	; (8000494 <ADC_Enable+0x6c>)
 800044a:	681b      	ldr	r3, [r3, #0]
 800044c:	fbb3 f3f2 	udiv	r3, r3, r2
      wait_loop_index--;
 8000450:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0U)
 8000452:	9b01      	ldr	r3, [sp, #4]
 8000454:	b9c3      	cbnz	r3, 8000488 <ADC_Enable+0x60>
    tickstart = HAL_GetTick();
 8000456:	f7ff febb 	bl	80001d0 <HAL_GetTick>
 800045a:	4606      	mov	r6, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 800045c:	6823      	ldr	r3, [r4, #0]
 800045e:	689d      	ldr	r5, [r3, #8]
 8000460:	f015 0501 	ands.w	r5, r5, #1
 8000464:	d1e8      	bne.n	8000438 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8000466:	f7ff feb3 	bl	80001d0 <HAL_GetTick>
 800046a:	1b80      	subs	r0, r0, r6
 800046c:	2802      	cmp	r0, #2
 800046e:	d9f5      	bls.n	800045c <ADC_Enable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000470:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        __HAL_UNLOCK(hadc);
 8000472:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000476:	f043 0310 	orr.w	r3, r3, #16
 800047a:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800047c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
        __HAL_UNLOCK(hadc);
 800047e:	2001      	movs	r0, #1
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000480:	f043 0301 	orr.w	r3, r3, #1
 8000484:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000486:	e7d8      	b.n	800043a <ADC_Enable+0x12>
      wait_loop_index--;
 8000488:	9b01      	ldr	r3, [sp, #4]
 800048a:	3b01      	subs	r3, #1
 800048c:	e7e0      	b.n	8000450 <ADC_Enable+0x28>
 800048e:	bf00      	nop
 8000490:	2000000c 	.word	0x2000000c
 8000494:	000f4240 	.word	0x000f4240

08000498 <HAL_ADC_Start>:
  __HAL_LOCK(hadc);
 8000498:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 800049c:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 800049e:	2b01      	cmp	r3, #1
{
 80004a0:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80004a2:	d054      	beq.n	800054e <HAL_ADC_Start+0xb6>
 80004a4:	2301      	movs	r3, #1
 80004a6:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_Enable(hadc);
 80004aa:	f7ff ffbd 	bl	8000428 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 80004ae:	2800      	cmp	r0, #0
 80004b0:	d149      	bne.n	8000546 <HAL_ADC_Start+0xae>
    ADC_STATE_CLR_SET(hadc->State,
 80004b2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004b4:	4a27      	ldr	r2, [pc, #156]	; (8000554 <HAL_ADC_Start+0xbc>)
    ADC_STATE_CLR_SET(hadc->State,
 80004b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80004ba:	f023 0301 	bic.w	r3, r3, #1
 80004be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004c2:	62a3      	str	r3, [r4, #40]	; 0x28
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80004c4:	6823      	ldr	r3, [r4, #0]
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d104      	bne.n	80004d4 <HAL_ADC_Start+0x3c>
 80004ca:	4923      	ldr	r1, [pc, #140]	; (8000558 <HAL_ADC_Start+0xc0>)
 80004cc:	684a      	ldr	r2, [r1, #4]
 80004ce:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 80004d2:	d12e      	bne.n	8000532 <HAL_ADC_Start+0x9a>
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80004d4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004d6:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80004da:	62a2      	str	r2, [r4, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80004dc:	685a      	ldr	r2, [r3, #4]
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80004de:	0552      	lsls	r2, r2, #21
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80004e0:	bf41      	itttt	mi
 80004e2:	6aa2      	ldrmi	r2, [r4, #40]	; 0x28
 80004e4:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80004e8:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80004ec:	62a2      	strmi	r2, [r4, #40]	; 0x28
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80004ee:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80004f0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80004f4:	bf1c      	itt	ne
 80004f6:	6ae2      	ldrne	r2, [r4, #44]	; 0x2c
 80004f8:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80004fc:	62e2      	str	r2, [r4, #44]	; 0x2c
    __HAL_UNLOCK(hadc);
 80004fe:	2200      	movs	r2, #0
 8000500:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000504:	f06f 0202 	mvn.w	r2, #2
 8000508:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800050a:	689a      	ldr	r2, [r3, #8]
 800050c:	f402 2260 	and.w	r2, r2, #917504	; 0xe0000
 8000510:	f5b2 2f60 	cmp.w	r2, #917504	; 0xe0000
 8000514:	d113      	bne.n	800053e <HAL_ADC_Start+0xa6>
 8000516:	4a0f      	ldr	r2, [pc, #60]	; (8000554 <HAL_ADC_Start+0xbc>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d105      	bne.n	8000528 <HAL_ADC_Start+0x90>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800051c:	f5a2 6280 	sub.w	r2, r2, #1024	; 0x400
 8000520:	6852      	ldr	r2, [r2, #4]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000522:	f412 2f70 	tst.w	r2, #983040	; 0xf0000
 8000526:	d10a      	bne.n	800053e <HAL_ADC_Start+0xa6>
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000528:	689a      	ldr	r2, [r3, #8]
 800052a:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800052e:	609a      	str	r2, [r3, #8]
 8000530:	bd10      	pop	{r4, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000532:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000534:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000538:	62a2      	str	r2, [r4, #40]	; 0x28
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800053a:	684a      	ldr	r2, [r1, #4]
 800053c:	e7cf      	b.n	80004de <HAL_ADC_Start+0x46>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 800053e:	689a      	ldr	r2, [r3, #8]
 8000540:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8000544:	e7f3      	b.n	800052e <HAL_ADC_Start+0x96>
    __HAL_UNLOCK(hadc);
 8000546:	2300      	movs	r3, #0
 8000548:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 800054c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 800054e:	2002      	movs	r0, #2
}
 8000550:	bd10      	pop	{r4, pc}
 8000552:	bf00      	nop
 8000554:	40012800 	.word	0x40012800
 8000558:	40012400 	.word	0x40012400

0800055c <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 800055c:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800055e:	6803      	ldr	r3, [r0, #0]
{
 8000560:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8000562:	689a      	ldr	r2, [r3, #8]
 8000564:	07d2      	lsls	r2, r2, #31
 8000566:	d401      	bmi.n	800056c <ADC_ConversionStop_Disable+0x10>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000568:	2000      	movs	r0, #0
 800056a:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_ADC_DISABLE(hadc);
 800056c:	689a      	ldr	r2, [r3, #8]
 800056e:	f022 0201 	bic.w	r2, r2, #1
 8000572:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8000574:	f7ff fe2c 	bl	80001d0 <HAL_GetTick>
 8000578:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) != RESET)
 800057a:	6823      	ldr	r3, [r4, #0]
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	07db      	lsls	r3, r3, #31
 8000580:	d5f2      	bpl.n	8000568 <ADC_ConversionStop_Disable+0xc>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000582:	f7ff fe25 	bl	80001d0 <HAL_GetTick>
 8000586:	1b40      	subs	r0, r0, r5
 8000588:	2802      	cmp	r0, #2
 800058a:	d9f6      	bls.n	800057a <ADC_ConversionStop_Disable+0x1e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800058c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800058e:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000590:	f043 0310 	orr.w	r3, r3, #16
 8000594:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000596:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000598:	f043 0301 	orr.w	r3, r3, #1
 800059c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800059e:	bd38      	pop	{r3, r4, r5, pc}

080005a0 <HAL_ADC_Init>:
{
 80005a0:	b570      	push	{r4, r5, r6, lr}
  if(hadc == NULL)
 80005a2:	4604      	mov	r4, r0
 80005a4:	2800      	cmp	r0, #0
 80005a6:	d071      	beq.n	800068c <HAL_ADC_Init+0xec>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80005a8:	6a83      	ldr	r3, [r0, #40]	; 0x28
 80005aa:	b923      	cbnz	r3, 80005b6 <HAL_ADC_Init+0x16>
    ADC_CLEAR_ERRORCODE(hadc);
 80005ac:	62c3      	str	r3, [r0, #44]	; 0x2c
    hadc->Lock = HAL_UNLOCKED;
 80005ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    HAL_ADC_MspInit(hadc);
 80005b2:	f001 fb73 	bl	8001c9c <HAL_ADC_MspInit>
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80005b6:	4620      	mov	r0, r4
 80005b8:	f7ff ffd0 	bl	800055c <ADC_ConversionStop_Disable>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80005be:	f013 0f10 	tst.w	r3, #16
    ADC_STATE_CLR_SET(hadc->State,
 80005c2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80005c4:	d164      	bne.n	8000690 <HAL_ADC_Init+0xf0>
 80005c6:	2800      	cmp	r0, #0
 80005c8:	d162      	bne.n	8000690 <HAL_ADC_Init+0xf0>
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005ca:	69e1      	ldr	r1, [r4, #28]
    ADC_STATE_CLR_SET(hadc->State,
 80005cc:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005d0:	6862      	ldr	r2, [r4, #4]
    ADC_STATE_CLR_SET(hadc->State,
 80005d2:	f023 0302 	bic.w	r3, r3, #2
 80005d6:	f043 0302 	orr.w	r3, r3, #2
    tmp_cr2 |= (hadc->Init.DataAlign                               |
 80005da:	430a      	orrs	r2, r1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005dc:	68a1      	ldr	r1, [r4, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80005de:	62a3      	str	r3, [r4, #40]	; 0x28
                ADC_CR2_CONTINUOUS(hadc->Init.ContinuousConvMode)   );
 80005e0:	68e3      	ldr	r3, [r4, #12]
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005e2:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv) |
 80005e6:	ea42 0243 	orr.w	r2, r2, r3, lsl #1
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 80005ea:	d038      	beq.n	800065e <HAL_ADC_Init+0xbe>
 80005ec:	2901      	cmp	r1, #1
 80005ee:	bf14      	ite	ne
 80005f0:	4606      	movne	r6, r0
 80005f2:	f44f 7680 	moveq.w	r6, #256	; 0x100
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80005f6:	6965      	ldr	r5, [r4, #20]
 80005f8:	2d01      	cmp	r5, #1
 80005fa:	d107      	bne.n	800060c <HAL_ADC_Init+0x6c>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d130      	bne.n	8000662 <HAL_ADC_Init+0xc2>
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000600:	69a3      	ldr	r3, [r4, #24]
 8000602:	3b01      	subs	r3, #1
 8000604:	ea46 3543 	orr.w	r5, r6, r3, lsl #13
 8000608:	f445 6600 	orr.w	r6, r5, #2048	; 0x800
      MODIFY_REG(hadc->Instance->CR1,
 800060c:	6823      	ldr	r3, [r4, #0]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800060e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
      MODIFY_REG(hadc->Instance->CR1,
 8000612:	685d      	ldr	r5, [r3, #4]
 8000614:	f425 4569 	bic.w	r5, r5, #59648	; 0xe900
 8000618:	ea45 0506 	orr.w	r5, r5, r6
 800061c:	605d      	str	r5, [r3, #4]
      MODIFY_REG(hadc->Instance->CR2,
 800061e:	689e      	ldr	r6, [r3, #8]
 8000620:	4d1d      	ldr	r5, [pc, #116]	; (8000698 <HAL_ADC_Init+0xf8>)
 8000622:	ea05 0506 	and.w	r5, r5, r6
 8000626:	ea45 0502 	orr.w	r5, r5, r2
 800062a:	609d      	str	r5, [r3, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800062c:	d001      	beq.n	8000632 <HAL_ADC_Init+0x92>
 800062e:	2901      	cmp	r1, #1
 8000630:	d120      	bne.n	8000674 <HAL_ADC_Init+0xd4>
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000632:	6921      	ldr	r1, [r4, #16]
 8000634:	3901      	subs	r1, #1
 8000636:	0509      	lsls	r1, r1, #20
    MODIFY_REG(hadc->Instance->SQR1,
 8000638:	6add      	ldr	r5, [r3, #44]	; 0x2c
 800063a:	f425 0570 	bic.w	r5, r5, #15728640	; 0xf00000
 800063e:	4329      	orrs	r1, r5
 8000640:	62d9      	str	r1, [r3, #44]	; 0x2c
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000642:	6899      	ldr	r1, [r3, #8]
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <HAL_ADC_Init+0xfc>)
 8000646:	400b      	ands	r3, r1
 8000648:	429a      	cmp	r2, r3
 800064a:	d115      	bne.n	8000678 <HAL_ADC_Init+0xd8>
      ADC_CLEAR_ERRORCODE(hadc);
 800064c:	2300      	movs	r3, #0
 800064e:	62e3      	str	r3, [r4, #44]	; 0x2c
      ADC_STATE_CLR_SET(hadc->State,
 8000650:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000652:	f023 0303 	bic.w	r3, r3, #3
 8000656:	f043 0301 	orr.w	r3, r3, #1
 800065a:	62a3      	str	r3, [r4, #40]	; 0x28
 800065c:	bd70      	pop	{r4, r5, r6, pc}
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800065e:	460e      	mov	r6, r1
 8000660:	e7c9      	b.n	80005f6 <HAL_ADC_Init+0x56>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000662:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000664:	f043 0320 	orr.w	r3, r3, #32
 8000668:	62a3      	str	r3, [r4, #40]	; 0x28
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800066a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000672:	e7cb      	b.n	800060c <HAL_ADC_Init+0x6c>
  uint32_t tmp_sqr1 = 0U;
 8000674:	2100      	movs	r1, #0
 8000676:	e7df      	b.n	8000638 <HAL_ADC_Init+0x98>
      ADC_STATE_CLR_SET(hadc->State,
 8000678:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800067a:	f023 0312 	bic.w	r3, r3, #18
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	62a3      	str	r3, [r4, #40]	; 0x28
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000684:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000686:	f043 0301 	orr.w	r3, r3, #1
 800068a:	62e3      	str	r3, [r4, #44]	; 0x2c
    return HAL_ERROR;
 800068c:	2001      	movs	r0, #1
}
 800068e:	bd70      	pop	{r4, r5, r6, pc}
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000690:	f043 0310 	orr.w	r3, r3, #16
 8000694:	62a3      	str	r3, [r4, #40]	; 0x28
 8000696:	e7f9      	b.n	800068c <HAL_ADC_Init+0xec>
 8000698:	ffe1f7fd 	.word	0xffe1f7fd
 800069c:	ff1f0efe 	.word	0xff1f0efe

080006a0 <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 80006a0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
{
 80006a4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 80006a6:	2b01      	cmp	r3, #1
{
 80006a8:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 80006aa:	d011      	beq.n	80006d0 <HAL_ADC_Stop+0x30>
 80006ac:	2301      	movs	r3, #1
 80006ae:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80006b2:	f7ff ff53 	bl	800055c <ADC_ConversionStop_Disable>
  if (tmp_hal_status == HAL_OK)
 80006b6:	b938      	cbnz	r0, 80006c8 <HAL_ADC_Stop+0x28>
    ADC_STATE_CLR_SET(hadc->State,
 80006b8:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80006ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80006be:	f023 0301 	bic.w	r3, r3, #1
 80006c2:	f043 0301 	orr.w	r3, r3, #1
 80006c6:	62a3      	str	r3, [r4, #40]	; 0x28
  __HAL_UNLOCK(hadc);
 80006c8:	2300      	movs	r3, #0
 80006ca:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
  return tmp_hal_status;
 80006ce:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 80006d0:	2002      	movs	r0, #2
}
 80006d2:	bd10      	pop	{r4, pc}

080006d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d4:	4a07      	ldr	r2, [pc, #28]	; (80006f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006d6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006d8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80006da:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006de:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80006e2:	041b      	lsls	r3, r3, #16
 80006e4:	0c1b      	lsrs	r3, r3, #16
 80006e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 80006ee:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 80006f0:	60d3      	str	r3, [r2, #12]
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f8:	4b17      	ldr	r3, [pc, #92]	; (8000758 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80006fa:	b530      	push	{r4, r5, lr}
 80006fc:	68dc      	ldr	r4, [r3, #12]
 80006fe:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000702:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000708:	2b04      	cmp	r3, #4
 800070a:	bf28      	it	cs
 800070c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800070e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000710:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000714:	bf98      	it	ls
 8000716:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	fa05 f303 	lsl.w	r3, r5, r3
 800071c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000720:	bf88      	it	hi
 8000722:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4019      	ands	r1, r3
 8000726:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000728:	fa05 f404 	lsl.w	r4, r5, r4
 800072c:	3c01      	subs	r4, #1
 800072e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000730:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000732:	ea42 0201 	orr.w	r2, r2, r1
 8000736:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073a:	bfaf      	iteee	ge
 800073c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000740:	4b06      	ldrlt	r3, [pc, #24]	; (800075c <HAL_NVIC_SetPriority+0x64>)
 8000742:	f000 000f 	andlt.w	r0, r0, #15
 8000746:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	bfa5      	ittet	ge
 800074a:	b2d2      	uxtbge	r2, r2
 800074c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000750:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000752:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	e000ed00 	.word	0xe000ed00
 800075c:	e000ed14 	.word	0xe000ed14

08000760 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000760:	2301      	movs	r3, #1
 8000762:	0942      	lsrs	r2, r0, #5
 8000764:	f000 001f 	and.w	r0, r0, #31
 8000768:	fa03 f000 	lsl.w	r0, r3, r0
 800076c:	4b01      	ldr	r3, [pc, #4]	; (8000774 <HAL_NVIC_EnableIRQ+0x14>)
 800076e:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000772:	4770      	bx	lr
 8000774:	e000e100 	.word	0xe000e100

08000778 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000778:	3801      	subs	r0, #1
 800077a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800077e:	d20a      	bcs.n	8000796 <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000780:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000782:	4b06      	ldr	r3, [pc, #24]	; (800079c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000784:	4a06      	ldr	r2, [pc, #24]	; (80007a0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000786:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000788:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800078c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800078e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000790:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000796:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000798:	4770      	bx	lr
 800079a:	bf00      	nop
 800079c:	e000e010 	.word	0xe000e010
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position;
  uint32_t ioposition = 0x00U;
  uint32_t iocurrent = 0x00U;
  uint32_t temp = 0x00U;
  uint32_t config = 0x00U;
 80007a8:	2200      	movs	r2, #0
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0U; position < GPIO_NUMBER; position++)
 80007aa:	4616      	mov	r6, r2
 80007ac:	4b65      	ldr	r3, [pc, #404]	; (8000944 <HAL_GPIO_Init+0x1a0>)
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80007ae:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 8000954 <HAL_GPIO_Init+0x1b0>
 80007b2:	f8df c1a4 	ldr.w	ip, [pc, #420]	; 8000958 <HAL_GPIO_Init+0x1b4>
    ioposition = (0x01U << position);
 80007b6:	f04f 0801 	mov.w	r8, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007ba:	680c      	ldr	r4, [r1, #0]
    ioposition = (0x01U << position);
 80007bc:	fa08 f806 	lsl.w	r8, r8, r6
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007c0:	ea08 0404 	and.w	r4, r8, r4
    if (iocurrent == ioposition)
 80007c4:	45a0      	cmp	r8, r4
 80007c6:	d17f      	bne.n	80008c8 <HAL_GPIO_Init+0x124>
      switch (GPIO_Init->Mode)
 80007c8:	684d      	ldr	r5, [r1, #4]
 80007ca:	2d12      	cmp	r5, #18
 80007cc:	f000 80af 	beq.w	800092e <HAL_GPIO_Init+0x18a>
 80007d0:	f200 8088 	bhi.w	80008e4 <HAL_GPIO_Init+0x140>
 80007d4:	2d02      	cmp	r5, #2
 80007d6:	f000 80a7 	beq.w	8000928 <HAL_GPIO_Init+0x184>
 80007da:	d87c      	bhi.n	80008d6 <HAL_GPIO_Init+0x132>
 80007dc:	2d00      	cmp	r5, #0
 80007de:	f000 808e 	beq.w	80008fe <HAL_GPIO_Init+0x15a>
 80007e2:	2d01      	cmp	r5, #1
 80007e4:	f000 809e 	beq.w	8000924 <HAL_GPIO_Init+0x180>
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2U) : ((position - 8U) << 2U);

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80007e8:	f04f 090f 	mov.w	r9, #15
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80007ec:	2cff      	cmp	r4, #255	; 0xff
 80007ee:	bf93      	iteet	ls
 80007f0:	4682      	movls	sl, r0
 80007f2:	f106 4580 	addhi.w	r5, r6, #1073741824	; 0x40000000
 80007f6:	3d08      	subhi	r5, #8
 80007f8:	f8d0 b000 	ldrls.w	fp, [r0]
 80007fc:	bf92      	itee	ls
 80007fe:	00b5      	lslls	r5, r6, #2
 8000800:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 8000804:	00ad      	lslhi	r5, r5, #2
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000806:	fa09 f805 	lsl.w	r8, r9, r5
 800080a:	ea2b 0808 	bic.w	r8, fp, r8
 800080e:	fa02 f505 	lsl.w	r5, r2, r5
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000812:	bf88      	it	hi
 8000814:	f100 0a04 	addhi.w	sl, r0, #4
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000818:	ea48 0505 	orr.w	r5, r8, r5
 800081c:	f8ca 5000 	str.w	r5, [sl]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000820:	f8d1 a004 	ldr.w	sl, [r1, #4]
 8000824:	f01a 5f80 	tst.w	sl, #268435456	; 0x10000000
 8000828:	d04e      	beq.n	80008c8 <HAL_GPIO_Init+0x124>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800082a:	4d47      	ldr	r5, [pc, #284]	; (8000948 <HAL_GPIO_Init+0x1a4>)
 800082c:	4f46      	ldr	r7, [pc, #280]	; (8000948 <HAL_GPIO_Init+0x1a4>)
 800082e:	69ad      	ldr	r5, [r5, #24]
 8000830:	f026 0803 	bic.w	r8, r6, #3
 8000834:	f045 0501 	orr.w	r5, r5, #1
 8000838:	61bd      	str	r5, [r7, #24]
 800083a:	69bd      	ldr	r5, [r7, #24]
 800083c:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
 8000840:	f005 0501 	and.w	r5, r5, #1
 8000844:	9501      	str	r5, [sp, #4]
 8000846:	f508 3880 	add.w	r8, r8, #65536	; 0x10000
        temp = AFIO->EXTICR[position >> 2U];
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 800084a:	f006 0b03 	and.w	fp, r6, #3
        __HAL_RCC_AFIO_CLK_ENABLE();
 800084e:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000850:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
        temp = AFIO->EXTICR[position >> 2U];
 8000854:	f8d8 5008 	ldr.w	r5, [r8, #8]
        CLEAR_BIT(temp, (0x0FU) << (4U * (position & 0x03U)));
 8000858:	fa09 f90b 	lsl.w	r9, r9, fp
 800085c:	ea25 0909 	bic.w	r9, r5, r9
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000860:	4d3a      	ldr	r5, [pc, #232]	; (800094c <HAL_GPIO_Init+0x1a8>)
 8000862:	42a8      	cmp	r0, r5
 8000864:	d068      	beq.n	8000938 <HAL_GPIO_Init+0x194>
 8000866:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800086a:	42a8      	cmp	r0, r5
 800086c:	d066      	beq.n	800093c <HAL_GPIO_Init+0x198>
 800086e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000872:	42a8      	cmp	r0, r5
 8000874:	d064      	beq.n	8000940 <HAL_GPIO_Init+0x19c>
 8000876:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800087a:	42a8      	cmp	r0, r5
 800087c:	bf0c      	ite	eq
 800087e:	2503      	moveq	r5, #3
 8000880:	2504      	movne	r5, #4
 8000882:	fa05 f50b 	lsl.w	r5, r5, fp
 8000886:	ea45 0509 	orr.w	r5, r5, r9
        AFIO->EXTICR[position >> 2U] = temp;
 800088a:	f8c8 5008 	str.w	r5, [r8, #8]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800088e:	681d      	ldr	r5, [r3, #0]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000890:	f41a 3f80 	tst.w	sl, #65536	; 0x10000
          SET_BIT(EXTI->IMR, iocurrent);
 8000894:	bf14      	ite	ne
 8000896:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000898:	43a5      	biceq	r5, r4
 800089a:	601d      	str	r5, [r3, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800089c:	685d      	ldr	r5, [r3, #4]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800089e:	f41a 3f00 	tst.w	sl, #131072	; 0x20000
          SET_BIT(EXTI->EMR, iocurrent);
 80008a2:	bf14      	ite	ne
 80008a4:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80008a6:	43a5      	biceq	r5, r4
 80008a8:	605d      	str	r5, [r3, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80008aa:	689d      	ldr	r5, [r3, #8]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008ac:	f41a 1f80 	tst.w	sl, #1048576	; 0x100000
          SET_BIT(EXTI->RTSR, iocurrent);
 80008b0:	bf14      	ite	ne
 80008b2:	4325      	orrne	r5, r4
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80008b4:	43a5      	biceq	r5, r4
 80008b6:	609d      	str	r5, [r3, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80008b8:	68dd      	ldr	r5, [r3, #12]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ba:	f41a 1f00 	tst.w	sl, #2097152	; 0x200000
          SET_BIT(EXTI->FTSR, iocurrent);
 80008be:	bf14      	ite	ne
 80008c0:	432c      	orrne	r4, r5
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80008c2:	ea25 0404 	biceq.w	r4, r5, r4
 80008c6:	60dc      	str	r4, [r3, #12]
  for (position = 0U; position < GPIO_NUMBER; position++)
 80008c8:	3601      	adds	r6, #1
 80008ca:	2e10      	cmp	r6, #16
 80008cc:	f47f af73 	bne.w	80007b6 <HAL_GPIO_Init+0x12>
        }
      }
    }
  }
}
 80008d0:	b003      	add	sp, #12
 80008d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      switch (GPIO_Init->Mode)
 80008d6:	2d03      	cmp	r5, #3
 80008d8:	d022      	beq.n	8000920 <HAL_GPIO_Init+0x17c>
 80008da:	2d11      	cmp	r5, #17
 80008dc:	d184      	bne.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008de:	68ca      	ldr	r2, [r1, #12]
 80008e0:	3204      	adds	r2, #4
          break;
 80008e2:	e781      	b.n	80007e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 80008e4:	4f1a      	ldr	r7, [pc, #104]	; (8000950 <HAL_GPIO_Init+0x1ac>)
 80008e6:	42bd      	cmp	r5, r7
 80008e8:	d009      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 80008ea:	d812      	bhi.n	8000912 <HAL_GPIO_Init+0x16e>
 80008ec:	f8df 906c 	ldr.w	r9, [pc, #108]	; 800095c <HAL_GPIO_Init+0x1b8>
 80008f0:	454d      	cmp	r5, r9
 80008f2:	d004      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 80008f4:	f509 3980 	add.w	r9, r9, #65536	; 0x10000
 80008f8:	454d      	cmp	r5, r9
 80008fa:	f47f af75 	bne.w	80007e8 <HAL_GPIO_Init+0x44>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80008fe:	688a      	ldr	r2, [r1, #8]
 8000900:	b1c2      	cbz	r2, 8000934 <HAL_GPIO_Init+0x190>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000902:	2a01      	cmp	r2, #1
            GPIOx->BSRR = ioposition;
 8000904:	bf0c      	ite	eq
 8000906:	f8c0 8010 	streq.w	r8, [r0, #16]
            GPIOx->BRR = ioposition;
 800090a:	f8c0 8014 	strne.w	r8, [r0, #20]
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800090e:	2208      	movs	r2, #8
 8000910:	e76a      	b.n	80007e8 <HAL_GPIO_Init+0x44>
      switch (GPIO_Init->Mode)
 8000912:	4575      	cmp	r5, lr
 8000914:	d0f3      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 8000916:	4565      	cmp	r5, ip
 8000918:	d0f1      	beq.n	80008fe <HAL_GPIO_Init+0x15a>
 800091a:	f8df 9044 	ldr.w	r9, [pc, #68]	; 8000960 <HAL_GPIO_Init+0x1bc>
 800091e:	e7eb      	b.n	80008f8 <HAL_GPIO_Init+0x154>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000920:	2200      	movs	r2, #0
 8000922:	e761      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000924:	68ca      	ldr	r2, [r1, #12]
          break;
 8000926:	e75f      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000928:	68ca      	ldr	r2, [r1, #12]
 800092a:	3208      	adds	r2, #8
          break;
 800092c:	e75c      	b.n	80007e8 <HAL_GPIO_Init+0x44>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800092e:	68ca      	ldr	r2, [r1, #12]
 8000930:	320c      	adds	r2, #12
          break;
 8000932:	e759      	b.n	80007e8 <HAL_GPIO_Init+0x44>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000934:	2204      	movs	r2, #4
 8000936:	e757      	b.n	80007e8 <HAL_GPIO_Init+0x44>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000938:	2500      	movs	r5, #0
 800093a:	e7a2      	b.n	8000882 <HAL_GPIO_Init+0xde>
 800093c:	2501      	movs	r5, #1
 800093e:	e7a0      	b.n	8000882 <HAL_GPIO_Init+0xde>
 8000940:	2502      	movs	r5, #2
 8000942:	e79e      	b.n	8000882 <HAL_GPIO_Init+0xde>
 8000944:	40010400 	.word	0x40010400
 8000948:	40021000 	.word	0x40021000
 800094c:	40010800 	.word	0x40010800
 8000950:	10210000 	.word	0x10210000
 8000954:	10310000 	.word	0x10310000
 8000958:	10320000 	.word	0x10320000
 800095c:	10110000 	.word	0x10110000
 8000960:	10220000 	.word	0x10220000

08000964 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000964:	6883      	ldr	r3, [r0, #8]
 8000966:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8000968:	bf14      	ite	ne
 800096a:	2001      	movne	r0, #1
 800096c:	2000      	moveq	r0, #0
 800096e:	4770      	bx	lr

08000970 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000970:	b10a      	cbz	r2, 8000976 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000972:	6101      	str	r1, [r0, #16]
 8000974:	4770      	bx	lr
 8000976:	0409      	lsls	r1, r1, #16
 8000978:	e7fb      	b.n	8000972 <HAL_GPIO_WritePin+0x2>
	...

0800097c <HAL_RCC_OscConfig>:
  /* Check the parameters */
  assert_param(RCC_OscInitStruct != NULL);
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800097c:	6803      	ldr	r3, [r0, #0]
{
 800097e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000982:	07db      	lsls	r3, r3, #31
{
 8000984:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000986:	d410      	bmi.n	80009aa <HAL_RCC_OscConfig+0x2e>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000988:	682b      	ldr	r3, [r5, #0]
 800098a:	079f      	lsls	r7, r3, #30
 800098c:	d45e      	bmi.n	8000a4c <HAL_RCC_OscConfig+0xd0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800098e:	682b      	ldr	r3, [r5, #0]
 8000990:	0719      	lsls	r1, r3, #28
 8000992:	f100 8095 	bmi.w	8000ac0 <HAL_RCC_OscConfig+0x144>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000996:	682b      	ldr	r3, [r5, #0]
 8000998:	075a      	lsls	r2, r3, #29
 800099a:	f100 80bf 	bmi.w	8000b1c <HAL_RCC_OscConfig+0x1a0>

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800099e:	69ea      	ldr	r2, [r5, #28]
 80009a0:	2a00      	cmp	r2, #0
 80009a2:	f040 812d 	bne.w	8000c00 <HAL_RCC_OscConfig+0x284>
    {
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
 80009a6:	2000      	movs	r0, #0
 80009a8:	e014      	b.n	80009d4 <HAL_RCC_OscConfig+0x58>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80009aa:	4c90      	ldr	r4, [pc, #576]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 80009ac:	6863      	ldr	r3, [r4, #4]
 80009ae:	f003 030c 	and.w	r3, r3, #12
 80009b2:	2b04      	cmp	r3, #4
 80009b4:	d007      	beq.n	80009c6 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009b6:	6863      	ldr	r3, [r4, #4]
 80009b8:	f003 030c 	and.w	r3, r3, #12
 80009bc:	2b08      	cmp	r3, #8
 80009be:	d10c      	bne.n	80009da <HAL_RCC_OscConfig+0x5e>
 80009c0:	6863      	ldr	r3, [r4, #4]
 80009c2:	03de      	lsls	r6, r3, #15
 80009c4:	d509      	bpl.n	80009da <HAL_RCC_OscConfig+0x5e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009c6:	6823      	ldr	r3, [r4, #0]
 80009c8:	039c      	lsls	r4, r3, #14
 80009ca:	d5dd      	bpl.n	8000988 <HAL_RCC_OscConfig+0xc>
 80009cc:	686b      	ldr	r3, [r5, #4]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d1da      	bne.n	8000988 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 80009d2:	2001      	movs	r0, #1
}
 80009d4:	b002      	add	sp, #8
 80009d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80009da:	686b      	ldr	r3, [r5, #4]
 80009dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009e0:	d110      	bne.n	8000a04 <HAL_RCC_OscConfig+0x88>
 80009e2:	6823      	ldr	r3, [r4, #0]
 80009e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80009e8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80009ea:	f7ff fbf1 	bl	80001d0 <HAL_GetTick>
 80009ee:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009f0:	6823      	ldr	r3, [r4, #0]
 80009f2:	0398      	lsls	r0, r3, #14
 80009f4:	d4c8      	bmi.n	8000988 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80009f6:	f7ff fbeb 	bl	80001d0 <HAL_GetTick>
 80009fa:	1b80      	subs	r0, r0, r6
 80009fc:	2864      	cmp	r0, #100	; 0x64
 80009fe:	d9f7      	bls.n	80009f0 <HAL_RCC_OscConfig+0x74>
            return HAL_TIMEOUT;
 8000a00:	2003      	movs	r0, #3
 8000a02:	e7e7      	b.n	80009d4 <HAL_RCC_OscConfig+0x58>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a04:	b99b      	cbnz	r3, 8000a2e <HAL_RCC_OscConfig+0xb2>
 8000a06:	6823      	ldr	r3, [r4, #0]
 8000a08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a0c:	6023      	str	r3, [r4, #0]
 8000a0e:	6823      	ldr	r3, [r4, #0]
 8000a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a14:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8000a16:	f7ff fbdb 	bl	80001d0 <HAL_GetTick>
 8000a1a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a1c:	6823      	ldr	r3, [r4, #0]
 8000a1e:	0399      	lsls	r1, r3, #14
 8000a20:	d5b2      	bpl.n	8000988 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a22:	f7ff fbd5 	bl	80001d0 <HAL_GetTick>
 8000a26:	1b80      	subs	r0, r0, r6
 8000a28:	2864      	cmp	r0, #100	; 0x64
 8000a2a:	d9f7      	bls.n	8000a1c <HAL_RCC_OscConfig+0xa0>
 8000a2c:	e7e8      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000a32:	6823      	ldr	r3, [r4, #0]
 8000a34:	d103      	bne.n	8000a3e <HAL_RCC_OscConfig+0xc2>
 8000a36:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a3a:	6023      	str	r3, [r4, #0]
 8000a3c:	e7d1      	b.n	80009e2 <HAL_RCC_OscConfig+0x66>
 8000a3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a42:	6023      	str	r3, [r4, #0]
 8000a44:	6823      	ldr	r3, [r4, #0]
 8000a46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a4a:	e7cd      	b.n	80009e8 <HAL_RCC_OscConfig+0x6c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000a4c:	4c67      	ldr	r4, [pc, #412]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000a4e:	6863      	ldr	r3, [r4, #4]
 8000a50:	f013 0f0c 	tst.w	r3, #12
 8000a54:	d007      	beq.n	8000a66 <HAL_RCC_OscConfig+0xea>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000a56:	6863      	ldr	r3, [r4, #4]
 8000a58:	f003 030c 	and.w	r3, r3, #12
 8000a5c:	2b08      	cmp	r3, #8
 8000a5e:	d110      	bne.n	8000a82 <HAL_RCC_OscConfig+0x106>
 8000a60:	6863      	ldr	r3, [r4, #4]
 8000a62:	03da      	lsls	r2, r3, #15
 8000a64:	d40d      	bmi.n	8000a82 <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000a66:	6823      	ldr	r3, [r4, #0]
 8000a68:	079b      	lsls	r3, r3, #30
 8000a6a:	d502      	bpl.n	8000a72 <HAL_RCC_OscConfig+0xf6>
 8000a6c:	692b      	ldr	r3, [r5, #16]
 8000a6e:	2b01      	cmp	r3, #1
 8000a70:	d1af      	bne.n	80009d2 <HAL_RCC_OscConfig+0x56>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000a72:	6823      	ldr	r3, [r4, #0]
 8000a74:	696a      	ldr	r2, [r5, #20]
 8000a76:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8000a7a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a7e:	6023      	str	r3, [r4, #0]
 8000a80:	e785      	b.n	800098e <HAL_RCC_OscConfig+0x12>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000a82:	692a      	ldr	r2, [r5, #16]
 8000a84:	4b5a      	ldr	r3, [pc, #360]	; (8000bf0 <HAL_RCC_OscConfig+0x274>)
 8000a86:	b16a      	cbz	r2, 8000aa4 <HAL_RCC_OscConfig+0x128>
        __HAL_RCC_HSI_ENABLE();
 8000a88:	2201      	movs	r2, #1
 8000a8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a8c:	f7ff fba0 	bl	80001d0 <HAL_GetTick>
 8000a90:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	079f      	lsls	r7, r3, #30
 8000a96:	d4ec      	bmi.n	8000a72 <HAL_RCC_OscConfig+0xf6>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000a98:	f7ff fb9a 	bl	80001d0 <HAL_GetTick>
 8000a9c:	1b80      	subs	r0, r0, r6
 8000a9e:	2802      	cmp	r0, #2
 8000aa0:	d9f7      	bls.n	8000a92 <HAL_RCC_OscConfig+0x116>
 8000aa2:	e7ad      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
        __HAL_RCC_HSI_DISABLE();
 8000aa4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aa6:	f7ff fb93 	bl	80001d0 <HAL_GetTick>
 8000aaa:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000aac:	6823      	ldr	r3, [r4, #0]
 8000aae:	0798      	lsls	r0, r3, #30
 8000ab0:	f57f af6d 	bpl.w	800098e <HAL_RCC_OscConfig+0x12>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ab4:	f7ff fb8c 	bl	80001d0 <HAL_GetTick>
 8000ab8:	1b80      	subs	r0, r0, r6
 8000aba:	2802      	cmp	r0, #2
 8000abc:	d9f6      	bls.n	8000aac <HAL_RCC_OscConfig+0x130>
 8000abe:	e79f      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000ac0:	69aa      	ldr	r2, [r5, #24]
 8000ac2:	4c4a      	ldr	r4, [pc, #296]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000ac4:	4b4b      	ldr	r3, [pc, #300]	; (8000bf4 <HAL_RCC_OscConfig+0x278>)
 8000ac6:	b1da      	cbz	r2, 8000b00 <HAL_RCC_OscConfig+0x184>
      __HAL_RCC_LSI_ENABLE();
 8000ac8:	2201      	movs	r2, #1
 8000aca:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000acc:	f7ff fb80 	bl	80001d0 <HAL_GetTick>
 8000ad0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ad2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000ad4:	079b      	lsls	r3, r3, #30
 8000ad6:	d50d      	bpl.n	8000af4 <HAL_RCC_OscConfig+0x178>
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8000ad8:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8000adc:	4b46      	ldr	r3, [pc, #280]	; (8000bf8 <HAL_RCC_OscConfig+0x27c>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ae4:	9301      	str	r3, [sp, #4]
  \brief   No Operation
  \details No Operation does nothing. This instruction can be used for code alignment purposes.
 */
__attribute__((always_inline)) __STATIC_INLINE void __NOP(void)
{
  __ASM volatile ("nop");
 8000ae6:	bf00      	nop
  do 
  {
    __NOP();
  } 
  while (Delay --);
 8000ae8:	9b01      	ldr	r3, [sp, #4]
 8000aea:	1e5a      	subs	r2, r3, #1
 8000aec:	9201      	str	r2, [sp, #4]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d1f9      	bne.n	8000ae6 <HAL_RCC_OscConfig+0x16a>
 8000af2:	e750      	b.n	8000996 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000af4:	f7ff fb6c 	bl	80001d0 <HAL_GetTick>
 8000af8:	1b80      	subs	r0, r0, r6
 8000afa:	2802      	cmp	r0, #2
 8000afc:	d9e9      	bls.n	8000ad2 <HAL_RCC_OscConfig+0x156>
 8000afe:	e77f      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
      __HAL_RCC_LSI_DISABLE();
 8000b00:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000b02:	f7ff fb65 	bl	80001d0 <HAL_GetTick>
 8000b06:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000b08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000b0a:	079f      	lsls	r7, r3, #30
 8000b0c:	f57f af43 	bpl.w	8000996 <HAL_RCC_OscConfig+0x1a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000b10:	f7ff fb5e 	bl	80001d0 <HAL_GetTick>
 8000b14:	1b80      	subs	r0, r0, r6
 8000b16:	2802      	cmp	r0, #2
 8000b18:	d9f6      	bls.n	8000b08 <HAL_RCC_OscConfig+0x18c>
 8000b1a:	e771      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000b1c:	4c33      	ldr	r4, [pc, #204]	; (8000bec <HAL_RCC_OscConfig+0x270>)
 8000b1e:	69e3      	ldr	r3, [r4, #28]
 8000b20:	00d8      	lsls	r0, r3, #3
 8000b22:	d424      	bmi.n	8000b6e <HAL_RCC_OscConfig+0x1f2>
      pwrclkchanged = SET;
 8000b24:	2701      	movs	r7, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000b26:	69e3      	ldr	r3, [r4, #28]
 8000b28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b2c:	61e3      	str	r3, [r4, #28]
 8000b2e:	69e3      	ldr	r3, [r4, #28]
 8000b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	9b00      	ldr	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b38:	4e30      	ldr	r6, [pc, #192]	; (8000bfc <HAL_RCC_OscConfig+0x280>)
 8000b3a:	6833      	ldr	r3, [r6, #0]
 8000b3c:	05d9      	lsls	r1, r3, #23
 8000b3e:	d518      	bpl.n	8000b72 <HAL_RCC_OscConfig+0x1f6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b40:	68eb      	ldr	r3, [r5, #12]
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d126      	bne.n	8000b94 <HAL_RCC_OscConfig+0x218>
 8000b46:	6a23      	ldr	r3, [r4, #32]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000b4e:	f7ff fb3f 	bl	80001d0 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b52:	f241 3688 	movw	r6, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8000b56:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000b58:	6a23      	ldr	r3, [r4, #32]
 8000b5a:	079b      	lsls	r3, r3, #30
 8000b5c:	d53f      	bpl.n	8000bde <HAL_RCC_OscConfig+0x262>
    if(pwrclkchanged == SET)
 8000b5e:	2f00      	cmp	r7, #0
 8000b60:	f43f af1d 	beq.w	800099e <HAL_RCC_OscConfig+0x22>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000b64:	69e3      	ldr	r3, [r4, #28]
 8000b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000b6a:	61e3      	str	r3, [r4, #28]
 8000b6c:	e717      	b.n	800099e <HAL_RCC_OscConfig+0x22>
    FlagStatus       pwrclkchanged = RESET;
 8000b6e:	2700      	movs	r7, #0
 8000b70:	e7e2      	b.n	8000b38 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000b72:	6833      	ldr	r3, [r6, #0]
 8000b74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b78:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000b7a:	f7ff fb29 	bl	80001d0 <HAL_GetTick>
 8000b7e:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000b80:	6833      	ldr	r3, [r6, #0]
 8000b82:	05da      	lsls	r2, r3, #23
 8000b84:	d4dc      	bmi.n	8000b40 <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000b86:	f7ff fb23 	bl	80001d0 <HAL_GetTick>
 8000b8a:	eba0 0008 	sub.w	r0, r0, r8
 8000b8e:	2864      	cmp	r0, #100	; 0x64
 8000b90:	d9f6      	bls.n	8000b80 <HAL_RCC_OscConfig+0x204>
 8000b92:	e735      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b94:	b9ab      	cbnz	r3, 8000bc2 <HAL_RCC_OscConfig+0x246>
 8000b96:	6a23      	ldr	r3, [r4, #32]
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000b98:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000b9c:	f023 0301 	bic.w	r3, r3, #1
 8000ba0:	6223      	str	r3, [r4, #32]
 8000ba2:	6a23      	ldr	r3, [r4, #32]
 8000ba4:	f023 0304 	bic.w	r3, r3, #4
 8000ba8:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000baa:	f7ff fb11 	bl	80001d0 <HAL_GetTick>
 8000bae:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000bb0:	6a23      	ldr	r3, [r4, #32]
 8000bb2:	0798      	lsls	r0, r3, #30
 8000bb4:	d5d3      	bpl.n	8000b5e <HAL_RCC_OscConfig+0x1e2>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bb6:	f7ff fb0b 	bl	80001d0 <HAL_GetTick>
 8000bba:	1b80      	subs	r0, r0, r6
 8000bbc:	4540      	cmp	r0, r8
 8000bbe:	d9f7      	bls.n	8000bb0 <HAL_RCC_OscConfig+0x234>
 8000bc0:	e71e      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000bc2:	2b05      	cmp	r3, #5
 8000bc4:	6a23      	ldr	r3, [r4, #32]
 8000bc6:	d103      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x254>
 8000bc8:	f043 0304 	orr.w	r3, r3, #4
 8000bcc:	6223      	str	r3, [r4, #32]
 8000bce:	e7ba      	b.n	8000b46 <HAL_RCC_OscConfig+0x1ca>
 8000bd0:	f023 0301 	bic.w	r3, r3, #1
 8000bd4:	6223      	str	r3, [r4, #32]
 8000bd6:	6a23      	ldr	r3, [r4, #32]
 8000bd8:	f023 0304 	bic.w	r3, r3, #4
 8000bdc:	e7b6      	b.n	8000b4c <HAL_RCC_OscConfig+0x1d0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000bde:	f7ff faf7 	bl	80001d0 <HAL_GetTick>
 8000be2:	eba0 0008 	sub.w	r0, r0, r8
 8000be6:	42b0      	cmp	r0, r6
 8000be8:	d9b6      	bls.n	8000b58 <HAL_RCC_OscConfig+0x1dc>
 8000bea:	e709      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	42420000 	.word	0x42420000
 8000bf4:	42420480 	.word	0x42420480
 8000bf8:	2000000c 	.word	0x2000000c
 8000bfc:	40007000 	.word	0x40007000
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000c00:	4c22      	ldr	r4, [pc, #136]	; (8000c8c <HAL_RCC_OscConfig+0x310>)
 8000c02:	6863      	ldr	r3, [r4, #4]
 8000c04:	f003 030c 	and.w	r3, r3, #12
 8000c08:	2b08      	cmp	r3, #8
 8000c0a:	f43f aee2 	beq.w	80009d2 <HAL_RCC_OscConfig+0x56>
 8000c0e:	2300      	movs	r3, #0
 8000c10:	4e1f      	ldr	r6, [pc, #124]	; (8000c90 <HAL_RCC_OscConfig+0x314>)
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c12:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 8000c14:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000c16:	d12b      	bne.n	8000c70 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8000c18:	f7ff fada 	bl	80001d0 <HAL_GetTick>
 8000c1c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c1e:	6823      	ldr	r3, [r4, #0]
 8000c20:	0199      	lsls	r1, r3, #6
 8000c22:	d41f      	bmi.n	8000c64 <HAL_RCC_OscConfig+0x2e8>
        if(RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8000c24:	6a2b      	ldr	r3, [r5, #32]
 8000c26:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c2a:	d105      	bne.n	8000c38 <HAL_RCC_OscConfig+0x2bc>
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000c2c:	6862      	ldr	r2, [r4, #4]
 8000c2e:	68a9      	ldr	r1, [r5, #8]
 8000c30:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000c34:	430a      	orrs	r2, r1
 8000c36:	6062      	str	r2, [r4, #4]
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000c38:	6a69      	ldr	r1, [r5, #36]	; 0x24
 8000c3a:	6862      	ldr	r2, [r4, #4]
 8000c3c:	430b      	orrs	r3, r1
 8000c3e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000c42:	4313      	orrs	r3, r2
 8000c44:	6063      	str	r3, [r4, #4]
        __HAL_RCC_PLL_ENABLE();
 8000c46:	2301      	movs	r3, #1
 8000c48:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8000c4a:	f7ff fac1 	bl	80001d0 <HAL_GetTick>
 8000c4e:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c50:	6823      	ldr	r3, [r4, #0]
 8000c52:	019a      	lsls	r2, r3, #6
 8000c54:	f53f aea7 	bmi.w	80009a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c58:	f7ff faba 	bl	80001d0 <HAL_GetTick>
 8000c5c:	1b40      	subs	r0, r0, r5
 8000c5e:	2802      	cmp	r0, #2
 8000c60:	d9f6      	bls.n	8000c50 <HAL_RCC_OscConfig+0x2d4>
 8000c62:	e6cd      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c64:	f7ff fab4 	bl	80001d0 <HAL_GetTick>
 8000c68:	1bc0      	subs	r0, r0, r7
 8000c6a:	2802      	cmp	r0, #2
 8000c6c:	d9d7      	bls.n	8000c1e <HAL_RCC_OscConfig+0x2a2>
 8000c6e:	e6c7      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
        tickstart = HAL_GetTick();
 8000c70:	f7ff faae 	bl	80001d0 <HAL_GetTick>
 8000c74:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c76:	6823      	ldr	r3, [r4, #0]
 8000c78:	019b      	lsls	r3, r3, #6
 8000c7a:	f57f ae94 	bpl.w	80009a6 <HAL_RCC_OscConfig+0x2a>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c7e:	f7ff faa7 	bl	80001d0 <HAL_GetTick>
 8000c82:	1b40      	subs	r0, r0, r5
 8000c84:	2802      	cmp	r0, #2
 8000c86:	d9f6      	bls.n	8000c76 <HAL_RCC_OscConfig+0x2fa>
 8000c88:	e6ba      	b.n	8000a00 <HAL_RCC_OscConfig+0x84>
 8000c8a:	bf00      	nop
 8000c8c:	40021000 	.word	0x40021000
 8000c90:	42420060 	.word	0x42420060

08000c94 <HAL_RCC_GetSysClockFreq>:
{
 8000c94:	b530      	push	{r4, r5, lr}
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <HAL_RCC_GetSysClockFreq+0x68>)
{
 8000c98:	b087      	sub	sp, #28
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000c9a:	ac02      	add	r4, sp, #8
 8000c9c:	f103 0510 	add.w	r5, r3, #16
 8000ca0:	4622      	mov	r2, r4
 8000ca2:	6818      	ldr	r0, [r3, #0]
 8000ca4:	6859      	ldr	r1, [r3, #4]
 8000ca6:	3308      	adds	r3, #8
 8000ca8:	c203      	stmia	r2!, {r0, r1}
 8000caa:	42ab      	cmp	r3, r5
 8000cac:	4614      	mov	r4, r2
 8000cae:	d1f7      	bne.n	8000ca0 <HAL_RCC_GetSysClockFreq+0xc>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	f88d 3004 	strb.w	r3, [sp, #4]
 8000cb6:	2302      	movs	r3, #2
  tmpreg = RCC->CFGR;
 8000cb8:	4911      	ldr	r1, [pc, #68]	; (8000d00 <HAL_RCC_GetSysClockFreq+0x6c>)
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000cba:	f88d 3005 	strb.w	r3, [sp, #5]
  tmpreg = RCC->CFGR;
 8000cbe:	684b      	ldr	r3, [r1, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8000cc0:	f003 020c 	and.w	r2, r3, #12
 8000cc4:	2a08      	cmp	r2, #8
 8000cc6:	d117      	bne.n	8000cf8 <HAL_RCC_GetSysClockFreq+0x64>
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cc8:	f3c3 4283 	ubfx	r2, r3, #18, #4
 8000ccc:	a806      	add	r0, sp, #24
 8000cce:	4402      	add	r2, r0
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cd0:	03db      	lsls	r3, r3, #15
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000cd2:	f812 2c10 	ldrb.w	r2, [r2, #-16]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000cd6:	d50c      	bpl.n	8000cf2 <HAL_RCC_GetSysClockFreq+0x5e>
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cd8:	684b      	ldr	r3, [r1, #4]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cda:	480a      	ldr	r0, [pc, #40]	; (8000d04 <HAL_RCC_GetSysClockFreq+0x70>)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000cdc:	f3c3 4340 	ubfx	r3, r3, #17, #1
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000ce0:	4350      	muls	r0, r2
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ce2:	aa06      	add	r2, sp, #24
 8000ce4:	4413      	add	r3, r2
 8000ce6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8000cea:	fbb0 f0f3 	udiv	r0, r0, r3
}
 8000cee:	b007      	add	sp, #28
 8000cf0:	bd30      	pop	{r4, r5, pc}
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8000cf2:	4805      	ldr	r0, [pc, #20]	; (8000d08 <HAL_RCC_GetSysClockFreq+0x74>)
 8000cf4:	4350      	muls	r0, r2
 8000cf6:	e7fa      	b.n	8000cee <HAL_RCC_GetSysClockFreq+0x5a>
      sysclockfreq = HSE_VALUE;
 8000cf8:	4802      	ldr	r0, [pc, #8]	; (8000d04 <HAL_RCC_GetSysClockFreq+0x70>)
  return sysclockfreq;
 8000cfa:	e7f8      	b.n	8000cee <HAL_RCC_GetSysClockFreq+0x5a>
 8000cfc:	08001ed0 	.word	0x08001ed0
 8000d00:	40021000 	.word	0x40021000
 8000d04:	007a1200 	.word	0x007a1200
 8000d08:	003d0900 	.word	0x003d0900

08000d0c <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d0c:	4a54      	ldr	r2, [pc, #336]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
{
 8000d0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d12:	6813      	ldr	r3, [r2, #0]
{
 8000d14:	4605      	mov	r5, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d16:	f003 0307 	and.w	r3, r3, #7
 8000d1a:	428b      	cmp	r3, r1
{
 8000d1c:	460e      	mov	r6, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d1e:	d32a      	bcc.n	8000d76 <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d20:	6829      	ldr	r1, [r5, #0]
 8000d22:	078c      	lsls	r4, r1, #30
 8000d24:	d434      	bmi.n	8000d90 <HAL_RCC_ClockConfig+0x84>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d26:	07ca      	lsls	r2, r1, #31
 8000d28:	d447      	bmi.n	8000dba <HAL_RCC_ClockConfig+0xae>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000d2a:	4a4d      	ldr	r2, [pc, #308]	; (8000e60 <HAL_RCC_ClockConfig+0x154>)
 8000d2c:	6813      	ldr	r3, [r2, #0]
 8000d2e:	f003 0307 	and.w	r3, r3, #7
 8000d32:	429e      	cmp	r6, r3
 8000d34:	f0c0 8082 	bcc.w	8000e3c <HAL_RCC_ClockConfig+0x130>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d38:	682a      	ldr	r2, [r5, #0]
 8000d3a:	4c4a      	ldr	r4, [pc, #296]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
 8000d3c:	f012 0f04 	tst.w	r2, #4
 8000d40:	f040 8087 	bne.w	8000e52 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000d44:	0713      	lsls	r3, r2, #28
 8000d46:	d506      	bpl.n	8000d56 <HAL_RCC_ClockConfig+0x4a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8000d48:	6863      	ldr	r3, [r4, #4]
 8000d4a:	692a      	ldr	r2, [r5, #16]
 8000d4c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000d50:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000d54:	6063      	str	r3, [r4, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8000d56:	f7ff ff9d 	bl	8000c94 <HAL_RCC_GetSysClockFreq>
 8000d5a:	6863      	ldr	r3, [r4, #4]
 8000d5c:	4a42      	ldr	r2, [pc, #264]	; (8000e68 <HAL_RCC_ClockConfig+0x15c>)
 8000d5e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8000d62:	5cd3      	ldrb	r3, [r2, r3]
 8000d64:	40d8      	lsrs	r0, r3
 8000d66:	4b41      	ldr	r3, [pc, #260]	; (8000e6c <HAL_RCC_ClockConfig+0x160>)
 8000d68:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000d6a:	2000      	movs	r0, #0
 8000d6c:	f7ff f9ee 	bl	800014c <HAL_InitTick>
  return HAL_OK;
 8000d70:	2000      	movs	r0, #0
}
 8000d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d76:	6813      	ldr	r3, [r2, #0]
 8000d78:	f023 0307 	bic.w	r3, r3, #7
 8000d7c:	430b      	orrs	r3, r1
 8000d7e:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000d80:	6813      	ldr	r3, [r2, #0]
 8000d82:	f003 0307 	and.w	r3, r3, #7
 8000d86:	4299      	cmp	r1, r3
 8000d88:	d0ca      	beq.n	8000d20 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d92:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000d96:	bf1e      	ittt	ne
 8000d98:	685a      	ldrne	r2, [r3, #4]
 8000d9a:	f442 62e0 	orrne.w	r2, r2, #1792	; 0x700
 8000d9e:	605a      	strne	r2, [r3, #4]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000da0:	0708      	lsls	r0, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000da2:	bf42      	ittt	mi
 8000da4:	685a      	ldrmi	r2, [r3, #4]
 8000da6:	f442 5260 	orrmi.w	r2, r2, #14336	; 0x3800
 8000daa:	605a      	strmi	r2, [r3, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000dac:	685a      	ldr	r2, [r3, #4]
 8000dae:	68a8      	ldr	r0, [r5, #8]
 8000db0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8000db4:	4302      	orrs	r2, r0
 8000db6:	605a      	str	r2, [r3, #4]
 8000db8:	e7b5      	b.n	8000d26 <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dba:	686a      	ldr	r2, [r5, #4]
 8000dbc:	4c29      	ldr	r4, [pc, #164]	; (8000e64 <HAL_RCC_ClockConfig+0x158>)
 8000dbe:	2a01      	cmp	r2, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc0:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000dc2:	d11c      	bne.n	8000dfe <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000dc4:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dc8:	d0df      	beq.n	8000d8a <HAL_RCC_ClockConfig+0x7e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dca:	6863      	ldr	r3, [r4, #4]
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dcc:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000dd0:	f023 0303 	bic.w	r3, r3, #3
 8000dd4:	4313      	orrs	r3, r2
 8000dd6:	6063      	str	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8000dd8:	f7ff f9fa 	bl	80001d0 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ddc:	686b      	ldr	r3, [r5, #4]
    tickstart = HAL_GetTick();
 8000dde:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d114      	bne.n	8000e0e <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000de4:	6863      	ldr	r3, [r4, #4]
 8000de6:	f003 030c 	and.w	r3, r3, #12
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	d09d      	beq.n	8000d2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dee:	f7ff f9ef 	bl	80001d0 <HAL_GetTick>
 8000df2:	1bc0      	subs	r0, r0, r7
 8000df4:	4540      	cmp	r0, r8
 8000df6:	d9f5      	bls.n	8000de4 <HAL_RCC_ClockConfig+0xd8>
          return HAL_TIMEOUT;
 8000df8:	2003      	movs	r0, #3
 8000dfa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000dfe:	2a02      	cmp	r2, #2
 8000e00:	d102      	bne.n	8000e08 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000e02:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8000e06:	e7df      	b.n	8000dc8 <HAL_RCC_ClockConfig+0xbc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e08:	f013 0f02 	tst.w	r3, #2
 8000e0c:	e7dc      	b.n	8000dc8 <HAL_RCC_ClockConfig+0xbc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000e0e:	2b02      	cmp	r3, #2
 8000e10:	d10f      	bne.n	8000e32 <HAL_RCC_ClockConfig+0x126>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000e12:	6863      	ldr	r3, [r4, #4]
 8000e14:	f003 030c 	and.w	r3, r3, #12
 8000e18:	2b08      	cmp	r3, #8
 8000e1a:	d086      	beq.n	8000d2a <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e1c:	f7ff f9d8 	bl	80001d0 <HAL_GetTick>
 8000e20:	1bc0      	subs	r0, r0, r7
 8000e22:	4540      	cmp	r0, r8
 8000e24:	d9f5      	bls.n	8000e12 <HAL_RCC_ClockConfig+0x106>
 8000e26:	e7e7      	b.n	8000df8 <HAL_RCC_ClockConfig+0xec>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000e28:	f7ff f9d2 	bl	80001d0 <HAL_GetTick>
 8000e2c:	1bc0      	subs	r0, r0, r7
 8000e2e:	4540      	cmp	r0, r8
 8000e30:	d8e2      	bhi.n	8000df8 <HAL_RCC_ClockConfig+0xec>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000e32:	6863      	ldr	r3, [r4, #4]
 8000e34:	f013 0f0c 	tst.w	r3, #12
 8000e38:	d1f6      	bne.n	8000e28 <HAL_RCC_ClockConfig+0x11c>
 8000e3a:	e776      	b.n	8000d2a <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e3c:	6813      	ldr	r3, [r2, #0]
 8000e3e:	f023 0307 	bic.w	r3, r3, #7
 8000e42:	4333      	orrs	r3, r6
 8000e44:	6013      	str	r3, [r2, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000e46:	6813      	ldr	r3, [r2, #0]
 8000e48:	f003 0307 	and.w	r3, r3, #7
 8000e4c:	429e      	cmp	r6, r3
 8000e4e:	d19c      	bne.n	8000d8a <HAL_RCC_ClockConfig+0x7e>
 8000e50:	e772      	b.n	8000d38 <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000e52:	6863      	ldr	r3, [r4, #4]
 8000e54:	68e9      	ldr	r1, [r5, #12]
 8000e56:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e5a:	430b      	orrs	r3, r1
 8000e5c:	6063      	str	r3, [r4, #4]
 8000e5e:	e771      	b.n	8000d44 <HAL_RCC_ClockConfig+0x38>
 8000e60:	40022000 	.word	0x40022000
 8000e64:	40021000 	.word	0x40021000
 8000e68:	08001ef0 	.word	0x08001ef0
 8000e6c:	2000000c 	.word	0x2000000c

08000e70 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8000e70:	4b04      	ldr	r3, [pc, #16]	; (8000e84 <HAL_RCC_GetPCLK2Freq+0x14>)
 8000e72:	4a05      	ldr	r2, [pc, #20]	; (8000e88 <HAL_RCC_GetPCLK2Freq+0x18>)
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8000e7a:	5cd3      	ldrb	r3, [r2, r3]
 8000e7c:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8000e7e:	6810      	ldr	r0, [r2, #0]
} 
 8000e80:	40d8      	lsrs	r0, r3
 8000e82:	4770      	bx	lr
 8000e84:	40021000 	.word	0x40021000
 8000e88:	08001f00 	.word	0x08001f00
 8000e8c:	2000000c 	.word	0x2000000c

08000e90 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*------------------------------- RTC/LCD Configuration ------------------------*/ 
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e90:	6803      	ldr	r3, [r0, #0]
{
 8000e92:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e96:	07d9      	lsls	r1, r3, #31
{
 8000e98:	4605      	mov	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8000e9a:	d520      	bpl.n	8000ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9c:	4c35      	ldr	r4, [pc, #212]	; (8000f74 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000e9e:	69e3      	ldr	r3, [r4, #28]
 8000ea0:	00da      	lsls	r2, r3, #3
 8000ea2:	d432      	bmi.n	8000f0a <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
 8000ea4:	2701      	movs	r7, #1
    __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	69e3      	ldr	r3, [r4, #28]
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61e3      	str	r3, [r4, #28]
 8000eae:	69e3      	ldr	r3, [r4, #28]
 8000eb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	9301      	str	r3, [sp, #4]
 8000eb6:	9b01      	ldr	r3, [sp, #4]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb8:	4e2f      	ldr	r6, [pc, #188]	; (8000f78 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8000eba:	6833      	ldr	r3, [r6, #0]
 8000ebc:	05db      	lsls	r3, r3, #23
 8000ebe:	d526      	bpl.n	8000f0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
        }
      }
    }
      
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000ec0:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000ec2:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000ec6:	d136      	bne.n	8000f36 <HAL_RCCEx_PeriphCLKConfig+0xa6>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000ec8:	6a23      	ldr	r3, [r4, #32]
 8000eca:	686a      	ldr	r2, [r5, #4]
 8000ecc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000ed4:	b11f      	cbz	r7, 8000ede <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ed6:	69e3      	ldr	r3, [r4, #28]
 8000ed8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000edc:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8000ede:	6828      	ldr	r0, [r5, #0]
 8000ee0:	0783      	lsls	r3, r0, #30
 8000ee2:	d506      	bpl.n	8000ef2 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));
    
    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000ee6:	68a9      	ldr	r1, [r5, #8]
 8000ee8:	6853      	ldr	r3, [r2, #4]
 8000eea:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eee:	430b      	orrs	r3, r1
 8000ef0:	6053      	str	r3, [r2, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8000ef2:	f010 0010 	ands.w	r0, r0, #16
 8000ef6:	d01b      	beq.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000ef8:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <HAL_RCCEx_PeriphCLKConfig+0xe4>)
 8000efa:	68e9      	ldr	r1, [r5, #12]
 8000efc:	6853      	ldr	r3, [r2, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8000efe:	2000      	movs	r0, #0
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8000f00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000f04:	430b      	orrs	r3, r1
 8000f06:	6053      	str	r3, [r2, #4]
 8000f08:	e012      	b.n	8000f30 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    FlagStatus       pwrclkchanged = RESET;
 8000f0a:	2700      	movs	r7, #0
 8000f0c:	e7d4      	b.n	8000eb8 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f0e:	6833      	ldr	r3, [r6, #0]
 8000f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f14:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8000f16:	f7ff f95b 	bl	80001d0 <HAL_GetTick>
 8000f1a:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f1c:	6833      	ldr	r3, [r6, #0]
 8000f1e:	05d8      	lsls	r0, r3, #23
 8000f20:	d4ce      	bmi.n	8000ec0 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f22:	f7ff f955 	bl	80001d0 <HAL_GetTick>
 8000f26:	eba0 0008 	sub.w	r0, r0, r8
 8000f2a:	2864      	cmp	r0, #100	; 0x64
 8000f2c:	d9f6      	bls.n	8000f1c <HAL_RCCEx_PeriphCLKConfig+0x8c>
          return HAL_TIMEOUT;
 8000f2e:	2003      	movs	r0, #3
}
 8000f30:	b002      	add	sp, #8
 8000f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000f36:	686a      	ldr	r2, [r5, #4]
 8000f38:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000f3c:	4293      	cmp	r3, r2
 8000f3e:	d0c3      	beq.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x38>
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f40:	2001      	movs	r0, #1
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_RCCEx_PeriphCLKConfig+0xec>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f44:	6a23      	ldr	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8000f46:	6010      	str	r0, [r2, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f48:	2000      	movs	r0, #0
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000f4a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000f4e:	6010      	str	r0, [r2, #0]
      RCC->BDCR = temp_reg;
 8000f50:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000f52:	07d9      	lsls	r1, r3, #31
 8000f54:	d5b8      	bpl.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000f56:	f7ff f93b 	bl	80001d0 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f5a:	f241 3888 	movw	r8, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8000f5e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f60:	6a23      	ldr	r3, [r4, #32]
 8000f62:	079a      	lsls	r2, r3, #30
 8000f64:	d4b0      	bmi.n	8000ec8 <HAL_RCCEx_PeriphCLKConfig+0x38>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000f66:	f7ff f933 	bl	80001d0 <HAL_GetTick>
 8000f6a:	1b80      	subs	r0, r0, r6
 8000f6c:	4540      	cmp	r0, r8
 8000f6e:	d9f7      	bls.n	8000f60 <HAL_RCCEx_PeriphCLKConfig+0xd0>
 8000f70:	e7dd      	b.n	8000f2e <HAL_RCCEx_PeriphCLKConfig+0x9e>
 8000f72:	bf00      	nop
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40007000 	.word	0x40007000
 8000f7c:	42420440 	.word	0x42420440

08000f80 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8000f80:	b570      	push	{r4, r5, r6, lr}
 8000f82:	4604      	mov	r4, r0
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f84:	4b35      	ldr	r3, [pc, #212]	; (800105c <HAL_RCCEx_GetPeriphCLKFreq+0xdc>)
{
 8000f86:	b086      	sub	sp, #24
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8000f88:	ad02      	add	r5, sp, #8
 8000f8a:	f103 0610 	add.w	r6, r3, #16
 8000f8e:	462a      	mov	r2, r5
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	6859      	ldr	r1, [r3, #4]
 8000f94:	3308      	adds	r3, #8
 8000f96:	c203      	stmia	r2!, {r0, r1}
 8000f98:	42b3      	cmp	r3, r6
 8000f9a:	4615      	mov	r5, r2
 8000f9c:	d1f7      	bne.n	8000f8e <HAL_RCCEx_GetPeriphCLKFreq+0xe>
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	f88d 3004 	strb.w	r3, [sp, #4]
 8000fa4:	2302      	movs	r3, #2
  uint32_t temp_reg = 0U, frequency = 0U;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));
  
  switch (PeriphClk)
 8000fa6:	429c      	cmp	r4, r3
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8000fa8:	f88d 3005 	strb.w	r3, [sp, #5]
  switch (PeriphClk)
 8000fac:	d047      	beq.n	800103e <HAL_RCCEx_GetPeriphCLKFreq+0xbe>
 8000fae:	2c10      	cmp	r4, #16
 8000fb0:	d017      	beq.n	8000fe2 <HAL_RCCEx_GetPeriphCLKFreq+0x62>
 8000fb2:	2c01      	cmp	r4, #1
 8000fb4:	d14f      	bne.n	8001056 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
    {
      /* Get RCC BDCR configuration ------------------------------------------------------*/
      temp_reg = RCC->BDCR;

      /* Check if LSE is ready if RTC clock selection is LSE */
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000fb6:	f240 3102 	movw	r1, #770	; 0x302
      temp_reg = RCC->BDCR;
 8000fba:	4a29      	ldr	r2, [pc, #164]	; (8001060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000fbc:	6a13      	ldr	r3, [r2, #32]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8000fbe:	4019      	ands	r1, r3
 8000fc0:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
 8000fc4:	d044      	beq.n	8001050 <HAL_RCCEx_GetPeriphCLKFreq+0xd0>
      {
        frequency = LSE_VALUE;
      }
      /* Check if LSI is ready if RTC clock selection is LSI */
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000fc6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8000fca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000fce:	d12d      	bne.n	800102c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
      {
        frequency = LSI_VALUE;
 8000fd0:	f649 4040 	movw	r0, #40000	; 0x9c40
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8000fd4:	6a53      	ldr	r3, [r2, #36]	; 0x24
        frequency = LSI_VALUE;
 8000fd6:	f013 0f02 	tst.w	r3, #2
      }
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
      {
        frequency = HSE_VALUE / 128U;
 8000fda:	bf08      	it	eq
 8000fdc:	2000      	moveq	r0, #0
    {
      break;
    }
  }
  return(frequency);
}
 8000fde:	b006      	add	sp, #24
 8000fe0:	bd70      	pop	{r4, r5, r6, pc}
      temp_reg = RCC->CFGR;
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8000fe4:	6859      	ldr	r1, [r3, #4]
      if (HAL_IS_BIT_SET(RCC->CR,RCC_CR_PLLON))
 8000fe6:	6818      	ldr	r0, [r3, #0]
 8000fe8:	f010 7080 	ands.w	r0, r0, #16777216	; 0x1000000
 8000fec:	d0f7      	beq.n	8000fde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8000fee:	f3c1 4283 	ubfx	r2, r1, #18, #4
 8000ff2:	a806      	add	r0, sp, #24
 8000ff4:	4402      	add	r2, r0
 8000ff6:	f812 0c10 	ldrb.w	r0, [r2, #-16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8000ffa:	03ca      	lsls	r2, r1, #15
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8000ffc:	bf41      	itttt	mi
 8000ffe:	685a      	ldrmi	r2, [r3, #4]
 8001000:	a906      	addmi	r1, sp, #24
 8001002:	f3c2 4240 	ubfxmi	r2, r2, #17, #1
 8001006:	1852      	addmi	r2, r2, r1
 8001008:	bf44      	itt	mi
 800100a:	f812 1c14 	ldrbmi.w	r1, [r2, #-20]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800100e:	4a15      	ldrmi	r2, [pc, #84]	; (8001064 <HAL_RCCEx_GetPeriphCLKFreq+0xe4>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001010:	685b      	ldr	r3, [r3, #4]
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8001012:	bf4c      	ite	mi
 8001014:	fbb2 f2f1 	udivmi	r2, r2, r1
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001018:	4a13      	ldrpl	r2, [pc, #76]	; (8001068 <HAL_RCCEx_GetPeriphCLKFreq+0xe8>)
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 800101a:	025b      	lsls	r3, r3, #9
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800101c:	fb02 f000 	mul.w	r0, r2, r0
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8001020:	d4dd      	bmi.n	8000fde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
          frequency = (pllclk * 2) / 3;
 8001022:	2303      	movs	r3, #3
 8001024:	0040      	lsls	r0, r0, #1
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8001026:	fbb0 f0f3 	udiv	r0, r0, r3
      break;
 800102a:	e7d8      	b.n	8000fde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 800102c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001030:	d111      	bne.n	8001056 <HAL_RCCEx_GetPeriphCLKFreq+0xd6>
 8001032:	6813      	ldr	r3, [r2, #0]
        frequency = HSE_VALUE / 128U;
 8001034:	f24f 4024 	movw	r0, #62500	; 0xf424
 8001038:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 800103c:	e7cd      	b.n	8000fda <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800103e:	f7ff ff17 	bl	8000e70 <HAL_RCC_GetPCLK2Freq>
 8001042:	4b07      	ldr	r3, [pc, #28]	; (8001060 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>)
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f3c3 3381 	ubfx	r3, r3, #14, #2
 800104a:	3301      	adds	r3, #1
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	e7ea      	b.n	8001026 <HAL_RCCEx_GetPeriphCLKFreq+0xa6>
        frequency = LSE_VALUE;
 8001050:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001054:	e7c3      	b.n	8000fde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
        frequency = 0U;
 8001056:	2000      	movs	r0, #0
 8001058:	e7c1      	b.n	8000fde <HAL_RCCEx_GetPeriphCLKFreq+0x5e>
 800105a:	bf00      	nop
 800105c:	08001ee0 	.word	0x08001ee0
 8001060:	40021000 	.word	0x40021000
 8001064:	007a1200 	.word	0x007a1200
 8001068:	003d0900 	.word	0x003d0900

0800106c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800106c:	6a03      	ldr	r3, [r0, #32]
{
 800106e:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001070:	f023 0301 	bic.w	r3, r3, #1
 8001074:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001076:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001078:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800107a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800107c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800107e:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8001082:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001084:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8001086:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 800108a:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800108c:	4d0a      	ldr	r5, [pc, #40]	; (80010b8 <TIM_OC1_SetConfig+0x4c>)
 800108e:	42a8      	cmp	r0, r5
 8001090:	d10b      	bne.n	80010aa <TIM_OC1_SetConfig+0x3e>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001092:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8001094:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8001098:	432b      	orrs	r3, r5
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800109a:	698e      	ldr	r6, [r1, #24]
 800109c:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800109e:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80010a2:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 80010a4:	f023 0304 	bic.w	r3, r3, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80010a8:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80010aa:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80010ac:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80010ae:	684a      	ldr	r2, [r1, #4]
 80010b0:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80010b2:	6203      	str	r3, [r0, #32]
 80010b4:	bd70      	pop	{r4, r5, r6, pc}
 80010b6:	bf00      	nop
 80010b8:	40012c00 	.word	0x40012c00

080010bc <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010bc:	6a03      	ldr	r3, [r0, #32]
{
 80010be:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80010c0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010c4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80010c6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80010c8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80010ca:	69c2      	ldr	r2, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80010cc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80010ce:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80010d2:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80010d4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80010d6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80010da:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80010de:	4d0b      	ldr	r5, [pc, #44]	; (800110c <TIM_OC3_SetConfig+0x50>)
 80010e0:	42a8      	cmp	r0, r5
 80010e2:	d10d      	bne.n	8001100 <TIM_OC3_SetConfig+0x44>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010e4:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80010e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80010ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010ee:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80010f0:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80010f2:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010f6:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80010f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80010fc:	ea44 1405 	orr.w	r4, r4, r5, lsl #4
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001100:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001102:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001104:	684a      	ldr	r2, [r1, #4]
 8001106:	63c2      	str	r2, [r0, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001108:	6203      	str	r3, [r0, #32]
 800110a:	bd70      	pop	{r4, r5, r6, pc}
 800110c:	40012c00 	.word	0x40012c00

08001110 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001110:	6a03      	ldr	r3, [r0, #32]
{
 8001112:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001114:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001118:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800111a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800111c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800111e:	69c2      	ldr	r2, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001120:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001122:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001126:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800112a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 800112c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001130:	ea43 3305 	orr.w	r3, r3, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001134:	4d06      	ldr	r5, [pc, #24]	; (8001150 <TIM_OC4_SetConfig+0x40>)
 8001136:	42a8      	cmp	r0, r5
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001138:	bf02      	ittt	eq
 800113a:	694d      	ldreq	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800113c:	f424 4480 	biceq.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6);
 8001140:	ea44 1485 	orreq.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001144:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001146:	61c2      	str	r2, [r0, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001148:	684a      	ldr	r2, [r1, #4]
 800114a:	6402      	str	r2, [r0, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800114c:	6203      	str	r3, [r0, #32]
 800114e:	bd30      	pop	{r4, r5, pc}
 8001150:	40012c00 	.word	0x40012c00

08001154 <HAL_TIM_Base_Start_IT>:
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001154:	6803      	ldr	r3, [r0, #0]
}
 8001156:	2000      	movs	r0, #0
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001158:	68da      	ldr	r2, [r3, #12]
 800115a:	f042 0201 	orr.w	r2, r2, #1
 800115e:	60da      	str	r2, [r3, #12]
  __HAL_TIM_ENABLE(htim);
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f042 0201 	orr.w	r2, r2, #1
 8001166:	601a      	str	r2, [r3, #0]
}
 8001168:	4770      	bx	lr

0800116a <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800116a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800116e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8001170:	2b01      	cmp	r3, #1
 8001172:	f04f 0302 	mov.w	r3, #2
 8001176:	d01c      	beq.n	80011b2 <HAL_TIM_ConfigClockSource+0x48>
 8001178:	2201      	movs	r2, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800117a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800117e:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(htim);
 8001180:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001184:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001186:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 800118a:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 800118e:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8001190:	680a      	ldr	r2, [r1, #0]
 8001192:	2a40      	cmp	r2, #64	; 0x40
 8001194:	d079      	beq.n	800128a <HAL_TIM_ConfigClockSource+0x120>
 8001196:	d819      	bhi.n	80011cc <HAL_TIM_ConfigClockSource+0x62>
 8001198:	2a10      	cmp	r2, #16
 800119a:	f000 8093 	beq.w	80012c4 <HAL_TIM_ConfigClockSource+0x15a>
 800119e:	d80a      	bhi.n	80011b6 <HAL_TIM_ConfigClockSource+0x4c>
 80011a0:	2a00      	cmp	r2, #0
 80011a2:	f000 8089 	beq.w	80012b8 <HAL_TIM_ConfigClockSource+0x14e>
  htim->State = HAL_TIM_STATE_READY;
 80011a6:	2301      	movs	r3, #1
 80011a8:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80011ac:	2300      	movs	r3, #0
 80011ae:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80011b2:	4618      	mov	r0, r3
}
 80011b4:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80011b6:	2a20      	cmp	r2, #32
 80011b8:	f000 808a 	beq.w	80012d0 <HAL_TIM_ConfigClockSource+0x166>
 80011bc:	2a30      	cmp	r2, #48	; 0x30
 80011be:	d1f2      	bne.n	80011a6 <HAL_TIM_ConfigClockSource+0x3c>
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
  uint32_t tmpsmcr = 0U;

   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 80011c0:	689a      	ldr	r2, [r3, #8]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 80011c2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011c6:	f042 0237 	orr.w	r2, r2, #55	; 0x37
 80011ca:	e036      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 80011cc:	2a70      	cmp	r2, #112	; 0x70
 80011ce:	d036      	beq.n	800123e <HAL_TIM_ConfigClockSource+0xd4>
 80011d0:	d81b      	bhi.n	800120a <HAL_TIM_ConfigClockSource+0xa0>
 80011d2:	2a50      	cmp	r2, #80	; 0x50
 80011d4:	d042      	beq.n	800125c <HAL_TIM_ConfigClockSource+0xf2>
 80011d6:	2a60      	cmp	r2, #96	; 0x60
 80011d8:	d1e5      	bne.n	80011a6 <HAL_TIM_ConfigClockSource+0x3c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011da:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80011dc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011de:	f024 0410 	bic.w	r4, r4, #16
      TIM_TI2_ConfigInputStage(htim->Instance,
 80011e2:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80011e4:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80011e6:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 80011e8:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80011ea:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80011ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80011f2:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80011f6:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80011fa:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 80011fc:	621a      	str	r2, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80011fe:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001200:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001204:	f042 0267 	orr.w	r2, r2, #103	; 0x67
 8001208:	e017      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
  switch (sClockSourceConfig->ClockSource)
 800120a:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 800120e:	d011      	beq.n	8001234 <HAL_TIM_ConfigClockSource+0xca>
 8001210:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001214:	d1c7      	bne.n	80011a6 <HAL_TIM_ConfigClockSource+0x3c>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001216:	688a      	ldr	r2, [r1, #8]
 8001218:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800121a:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800121c:	68c9      	ldr	r1, [r1, #12]
 800121e:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001220:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001224:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001228:	4322      	orrs	r2, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800122a:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001232:	e002      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001234:	689a      	ldr	r2, [r3, #8]
 8001236:	f022 0207 	bic.w	r2, r2, #7
   TIMx->SMCR = tmpsmcr;
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	e7b3      	b.n	80011a6 <HAL_TIM_ConfigClockSource+0x3c>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800123e:	688a      	ldr	r2, [r1, #8]
 8001240:	684d      	ldr	r5, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8001242:	689c      	ldr	r4, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001244:	68c9      	ldr	r1, [r1, #12]
 8001246:	432a      	orrs	r2, r5
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001248:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800124c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001250:	4322      	orrs	r2, r4
  TIMx->SMCR = tmpsmcr;
 8001252:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8001254:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001256:	f042 0277 	orr.w	r2, r2, #119	; 0x77
 800125a:	e7ee      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800125c:	684c      	ldr	r4, [r1, #4]
 800125e:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001260:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001262:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001264:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001268:	f025 0501 	bic.w	r5, r5, #1
 800126c:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800126e:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 8001270:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001272:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001276:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800127a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800127c:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 800127e:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001280:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001284:	f042 0257 	orr.w	r2, r2, #87	; 0x57
 8001288:	e7d7      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800128a:	684c      	ldr	r4, [r1, #4]
 800128c:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800128e:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001290:	6a1d      	ldr	r5, [r3, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001292:	f021 010a 	bic.w	r1, r1, #10
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001296:	f025 0501 	bic.w	r5, r5, #1
 800129a:	621d      	str	r5, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800129c:	699a      	ldr	r2, [r3, #24]
  tmpccer |= TIM_ICPolarity;
 800129e:	4321      	orrs	r1, r4
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80012a0:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80012a4:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80012a8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80012aa:	6219      	str	r1, [r3, #32]
   tmpsmcr = TIMx->SMCR;
 80012ac:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ae:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012b2:	f042 0247 	orr.w	r2, r2, #71	; 0x47
 80012b6:	e7c0      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80012b8:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012ba:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012be:	f042 0207 	orr.w	r2, r2, #7
 80012c2:	e7ba      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80012c4:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012ca:	f042 0217 	orr.w	r2, r2, #23
 80012ce:	e7b4      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>
   tmpsmcr = TIMx->SMCR;
 80012d0:	689a      	ldr	r2, [r3, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80012d2:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80012d6:	f042 0227 	orr.w	r2, r2, #39	; 0x27
 80012da:	e7ae      	b.n	800123a <HAL_TIM_ConfigClockSource+0xd0>

080012dc <HAL_TIM_OC_DelayElapsedCallback>:
 80012dc:	4770      	bx	lr

080012de <HAL_TIM_IC_CaptureCallback>:
 80012de:	4770      	bx	lr

080012e0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80012e0:	4770      	bx	lr

080012e2 <HAL_TIM_TriggerCallback>:
 80012e2:	4770      	bx	lr

080012e4 <HAL_TIM_IRQHandler>:
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012e4:	6803      	ldr	r3, [r0, #0]
{
 80012e6:	b510      	push	{r4, lr}
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012e8:	691a      	ldr	r2, [r3, #16]
{
 80012ea:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80012ec:	0791      	lsls	r1, r2, #30
 80012ee:	d50e      	bpl.n	800130e <HAL_TIM_IRQHandler+0x2a>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 80012f0:	68da      	ldr	r2, [r3, #12]
 80012f2:	0792      	lsls	r2, r2, #30
 80012f4:	d50b      	bpl.n	800130e <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80012f6:	f06f 0202 	mvn.w	r2, #2
 80012fa:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80012fc:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80012fe:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001300:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001302:	079b      	lsls	r3, r3, #30
 8001304:	d077      	beq.n	80013f6 <HAL_TIM_IRQHandler+0x112>
          HAL_TIM_IC_CaptureCallback(htim);
 8001306:	f7ff ffea 	bl	80012de <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800130a:	2300      	movs	r3, #0
 800130c:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	0750      	lsls	r0, r2, #29
 8001314:	d510      	bpl.n	8001338 <HAL_TIM_IRQHandler+0x54>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001316:	68da      	ldr	r2, [r3, #12]
 8001318:	0751      	lsls	r1, r2, #29
 800131a:	d50d      	bpl.n	8001338 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800131c:	f06f 0204 	mvn.w	r2, #4
 8001320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001322:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001324:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001326:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001328:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800132c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800132e:	d068      	beq.n	8001402 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001330:	f7ff ffd5 	bl	80012de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001334:	2300      	movs	r3, #0
 8001336:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001338:	6823      	ldr	r3, [r4, #0]
 800133a:	691a      	ldr	r2, [r3, #16]
 800133c:	0712      	lsls	r2, r2, #28
 800133e:	d50f      	bpl.n	8001360 <HAL_TIM_IRQHandler+0x7c>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001340:	68da      	ldr	r2, [r3, #12]
 8001342:	0710      	lsls	r0, r2, #28
 8001344:	d50c      	bpl.n	8001360 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001346:	f06f 0208 	mvn.w	r2, #8
 800134a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800134c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800134e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001350:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001352:	0799      	lsls	r1, r3, #30
        HAL_TIM_IC_CaptureCallback(htim);
 8001354:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001356:	d05a      	beq.n	800140e <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001358:	f7ff ffc1 	bl	80012de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800135c:	2300      	movs	r3, #0
 800135e:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001360:	6823      	ldr	r3, [r4, #0]
 8001362:	691a      	ldr	r2, [r3, #16]
 8001364:	06d2      	lsls	r2, r2, #27
 8001366:	d510      	bpl.n	800138a <HAL_TIM_IRQHandler+0xa6>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001368:	68da      	ldr	r2, [r3, #12]
 800136a:	06d0      	lsls	r0, r2, #27
 800136c:	d50d      	bpl.n	800138a <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800136e:	f06f 0210 	mvn.w	r2, #16
 8001372:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001374:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001376:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001378:	7722      	strb	r2, [r4, #28]
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800137a:	f413 7f40 	tst.w	r3, #768	; 0x300
        HAL_TIM_IC_CaptureCallback(htim);
 800137e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001380:	d04b      	beq.n	800141a <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001382:	f7ff ffac 	bl	80012de <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001386:	2300      	movs	r3, #0
 8001388:	7723      	strb	r3, [r4, #28]
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800138a:	6823      	ldr	r3, [r4, #0]
 800138c:	691a      	ldr	r2, [r3, #16]
 800138e:	07d1      	lsls	r1, r2, #31
 8001390:	d508      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0xc0>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001392:	68da      	ldr	r2, [r3, #12]
 8001394:	07d2      	lsls	r2, r2, #31
 8001396:	d505      	bpl.n	80013a4 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001398:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800139c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800139e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80013a0:	f000 f9e0 	bl	8001764 <HAL_TIM_PeriodElapsedCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80013a4:	6823      	ldr	r3, [r4, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	0610      	lsls	r0, r2, #24
 80013aa:	d508      	bpl.n	80013be <HAL_TIM_IRQHandler+0xda>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80013ac:	68da      	ldr	r2, [r3, #12]
 80013ae:	0611      	lsls	r1, r2, #24
 80013b0:	d505      	bpl.n	80013be <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013b2:	f06f 0280 	mvn.w	r2, #128	; 0x80
      HAL_TIMEx_BreakCallback(htim);
 80013b6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80013b8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80013ba:	f000 f99a 	bl	80016f2 <HAL_TIMEx_BreakCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80013be:	6823      	ldr	r3, [r4, #0]
 80013c0:	691a      	ldr	r2, [r3, #16]
 80013c2:	0652      	lsls	r2, r2, #25
 80013c4:	d508      	bpl.n	80013d8 <HAL_TIM_IRQHandler+0xf4>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80013c6:	68da      	ldr	r2, [r3, #12]
 80013c8:	0650      	lsls	r0, r2, #25
 80013ca:	d505      	bpl.n	80013d8 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013cc:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80013d0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80013d2:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80013d4:	f7ff ff85 	bl	80012e2 <HAL_TIM_TriggerCallback>
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80013d8:	6823      	ldr	r3, [r4, #0]
 80013da:	691a      	ldr	r2, [r3, #16]
 80013dc:	0691      	lsls	r1, r2, #26
 80013de:	d522      	bpl.n	8001426 <HAL_TIM_IRQHandler+0x142>
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 80013e0:	68da      	ldr	r2, [r3, #12]
 80013e2:	0692      	lsls	r2, r2, #26
 80013e4:	d51f      	bpl.n	8001426 <HAL_TIM_IRQHandler+0x142>
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013e6:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 80013ea:	4620      	mov	r0, r4
}
 80013ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80013f0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 80013f2:	f000 b97d 	b.w	80016f0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80013f6:	f7ff ff71 	bl	80012dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013fa:	4620      	mov	r0, r4
 80013fc:	f7ff ff70 	bl	80012e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001400:	e783      	b.n	800130a <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001402:	f7ff ff6b 	bl	80012dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff ff6a 	bl	80012e0 <HAL_TIM_PWM_PulseFinishedCallback>
 800140c:	e792      	b.n	8001334 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800140e:	f7ff ff65 	bl	80012dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001412:	4620      	mov	r0, r4
 8001414:	f7ff ff64 	bl	80012e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001418:	e7a0      	b.n	800135c <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800141a:	f7ff ff5f 	bl	80012dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800141e:	4620      	mov	r0, r4
 8001420:	f7ff ff5e 	bl	80012e0 <HAL_TIM_PWM_PulseFinishedCallback>
 8001424:	e7af      	b.n	8001386 <HAL_TIM_IRQHandler+0xa2>
 8001426:	bd10      	pop	{r4, pc}

08001428 <TIM_Base_SetConfig>:
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001428:	4a1a      	ldr	r2, [pc, #104]	; (8001494 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800142a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800142c:	4290      	cmp	r0, r2
 800142e:	d00a      	beq.n	8001446 <TIM_Base_SetConfig+0x1e>
 8001430:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001434:	d007      	beq.n	8001446 <TIM_Base_SetConfig+0x1e>
 8001436:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800143a:	4290      	cmp	r0, r2
 800143c:	d003      	beq.n	8001446 <TIM_Base_SetConfig+0x1e>
 800143e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001442:	4290      	cmp	r0, r2
 8001444:	d115      	bne.n	8001472 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= Structure->CounterMode;
 8001446:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800144c:	4313      	orrs	r3, r2
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800144e:	4a11      	ldr	r2, [pc, #68]	; (8001494 <TIM_Base_SetConfig+0x6c>)
 8001450:	4290      	cmp	r0, r2
 8001452:	d00a      	beq.n	800146a <TIM_Base_SetConfig+0x42>
 8001454:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8001458:	d007      	beq.n	800146a <TIM_Base_SetConfig+0x42>
 800145a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800145e:	4290      	cmp	r0, r2
 8001460:	d003      	beq.n	800146a <TIM_Base_SetConfig+0x42>
 8001462:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001466:	4290      	cmp	r0, r2
 8001468:	d103      	bne.n	8001472 <TIM_Base_SetConfig+0x4a>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800146a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800146c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001470:	4313      	orrs	r3, r2
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001472:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8001474:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8001478:	4313      	orrs	r3, r2
  TIMx->CR1 = tmpcr1;
 800147a:	6003      	str	r3, [r0, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800147c:	688b      	ldr	r3, [r1, #8]
 800147e:	62c3      	str	r3, [r0, #44]	; 0x2c
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001480:	680b      	ldr	r3, [r1, #0]
 8001482:	6283      	str	r3, [r0, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001484:	4b03      	ldr	r3, [pc, #12]	; (8001494 <TIM_Base_SetConfig+0x6c>)
 8001486:	4298      	cmp	r0, r3
    TIMx->RCR = Structure->RepetitionCounter;
 8001488:	bf04      	itt	eq
 800148a:	690b      	ldreq	r3, [r1, #16]
 800148c:	6303      	streq	r3, [r0, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 800148e:	2301      	movs	r3, #1
 8001490:	6143      	str	r3, [r0, #20]
 8001492:	4770      	bx	lr
 8001494:	40012c00 	.word	0x40012c00

08001498 <HAL_TIM_Base_Init>:
{
 8001498:	b510      	push	{r4, lr}
  if(htim == NULL)
 800149a:	4604      	mov	r4, r0
 800149c:	b1a0      	cbz	r0, 80014c8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800149e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014a6:	b91b      	cbnz	r3, 80014b0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014a8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80014ac:	f000 fc38 	bl	8001d20 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014b0:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b2:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80014b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014b8:	1d21      	adds	r1, r4, #4
 80014ba:	f7ff ffb5 	bl	8001428 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014be:	2301      	movs	r3, #1
  return HAL_OK;
 80014c0:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014c2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014c6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
}
 80014ca:	bd10      	pop	{r4, pc}

080014cc <HAL_TIM_PWM_Init>:
{
 80014cc:	b510      	push	{r4, lr}
  if(htim == NULL)
 80014ce:	4604      	mov	r4, r0
 80014d0:	b1a0      	cbz	r0, 80014fc <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 80014d2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80014d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80014da:	b91b      	cbnz	r3, 80014e4 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80014dc:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80014e0:	f000 fc0a 	bl	8001cf8 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80014e4:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014e6:	6820      	ldr	r0, [r4, #0]
  htim->State= HAL_TIM_STATE_BUSY;
 80014e8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80014ec:	1d21      	adds	r1, r4, #4
 80014ee:	f7ff ff9b 	bl	8001428 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80014f2:	2301      	movs	r3, #1
  return HAL_OK;
 80014f4:	2000      	movs	r0, #0
  htim->State= HAL_TIM_STATE_READY;
 80014f6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80014fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80014fc:	2001      	movs	r0, #1
}
 80014fe:	bd10      	pop	{r4, pc}

08001500 <TIM_OC2_SetConfig>:
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001500:	6a03      	ldr	r3, [r0, #32]
{
 8001502:	b570      	push	{r4, r5, r6, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001504:	f023 0310 	bic.w	r3, r3, #16
 8001508:	6203      	str	r3, [r0, #32]
  tmpccer = TIMx->CCER;
 800150a:	6a03      	ldr	r3, [r0, #32]
  tmpcr2 =  TIMx->CR2;
 800150c:	6844      	ldr	r4, [r0, #4]
  tmpccmrx = TIMx->CCMR1;
 800150e:	6982      	ldr	r2, [r0, #24]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001510:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001512:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001516:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800151a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800151c:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001520:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001524:	4d0b      	ldr	r5, [pc, #44]	; (8001554 <TIM_OC2_SetConfig+0x54>)
 8001526:	42a8      	cmp	r0, r5
 8001528:	d10d      	bne.n	8001546 <TIM_OC2_SetConfig+0x46>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800152a:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800152c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001530:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001534:	698e      	ldr	r6, [r1, #24]
    tmpcr2 |= (OC_Config->OCIdleState << 2);
 8001536:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8001538:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 800153c:	4335      	orrs	r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800153e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2);
 8001542:	ea44 0485 	orr.w	r4, r4, r5, lsl #2
  TIMx->CR2 = tmpcr2;
 8001546:	6044      	str	r4, [r0, #4]
  TIMx->CCMR1 = tmpccmrx;
 8001548:	6182      	str	r2, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 800154a:	684a      	ldr	r2, [r1, #4]
 800154c:	6382      	str	r2, [r0, #56]	; 0x38
  TIMx->CCER = tmpccer;
 800154e:	6203      	str	r3, [r0, #32]
 8001550:	bd70      	pop	{r4, r5, r6, pc}
 8001552:	bf00      	nop
 8001554:	40012c00 	.word	0x40012c00

08001558 <HAL_TIM_PWM_ConfigChannel>:
{
 8001558:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 800155a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800155e:	4604      	mov	r4, r0
  __HAL_LOCK(htim);
 8001560:	2b01      	cmp	r3, #1
 8001562:	f04f 0002 	mov.w	r0, #2
 8001566:	d025      	beq.n	80015b4 <HAL_TIM_PWM_ConfigChannel+0x5c>
 8001568:	2301      	movs	r3, #1
  htim->State = HAL_TIM_STATE_BUSY;
 800156a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  __HAL_LOCK(htim);
 800156e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  switch (Channel)
 8001572:	2a0c      	cmp	r2, #12
 8001574:	d818      	bhi.n	80015a8 <HAL_TIM_PWM_ConfigChannel+0x50>
 8001576:	e8df f002 	tbb	[pc, r2]
 800157a:	1707      	.short	0x1707
 800157c:	171e1717 	.word	0x171e1717
 8001580:	172f1717 	.word	0x172f1717
 8001584:	1717      	.short	0x1717
 8001586:	40          	.byte	0x40
 8001587:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001588:	6820      	ldr	r0, [r4, #0]
 800158a:	f7ff fd6f 	bl	800106c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800158e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001590:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001592:	699a      	ldr	r2, [r3, #24]
 8001594:	f042 0208 	orr.w	r2, r2, #8
 8001598:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800159a:	699a      	ldr	r2, [r3, #24]
 800159c:	f022 0204 	bic.w	r2, r2, #4
 80015a0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80015a2:	699a      	ldr	r2, [r3, #24]
 80015a4:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80015a6:	619a      	str	r2, [r3, #24]
  htim->State = HAL_TIM_STATE_READY;
 80015a8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80015aa:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80015ac:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80015b0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80015b4:	bd38      	pop	{r3, r4, r5, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80015b6:	6820      	ldr	r0, [r4, #0]
 80015b8:	f7ff ffa2 	bl	8001500 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015bc:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80015be:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80015c0:	699a      	ldr	r2, [r3, #24]
 80015c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80015c8:	699a      	ldr	r2, [r3, #24]
 80015ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8;
 80015d0:	699a      	ldr	r2, [r3, #24]
 80015d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80015d6:	e7e6      	b.n	80015a6 <HAL_TIM_PWM_ConfigChannel+0x4e>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80015d8:	6820      	ldr	r0, [r4, #0]
 80015da:	f7ff fd6f 	bl	80010bc <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015de:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015e0:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80015e2:	69da      	ldr	r2, [r3, #28]
 80015e4:	f042 0208 	orr.w	r2, r2, #8
 80015e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80015ea:	69da      	ldr	r2, [r3, #28]
 80015ec:	f022 0204 	bic.w	r2, r2, #4
 80015f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80015f2:	69da      	ldr	r2, [r3, #28]
 80015f4:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 80015f6:	61da      	str	r2, [r3, #28]
    break;
 80015f8:	e7d6      	b.n	80015a8 <HAL_TIM_PWM_ConfigChannel+0x50>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80015fa:	6820      	ldr	r0, [r4, #0]
 80015fc:	f7ff fd88 	bl	8001110 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001600:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001602:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001604:	69da      	ldr	r2, [r3, #28]
 8001606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800160a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800160c:	69da      	ldr	r2, [r3, #28]
 800160e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001612:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8;
 8001614:	69da      	ldr	r2, [r3, #28]
 8001616:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800161a:	e7ec      	b.n	80015f6 <HAL_TIM_PWM_ConfigChannel+0x9e>

0800161c <TIM_CCxChannelCmd>:
  * @param  ChannelState : specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_Disable.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef* TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800161c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;
 800161e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001620:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << Channel;
 8001622:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8001624:	ea23 0304 	bic.w	r3, r3, r4
 8001628:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 800162a:	6a03      	ldr	r3, [r0, #32]
 800162c:	408a      	lsls	r2, r1
 800162e:	431a      	orrs	r2, r3
 8001630:	6202      	str	r2, [r0, #32]
 8001632:	bd10      	pop	{r4, pc}

08001634 <HAL_TIM_PWM_Start>:
{
 8001634:	b510      	push	{r4, lr}
 8001636:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001638:	2201      	movs	r2, #1
 800163a:	6800      	ldr	r0, [r0, #0]
 800163c:	f7ff ffee 	bl	800161c <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001640:	6823      	ldr	r3, [r4, #0]
 8001642:	4a06      	ldr	r2, [pc, #24]	; (800165c <HAL_TIM_PWM_Start+0x28>)
}
 8001644:	2000      	movs	r0, #0
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001646:	4293      	cmp	r3, r2
    __HAL_TIM_MOE_ENABLE(htim);
 8001648:	bf02      	ittt	eq
 800164a:	6c5a      	ldreq	r2, [r3, #68]	; 0x44
 800164c:	f442 4200 	orreq.w	r2, r2, #32768	; 0x8000
 8001650:	645a      	streq	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 8001652:	681a      	ldr	r2, [r3, #0]
 8001654:	f042 0201 	orr.w	r2, r2, #1
 8001658:	601a      	str	r2, [r3, #0]
}
 800165a:	bd10      	pop	{r4, pc}
 800165c:	40012c00 	.word	0x40012c00

08001660 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001660:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001664:	2b01      	cmp	r3, #1
 8001666:	d01f      	beq.n	80016a8 <HAL_TIMEx_ConfigBreakDeadTime+0x48>
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8001668:	68cb      	ldr	r3, [r1, #12]
 800166a:	688a      	ldr	r2, [r1, #8]
 800166c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001670:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8001672:	684a      	ldr	r2, [r1, #4]
 8001674:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001678:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800167a:	680a      	ldr	r2, [r1, #0]
 800167c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8001680:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8001682:	690a      	ldr	r2, [r1, #16]
 8001684:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001688:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800168a:	694a      	ldr	r2, [r1, #20]
 800168c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001690:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001692:	698a      	ldr	r2, [r1, #24]
  MODIFY_REG(tmpbdtr, TIM_BDTR_MOE, sBreakDeadTimeConfig->AutomaticOutput);
 8001694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001698:	4313      	orrs	r3, r2

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800169a:	6802      	ldr	r2, [r0, #0]
 800169c:	6453      	str	r3, [r2, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800169e:	2300      	movs	r3, #0
 80016a0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80016a4:	4618      	mov	r0, r3
 80016a6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80016a8:	2002      	movs	r0, #2
}
 80016aa:	4770      	bx	lr

080016ac <HAL_TIMEx_MasterConfigSynchronization>:
  /* Check the parameters */
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  __HAL_LOCK(htim);
 80016ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80016b0:	b510      	push	{r4, lr}
  __HAL_LOCK(htim);
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	f04f 0302 	mov.w	r3, #2
 80016b8:	d018      	beq.n	80016ec <HAL_TIMEx_MasterConfigSynchronization+0x40>

  htim->State = HAL_TIM_STATE_BUSY;
 80016ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  /* Reset the MMS Bits */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016be:	6803      	ldr	r3, [r0, #0]
  /* Select the TRGO source */
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80016c0:	680c      	ldr	r4, [r1, #0]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016c2:	685a      	ldr	r2, [r3, #4]

  /* Reset the MSM Bit */
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
  /* Set or Reset the MSM Bit */
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016c4:	6849      	ldr	r1, [r1, #4]
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80016c6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80016ca:	605a      	str	r2, [r3, #4]
  htim->Instance->CR2 |=  sMasterConfig->MasterOutputTrigger;
 80016cc:	685a      	ldr	r2, [r3, #4]
 80016ce:	4322      	orrs	r2, r4
 80016d0:	605a      	str	r2, [r3, #4]
  htim->Instance->SMCR &= ~TIM_SMCR_MSM;
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016d8:	609a      	str	r2, [r3, #8]
  htim->Instance->SMCR |= sMasterConfig->MasterSlaveMode;
 80016da:	689a      	ldr	r2, [r3, #8]
 80016dc:	430a      	orrs	r2, r1
 80016de:	609a      	str	r2, [r3, #8]

  htim->State = HAL_TIM_STATE_READY;
 80016e0:	2301      	movs	r3, #1
 80016e2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80016e6:	2300      	movs	r3, #0
 80016e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  __HAL_LOCK(htim);
 80016ec:	4618      	mov	r0, r3

  return HAL_OK;
}
 80016ee:	bd10      	pop	{r4, pc}

080016f0 <HAL_TIMEx_CommutationCallback>:
 80016f0:	4770      	bx	lr

080016f2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode
  * @param  htim : TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80016f2:	4770      	bx	lr

080016f4 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016f4:	2228      	movs	r2, #40	; 0x28
{
 80016f6:	b510      	push	{r4, lr}
 80016f8:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016fa:	eb0d 0002 	add.w	r0, sp, r2
 80016fe:	2100      	movs	r1, #0
 8001700:	f000 fbd2 	bl	8001ea8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001704:	2214      	movs	r2, #20
 8001706:	2100      	movs	r1, #0
 8001708:	eb0d 0002 	add.w	r0, sp, r2
 800170c:	f000 fbcc 	bl	8001ea8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001710:	2100      	movs	r1, #0
 8001712:	2210      	movs	r2, #16
 8001714:	a801      	add	r0, sp, #4
 8001716:	f000 fbc7 	bl	8001ea8 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800171a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800171e:	2402      	movs	r4, #2
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001720:	2201      	movs	r2, #1
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001722:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001724:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001726:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800172a:	a80a      	add	r0, sp, #40	; 0x28
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800172c:	920a      	str	r2, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800172e:	920e      	str	r2, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001730:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001732:	9411      	str	r4, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001734:	f7ff f922 	bl	800097c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001738:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800173a:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800173e:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001740:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001742:	4621      	mov	r1, r4
 8001744:	a805      	add	r0, sp, #20
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001746:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001748:	9208      	str	r2, [sp, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800174a:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800174c:	9406      	str	r4, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800174e:	f7ff fadd 	bl	8000d0c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001756:	a801      	add	r0, sp, #4
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001758:	9401      	str	r4, [sp, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800175a:	9303      	str	r3, [sp, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800175c:	f7ff fb98 	bl	8000e90 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001760:	b014      	add	sp, #80	; 0x50
 8001762:	bd10      	pop	{r4, pc}

08001764 <HAL_TIM_PeriodElapsedCallback>:
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
	if(htim->Instance==TIM2){
 8001764:	6803      	ldr	r3, [r0, #0]
 8001766:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800176a:	d10e      	bne.n	800178a <HAL_TIM_PeriodElapsedCallback+0x26>
 800176c:	2300      	movs	r3, #0
		uint16_t i;
		for(i=0;i<=TIMERS;i++){
			if(timers[i]!=0){
 800176e:	4907      	ldr	r1, [pc, #28]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001770:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 8001774:	b292      	uxth	r2, r2
 8001776:	b12a      	cbz	r2, 8001784 <HAL_TIM_PeriodElapsedCallback+0x20>
				timers[i]--;
 8001778:	f831 2013 	ldrh.w	r2, [r1, r3, lsl #1]
 800177c:	3a01      	subs	r2, #1
 800177e:	b292      	uxth	r2, r2
 8001780:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
 8001784:	3301      	adds	r3, #1
		for(i=0;i<=TIMERS;i++){
 8001786:	2b04      	cmp	r3, #4
 8001788:	d1f2      	bne.n	8001770 <HAL_TIM_PeriodElapsedCallback+0xc>
 800178a:	4770      	bx	lr
 800178c:	2000003c 	.word	0x2000003c

08001790 <Button>:
		st_led1=LED_PAR;
		break;
	}
}*/
void Button(){
	switch(boton){
 8001790:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <Button+0x44>)
void Button(){
 8001792:	b510      	push	{r4, lr}
	switch(boton){
 8001794:	781a      	ldrb	r2, [r3, #0]
 8001796:	461c      	mov	r4, r3
 8001798:	b112      	cbz	r2, 80017a0 <Button+0x10>
 800179a:	2a01      	cmp	r2, #1
 800179c:	d014      	beq.n	80017c8 <Button+0x38>
 800179e:	bd10      	pop	{r4, pc}
	case SB_CHECK:
		  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_9)==1){
 80017a0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80017a4:	480c      	ldr	r0, [pc, #48]	; (80017d8 <Button+0x48>)
 80017a6:	f7ff f8dd 	bl	8000964 <HAL_GPIO_ReadPin>
 80017aa:	2801      	cmp	r0, #1
			  timers[TI]=5001;
 80017ac:	bf08      	it	eq
 80017ae:	f241 3289 	movweq	r2, #5001	; 0x1389
 80017b2:	4b0a      	ldr	r3, [pc, #40]	; (80017dc <Button+0x4c>)
 80017b4:	bf08      	it	eq
 80017b6:	805a      	strheq	r2, [r3, #2]
		  }
		  if(timers[TI]==1){
 80017b8:	885b      	ldrh	r3, [r3, #2]
 80017ba:	b29b      	uxth	r3, r3
 80017bc:	2b01      	cmp	r3, #1
 80017be:	d107      	bne.n	80017d0 <Button+0x40>
			 boton=SB_OPRIMIDO;
			 bandera=1;
 80017c0:	4a07      	ldr	r2, [pc, #28]	; (80017e0 <Button+0x50>)
			 boton=SB_OPRIMIDO;
 80017c2:	7023      	strb	r3, [r4, #0]
			 bandera=1;
 80017c4:	6013      	str	r3, [r2, #0]
 80017c6:	bd10      	pop	{r4, pc}
			}
		break;
	case SB_OPRIMIDO:
		motor1=MOTOR_SEARCH;
 80017c8:	2200      	movs	r2, #0
 80017ca:	4906      	ldr	r1, [pc, #24]	; (80017e4 <Button+0x54>)
		boton=SB_CHECK;
 80017cc:	701a      	strb	r2, [r3, #0]
		motor1=MOTOR_SEARCH;
 80017ce:	700a      	strb	r2, [r1, #0]
 80017d0:	bd10      	pop	{r4, pc}
 80017d2:	bf00      	nop
 80017d4:	20000034 	.word	0x20000034
 80017d8:	40010c00 	.word	0x40010c00
 80017dc:	2000003c 	.word	0x2000003c
 80017e0:	20000030 	.word	0x20000030
 80017e4:	20000009 	.word	0x20000009

080017e8 <Sensor_distancia>:
			break;
	}
}
void Sensor_distancia(){
 80017e8:	b538      	push	{r3, r4, r5, lr}
	switch(distancia){
 80017ea:	4b18      	ldr	r3, [pc, #96]	; (800184c <Sensor_distancia+0x64>)
 80017ec:	781c      	ldrb	r4, [r3, #0]
 80017ee:	461d      	mov	r5, r3
 80017f0:	b334      	cbz	r4, 8001840 <Sensor_distancia+0x58>
 80017f2:	2c01      	cmp	r4, #1
 80017f4:	d129      	bne.n	800184a <Sensor_distancia+0x62>
	case SD_CHECK:
	  	  HAL_ADC_Start(&hadc1);
 80017f6:	4816      	ldr	r0, [pc, #88]	; (8001850 <Sensor_distancia+0x68>)
 80017f8:	f7fe fe4e 	bl	8000498 <HAL_ADC_Start>
	 		 if(HAL_ADC_PollForConversion(&hadc1, 1)==HAL_OK){
 80017fc:	4621      	mov	r1, r4
 80017fe:	4814      	ldr	r0, [pc, #80]	; (8001850 <Sensor_distancia+0x68>)
 8001800:	f7fe fcec 	bl	80001dc <HAL_ADC_PollForConversion>
 8001804:	4c13      	ldr	r4, [pc, #76]	; (8001854 <Sensor_distancia+0x6c>)
 8001806:	b920      	cbnz	r0, 8001812 <Sensor_distancia+0x2a>
	 		  ADC=HAL_ADC_GetValue(&hadc1);
 8001808:	4811      	ldr	r0, [pc, #68]	; (8001850 <Sensor_distancia+0x68>)
 800180a:	f7fe fd85 	bl	8000318 <HAL_ADC_GetValue>
 800180e:	b280      	uxth	r0, r0
 8001810:	8020      	strh	r0, [r4, #0]
	 		 }
	 			HAL_ADC_Stop(&hadc1);
 8001812:	480f      	ldr	r0, [pc, #60]	; (8001850 <Sensor_distancia+0x68>)
 8001814:	f7fe ff44 	bl	80006a0 <HAL_ADC_Stop>
		if(ADC>=730){
 8001818:	f240 22d9 	movw	r2, #729	; 0x2d9
 800181c:	8823      	ldrh	r3, [r4, #0]
 800181e:	b29b      	uxth	r3, r3
 8001820:	4293      	cmp	r3, r2
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	d908      	bls.n	800183a <Sensor_distancia+0x52>
			distancia=SD_DETECT;
 8001828:	702b      	strb	r3, [r5, #0]
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 800182a:	2201      	movs	r2, #1
		motor1=MOTOR_ATTACK;
		distancia=SD_CHECK;
		break;
	}

}
 800182c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			HAL_GPIO_WritePin(GPIOC,GPIO_PIN_13,1);
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4808      	ldr	r0, [pc, #32]	; (8001858 <Sensor_distancia+0x70>)
 8001836:	f7ff b89b 	b.w	8000970 <HAL_GPIO_WritePin>
			motor1=MOTOR_SEARCH;;
 800183a:	4a08      	ldr	r2, [pc, #32]	; (800185c <Sensor_distancia+0x74>)
 800183c:	7013      	strb	r3, [r2, #0]
 800183e:	bd38      	pop	{r3, r4, r5, pc}
		motor1=MOTOR_ATTACK;
 8001840:	2102      	movs	r1, #2
 8001842:	4a06      	ldr	r2, [pc, #24]	; (800185c <Sensor_distancia+0x74>)
 8001844:	7011      	strb	r1, [r2, #0]
		distancia=SD_CHECK;
 8001846:	2201      	movs	r2, #1
 8001848:	701a      	strb	r2, [r3, #0]
 800184a:	bd38      	pop	{r3, r4, r5, pc}
 800184c:	20000008 	.word	0x20000008
 8001850:	20000064 	.word	0x20000064
 8001854:	2000002c 	.word	0x2000002c
 8001858:	40011000 	.word	0x40011000
 800185c:	20000009 	.word	0x20000009

08001860 <Sensores_piso>:
void Sensores_piso(){
 8001860:	b508      	push	{r3, lr}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)==0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==0){
 8001862:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001866:	480a      	ldr	r0, [pc, #40]	; (8001890 <Sensores_piso+0x30>)
 8001868:	f7ff f87c 	bl	8000964 <HAL_GPIO_ReadPin>
 800186c:	b938      	cbnz	r0, 800187e <Sensores_piso+0x1e>
			motor1=MOTOR_OUT;
 800186e:	2205      	movs	r2, #5
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <Sensores_piso+0x34>)
 8001872:	701a      	strb	r2, [r3, #0]
		timers[TR]=700;
 8001874:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <Sensores_piso+0x38>)
 800187a:	809a      	strh	r2, [r3, #4]
 800187c:	bd08      	pop	{r3, pc}
		if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)==0||HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==0){
 800187e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001882:	4803      	ldr	r0, [pc, #12]	; (8001890 <Sensores_piso+0x30>)
 8001884:	f7ff f86e 	bl	8000964 <HAL_GPIO_ReadPin>
 8001888:	2800      	cmp	r0, #0
 800188a:	d0f0      	beq.n	800186e <Sensores_piso+0xe>
 800188c:	bd08      	pop	{r3, pc}
 800188e:	bf00      	nop
 8001890:	40010800 	.word	0x40010800
 8001894:	20000009 	.word	0x20000009
 8001898:	2000003c 	.word	0x2000003c

0800189c <Sensores_piso1>:
		}

}
void Sensores_piso1(){
 800189c:	b510      	push	{r4, lr}
	switch(sensor1){
 800189e:	4c09      	ldr	r4, [pc, #36]	; (80018c4 <Sensores_piso1+0x28>)
 80018a0:	7823      	ldrb	r3, [r4, #0]
 80018a2:	b14b      	cbz	r3, 80018b8 <Sensores_piso1+0x1c>
 80018a4:	2b01      	cmp	r3, #1
 80018a6:	d10c      	bne.n	80018c2 <Sensores_piso1+0x26>
		case SP_CHECK:
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_10)==0){
 80018a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018ac:	4806      	ldr	r0, [pc, #24]	; (80018c8 <Sensores_piso1+0x2c>)
 80018ae:	f7ff f859 	bl	8000964 <HAL_GPIO_ReadPin>
 80018b2:	b930      	cbnz	r0, 80018c2 <Sensores_piso1+0x26>
			sensor1=SP_UP;
 80018b4:	7020      	strb	r0, [r4, #0]
 80018b6:	bd10      	pop	{r4, pc}
			}
			break;
		case SP_UP:
			motor1=MOTOR_DER;
 80018b8:	2203      	movs	r2, #3
 80018ba:	4b04      	ldr	r3, [pc, #16]	; (80018cc <Sensores_piso1+0x30>)
 80018bc:	701a      	strb	r2, [r3, #0]
			sensor1=SP_CHECK;
 80018be:	2301      	movs	r3, #1
 80018c0:	7023      	strb	r3, [r4, #0]
 80018c2:	bd10      	pop	{r4, pc}
 80018c4:	2000000a 	.word	0x2000000a
 80018c8:	40010800 	.word	0x40010800
 80018cc:	20000009 	.word	0x20000009

080018d0 <Sensores_piso2>:
			break;
	}
}
void Sensores_piso2(){
 80018d0:	b510      	push	{r4, lr}
	switch(sensor2){
 80018d2:	4c09      	ldr	r4, [pc, #36]	; (80018f8 <Sensores_piso2+0x28>)
 80018d4:	7823      	ldrb	r3, [r4, #0]
 80018d6:	b14b      	cbz	r3, 80018ec <Sensores_piso2+0x1c>
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d10c      	bne.n	80018f6 <Sensores_piso2+0x26>
		case SP_CHECK:
			if(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_12)==0){
 80018dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80018e0:	4806      	ldr	r0, [pc, #24]	; (80018fc <Sensores_piso2+0x2c>)
 80018e2:	f7ff f83f 	bl	8000964 <HAL_GPIO_ReadPin>
 80018e6:	b930      	cbnz	r0, 80018f6 <Sensores_piso2+0x26>
			sensor2=SP_UP;
 80018e8:	7020      	strb	r0, [r4, #0]
 80018ea:	bd10      	pop	{r4, pc}
			}
			break;
		case SP_UP:
			motor1=MOTOR_IZQ;
 80018ec:	2204      	movs	r2, #4
 80018ee:	4b04      	ldr	r3, [pc, #16]	; (8001900 <Sensores_piso2+0x30>)
 80018f0:	701a      	strb	r2, [r3, #0]
			sensor2=SP_CHECK;
 80018f2:	2301      	movs	r3, #1
 80018f4:	7023      	strb	r3, [r4, #0]
 80018f6:	bd10      	pop	{r4, pc}
 80018f8:	2000000b 	.word	0x2000000b
 80018fc:	40010800 	.word	0x40010800
 8001900:	20000009 	.word	0x20000009

08001904 <Motores>:
			break;
	}
}
void Motores(){
	if(timers[TR]!=0){
 8001904:	4b19      	ldr	r3, [pc, #100]	; (800196c <Motores+0x68>)
 8001906:	889a      	ldrh	r2, [r3, #4]
 8001908:	4b19      	ldr	r3, [pc, #100]	; (8001970 <Motores+0x6c>)
 800190a:	b292      	uxth	r2, r2
 800190c:	b10a      	cbz	r2, 8001912 <Motores+0xe>
		motor1=MOTOR_OUT;
 800190e:	2205      	movs	r2, #5
 8001910:	701a      	strb	r2, [r3, #0]

	}
	switch(motor1){
 8001912:	781a      	ldrb	r2, [r3, #0]
 8001914:	2a05      	cmp	r2, #5
 8001916:	d80a      	bhi.n	800192e <Motores+0x2a>
 8001918:	e8df f002 	tbb	[pc, r2]
 800191c:	121e2303 	.word	0x121e2303
 8001920:	0a18      	.short	0x0a18
	case MOTOR_SEARCH:
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,40);
 8001922:	2228      	movs	r2, #40	; 0x28
 8001924:	4b13      	ldr	r3, [pc, #76]	; (8001974 <Motores+0x70>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 800192a:	2264      	movs	r2, #100	; 0x64
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,0);
	break;
	case MOTOR_STB:
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,50);
 800192c:	639a      	str	r2, [r3, #56]	; 0x38
 800192e:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,80);
 8001930:	2150      	movs	r1, #80	; 0x50
 8001932:	4a10      	ldr	r2, [pc, #64]	; (8001974 <Motores+0x70>)
 8001934:	6812      	ldr	r2, [r2, #0]
 8001936:	6351      	str	r1, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8001938:	6391      	str	r1, [r2, #56]	; 0x38
	motor1=MOTOR_SEARCH;
 800193a:	2200      	movs	r2, #0
 800193c:	701a      	strb	r2, [r3, #0]
	break;
 800193e:	4770      	bx	lr
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,100);
 8001940:	2164      	movs	r1, #100	; 0x64
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <Motores+0x70>)
 8001944:	6812      	ldr	r2, [r2, #0]
 8001946:	6351      	str	r1, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,50);
 8001948:	2132      	movs	r1, #50	; 0x32
 800194a:	e7f5      	b.n	8001938 <Motores+0x34>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
 800194c:	2132      	movs	r1, #50	; 0x32
 800194e:	4a09      	ldr	r2, [pc, #36]	; (8001974 <Motores+0x70>)
 8001950:	6812      	ldr	r2, [r2, #0]
 8001952:	6351      	str	r1, [r2, #52]	; 0x34
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,100);
 8001954:	2164      	movs	r1, #100	; 0x64
 8001956:	e7ef      	b.n	8001938 <Motores+0x34>
	__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,0);
 8001958:	2200      	movs	r2, #0
 800195a:	4b06      	ldr	r3, [pc, #24]	; (8001974 <Motores+0x70>)
 800195c:	681b      	ldr	r3, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
 800195e:	635a      	str	r2, [r3, #52]	; 0x34
 8001960:	e7e4      	b.n	800192c <Motores+0x28>
 8001962:	4b04      	ldr	r3, [pc, #16]	; (8001974 <Motores+0x70>)
 8001964:	2232      	movs	r2, #50	; 0x32
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	e7f9      	b.n	800195e <Motores+0x5a>
 800196a:	bf00      	nop
 800196c:	2000003c 	.word	0x2000003c
 8001970:	20000009 	.word	0x20000009
 8001974:	20000094 	.word	0x20000094

08001978 <main>:
{
 8001978:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800197c:	2710      	movs	r7, #16
{
 800197e:	b095      	sub	sp, #84	; 0x54
  HAL_Init();
 8001980:	f7fe fc08 	bl	8000194 <HAL_Init>
  SystemClock_Config();
 8001984:	f7ff feb6 	bl	80016f4 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001988:	463a      	mov	r2, r7
 800198a:	2100      	movs	r1, #0
 800198c:	a80d      	add	r0, sp, #52	; 0x34
 800198e:	f000 fa8b 	bl	8001ea8 <memset>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001992:	4ba6      	ldr	r3, [pc, #664]	; (8001c2c <main+0x2b4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2400      	movs	r4, #0
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001996:	699a      	ldr	r2, [r3, #24]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001998:	f04f 0801 	mov.w	r8, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	f04f 0902 	mov.w	r9, #2
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019a0:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019a4:	433a      	orrs	r2, r7
 80019a6:	619a      	str	r2, [r3, #24]
 80019a8:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019aa:	f44f 5100 	mov.w	r1, #8192	; 0x2000
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ae:	403a      	ands	r2, r7
 80019b0:	9200      	str	r2, [sp, #0]
 80019b2:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b4:	699a      	ldr	r2, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019b6:	489e      	ldr	r0, [pc, #632]	; (8001c30 <main+0x2b8>)
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019b8:	f042 0220 	orr.w	r2, r2, #32
 80019bc:	619a      	str	r2, [r3, #24]
 80019be:	699a      	ldr	r2, [r3, #24]
  htim2.Init.Period = 99;
 80019c0:	f04f 0b63 	mov.w	fp, #99	; 0x63
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019c4:	f002 0220 	and.w	r2, r2, #32
 80019c8:	9201      	str	r2, [sp, #4]
 80019ca:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019cc:	699a      	ldr	r2, [r3, #24]
  htim2.Instance = TIM2;
 80019ce:	4e99      	ldr	r6, [pc, #612]	; (8001c34 <main+0x2bc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019d0:	f042 0204 	orr.w	r2, r2, #4
 80019d4:	619a      	str	r2, [r3, #24]
 80019d6:	699a      	ldr	r2, [r3, #24]
  hadc1.Instance = ADC1;
 80019d8:	4d97      	ldr	r5, [pc, #604]	; (8001c38 <main+0x2c0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019da:	f002 0204 	and.w	r2, r2, #4
 80019de:	9202      	str	r2, [sp, #8]
 80019e0:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e2:	699a      	ldr	r2, [r3, #24]
 80019e4:	f042 0208 	orr.w	r2, r2, #8
 80019e8:	619a      	str	r2, [r3, #24]
 80019ea:	699b      	ldr	r3, [r3, #24]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ee:	f003 0308 	and.w	r3, r3, #8
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80019f6:	f7fe ffbb 	bl	8000970 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019fa:	a90d      	add	r1, sp, #52	; 0x34
 80019fc:	488c      	ldr	r0, [pc, #560]	; (8001c30 <main+0x2b8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	940f      	str	r4, [sp, #60]	; 0x3c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	f8cd 9040 	str.w	r9, [sp, #64]	; 0x40
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a04:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a08:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0c:	f7fe feca 	bl	80007a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a10:	f44f 6340 	mov.w	r3, #3072	; 0xc00
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a14:	a90d      	add	r1, sp, #52	; 0x34
 8001a16:	4889      	ldr	r0, [pc, #548]	; (8001c3c <main+0x2c4>)
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a18:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a1a:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1e:	f7fe fec1 	bl	80007a4 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a22:	f44f 7300 	mov.w	r3, #512	; 0x200
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a26:	a90d      	add	r1, sp, #52	; 0x34
 8001a28:	4885      	ldr	r0, [pc, #532]	; (8001c40 <main+0x2c8>)
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a2a:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a2c:	940e      	str	r4, [sp, #56]	; 0x38
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	940f      	str	r4, [sp, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a30:	f7fe feb8 	bl	80007a4 <HAL_GPIO_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a34:	4621      	mov	r1, r4
 8001a36:	463a      	mov	r2, r7
 8001a38:	a80d      	add	r0, sp, #52	; 0x34
 8001a3a:	f000 fa35 	bl	8001ea8 <memset>
  htim2.Init.Prescaler = 719;
 8001a3e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001a42:	f240 23cf 	movw	r3, #719	; 0x2cf
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a46:	4630      	mov	r0, r6
  htim2.Init.Prescaler = 719;
 8001a48:	e886 000c 	stmia.w	r6, {r2, r3}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a4c:	9406      	str	r4, [sp, #24]
 8001a4e:	9407      	str	r4, [sp, #28]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a50:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a52:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	61b4      	str	r4, [r6, #24]
  htim2.Init.Period = 99;
 8001a56:	f8c6 b00c 	str.w	fp, [r6, #12]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001a5a:	f7ff fd1d 	bl	8001498 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a62:	a90d      	add	r1, sp, #52	; 0x34
 8001a64:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a66:	930d      	str	r3, [sp, #52]	; 0x34
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001a68:	f7ff fb7f 	bl	800116a <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a6c:	a906      	add	r1, sp, #24
 8001a6e:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a70:	9406      	str	r4, [sp, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a72:	9407      	str	r4, [sp, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a74:	f7ff fe1a 	bl	80016ac <HAL_TIMEx_MasterConfigSynchronization>
  hadc1.Instance = ADC1;
 8001a78:	4b72      	ldr	r3, [pc, #456]	; (8001c44 <main+0x2cc>)
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a7a:	4628      	mov	r0, r5
  hadc1.Instance = ADC1;
 8001a7c:	602b      	str	r3, [r5, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001a7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a82:	60ab      	str	r3, [r5, #8]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a84:	f44f 2360 	mov.w	r3, #917504	; 0xe0000
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001a88:	60ec      	str	r4, [r5, #12]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a8a:	61eb      	str	r3, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001a8c:	616c      	str	r4, [r5, #20]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001a8e:	606c      	str	r4, [r5, #4]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a90:	940d      	str	r4, [sp, #52]	; 0x34
 8001a92:	940e      	str	r4, [sp, #56]	; 0x38
 8001a94:	940f      	str	r4, [sp, #60]	; 0x3c
  hadc1.Init.NbrOfConversion = 16;
 8001a96:	612f      	str	r7, [r5, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a98:	f7fe fd82 	bl	80005a0 <HAL_ADC_Init>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001a9c:	a90d      	add	r1, sp, #52	; 0x34
 8001a9e:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_0;
 8001aa0:	940d      	str	r4, [sp, #52]	; 0x34
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001aa2:	940f      	str	r4, [sp, #60]	; 0x3c
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001aa4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aa8:	f7fe fc3a 	bl	8000320 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aac:	a90d      	add	r1, sp, #52	; 0x34
 8001aae:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001ab0:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ab4:	f7fe fc34 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ab8:	2303      	movs	r3, #3
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001aba:	f04f 0904 	mov.w	r9, #4
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001abe:	a90d      	add	r1, sp, #52	; 0x34
 8001ac0:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001ac2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac4:	f7fe fc2c 	bl	8000320 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac8:	a90d      	add	r1, sp, #52	; 0x34
 8001aca:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001acc:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad0:	f7fe fc26 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ad4:	2305      	movs	r3, #5
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad6:	a90d      	add	r1, sp, #52	; 0x34
 8001ad8:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_5;
 8001ada:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001adc:	f7fe fc20 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001ae0:	2306      	movs	r3, #6
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae2:	a90d      	add	r1, sp, #52	; 0x34
 8001ae4:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_6;
 8001ae6:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ae8:	f7fe fc1a 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001aec:	2307      	movs	r3, #7
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001aee:	a90d      	add	r1, sp, #52	; 0x34
 8001af0:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_7;
 8001af2:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001af4:	f7fe fc14 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001af8:	2308      	movs	r3, #8
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001afa:	a90d      	add	r1, sp, #52	; 0x34
 8001afc:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8001afe:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b00:	f7fe fc0e 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001b04:	2309      	movs	r3, #9
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b06:	a90d      	add	r1, sp, #52	; 0x34
 8001b08:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_9;
 8001b0a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b0c:	f7fe fc08 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001b10:	230a      	movs	r3, #10
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b12:	a90d      	add	r1, sp, #52	; 0x34
 8001b14:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_10;
 8001b16:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b18:	f7fe fc02 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001b1c:	230b      	movs	r3, #11
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b1e:	a90d      	add	r1, sp, #52	; 0x34
 8001b20:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_11;
 8001b22:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b24:	f7fe fbfc 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001b28:	230c      	movs	r3, #12
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2a:	a90d      	add	r1, sp, #52	; 0x34
 8001b2c:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_12;
 8001b2e:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b30:	f7fe fbf6 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001b34:	230d      	movs	r3, #13
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b36:	a90d      	add	r1, sp, #52	; 0x34
 8001b38:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_13;
 8001b3a:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b3c:	f7fe fbf0 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001b40:	230e      	movs	r3, #14
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b42:	a90d      	add	r1, sp, #52	; 0x34
 8001b44:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_14;
 8001b46:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b48:	f7fe fbea 	bl	8000320 <HAL_ADC_ConfigChannel>
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001b4c:	230f      	movs	r3, #15
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b4e:	a90d      	add	r1, sp, #52	; 0x34
 8001b50:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_15;
 8001b52:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b54:	f7fe fbe4 	bl	8000320 <HAL_ADC_ConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b58:	a90d      	add	r1, sp, #52	; 0x34
 8001b5a:	4628      	mov	r0, r5
  sConfig.Rank = ADC_REGULAR_RANK_16;
 8001b5c:	970e      	str	r7, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b5e:	f7fe fbdf 	bl	8000320 <HAL_ADC_ConfigChannel>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b62:	4621      	mov	r1, r4
 8001b64:	221c      	movs	r2, #28
 8001b66:	a806      	add	r0, sp, #24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b68:	9404      	str	r4, [sp, #16]
 8001b6a:	9405      	str	r4, [sp, #20]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	f000 f99c 	bl	8001ea8 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b70:	221c      	movs	r2, #28
 8001b72:	4621      	mov	r1, r4
 8001b74:	a80d      	add	r0, sp, #52	; 0x34
 8001b76:	f000 f997 	bl	8001ea8 <memset>
  htim1.Init.Prescaler = 71;
 8001b7a:	2347      	movs	r3, #71	; 0x47
  htim1.Instance = TIM1;
 8001b7c:	4d32      	ldr	r5, [pc, #200]	; (8001c48 <main+0x2d0>)
  htim1.Init.Prescaler = 71;
 8001b7e:	4933      	ldr	r1, [pc, #204]	; (8001c4c <main+0x2d4>)
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b80:	4628      	mov	r0, r5
  htim1.Init.Prescaler = 71;
 8001b82:	e885 000a 	stmia.w	r5, {r1, r3}
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b86:	60ac      	str	r4, [r5, #8]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b88:	612c      	str	r4, [r5, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b8a:	616c      	str	r4, [r5, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8c:	61ac      	str	r4, [r5, #24]
  htim1.Init.Period = 99;
 8001b8e:	f8c5 b00c 	str.w	fp, [r5, #12]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b92:	f7ff fc9b 	bl	80014cc <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b96:	eb0d 0107 	add.w	r1, sp, r7
 8001b9a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9c:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b9e:	9405      	str	r4, [sp, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001ba0:	f7ff fd84 	bl	80016ac <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ba4:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ba6:	4622      	mov	r2, r4
 8001ba8:	a906      	add	r1, sp, #24
 8001baa:	4628      	mov	r0, r5
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bac:	9306      	str	r3, [sp, #24]
  sConfigOC.Pulse = 0;
 8001bae:	9407      	str	r4, [sp, #28]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bb0:	9408      	str	r4, [sp, #32]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bb2:	9409      	str	r4, [sp, #36]	; 0x24
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bb4:	940a      	str	r4, [sp, #40]	; 0x28
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bb6:	940b      	str	r4, [sp, #44]	; 0x2c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bb8:	940c      	str	r4, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bba:	f7ff fccd 	bl	8001558 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001bbe:	464a      	mov	r2, r9
 8001bc0:	a906      	add	r1, sp, #24
 8001bc2:	4628      	mov	r0, r5
 8001bc4:	f7ff fcc8 	bl	8001558 <HAL_TIM_PWM_ConfigChannel>
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bc8:	a90d      	add	r1, sp, #52	; 0x34
 8001bca:	4628      	mov	r0, r5
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001bcc:	940d      	str	r4, [sp, #52]	; 0x34
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001bce:	940e      	str	r4, [sp, #56]	; 0x38
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001bd0:	940f      	str	r4, [sp, #60]	; 0x3c
  sBreakDeadTimeConfig.DeadTime = 0;
 8001bd2:	9410      	str	r4, [sp, #64]	; 0x40
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001bd4:	9411      	str	r4, [sp, #68]	; 0x44
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001bd6:	9413      	str	r4, [sp, #76]	; 0x4c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001bd8:	f8cd a048 	str.w	sl, [sp, #72]	; 0x48
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001bdc:	f7ff fd40 	bl	8001660 <HAL_TIMEx_ConfigBreakDeadTime>
  HAL_TIM_MspPostInit(&htim1);
 8001be0:	4628      	mov	r0, r5
 8001be2:	f000 f8b9 	bl	8001d58 <HAL_TIM_MspPostInit>
  HAL_TIM_Base_Start_IT(&htim2);
 8001be6:	4630      	mov	r0, r6
 8001be8:	f7ff fab4 	bl	8001154 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_1);
 8001bec:	4621      	mov	r1, r4
 8001bee:	4628      	mov	r0, r5
 8001bf0:	f7ff fd20 	bl	8001634 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_2);
 8001bf4:	4649      	mov	r1, r9
 8001bf6:	4628      	mov	r0, r5
 8001bf8:	f7ff fd1c 	bl	8001634 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
 8001bfc:	2232      	movs	r2, #50	; 0x32
  motor1=MOTOR_STB;
 8001bfe:	4b14      	ldr	r3, [pc, #80]	; (8001c50 <main+0x2d8>)
	  if(bandera==1){
 8001c00:	4c14      	ldr	r4, [pc, #80]	; (8001c54 <main+0x2dc>)
  motor1=MOTOR_STB;
 8001c02:	f883 8000 	strb.w	r8, [r3]
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1,50);
 8001c06:	682b      	ldr	r3, [r5, #0]
 8001c08:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2,50);
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
	  Button();
 8001c0c:	f7ff fdc0 	bl	8001790 <Button>
	  if(bandera==1){
 8001c10:	6823      	ldr	r3, [r4, #0]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d1fa      	bne.n	8001c0c <main+0x294>
		Sensor_distancia();
 8001c16:	f7ff fde7 	bl	80017e8 <Sensor_distancia>
		Sensores_piso();
 8001c1a:	f7ff fe21 	bl	8001860 <Sensores_piso>
		Sensores_piso1();
 8001c1e:	f7ff fe3d 	bl	800189c <Sensores_piso1>
		Sensores_piso2();
 8001c22:	f7ff fe55 	bl	80018d0 <Sensores_piso2>
		Motores();
 8001c26:	f7ff fe6d 	bl	8001904 <Motores>
 8001c2a:	e7ef      	b.n	8001c0c <main+0x294>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	40011000 	.word	0x40011000
 8001c34:	200000d4 	.word	0x200000d4
 8001c38:	20000064 	.word	0x20000064
 8001c3c:	40010800 	.word	0x40010800
 8001c40:	40010c00 	.word	0x40010c00
 8001c44:	40012400 	.word	0x40012400
 8001c48:	20000094 	.word	0x20000094
 8001c4c:	40012c00 	.word	0x40012c00
 8001c50:	20000009 	.word	0x20000009
 8001c54:	20000030 	.word	0x20000030

08001c58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c58:	4b0e      	ldr	r3, [pc, #56]	; (8001c94 <HAL_MspInit+0x3c>)
{
 8001c5a:	b082      	sub	sp, #8
  __HAL_RCC_AFIO_CLK_ENABLE();
 8001c5c:	699a      	ldr	r2, [r3, #24]
 8001c5e:	f042 0201 	orr.w	r2, r2, #1
 8001c62:	619a      	str	r2, [r3, #24]
 8001c64:	699a      	ldr	r2, [r3, #24]
 8001c66:	f002 0201 	and.w	r2, r2, #1
 8001c6a:	9200      	str	r2, [sp, #0]
 8001c6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c6e:	69da      	ldr	r2, [r3, #28]
 8001c70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c74:	61da      	str	r2, [r3, #28]
 8001c76:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  /**NOJTAG: JTAG-DP Disabled and SW-DP Enabled 
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c78:	4a07      	ldr	r2, [pc, #28]	; (8001c98 <HAL_MspInit+0x40>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c7e:	9301      	str	r3, [sp, #4]
 8001c80:	9b01      	ldr	r3, [sp, #4]
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001c82:	6853      	ldr	r3, [r2, #4]
 8001c84:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001c88:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001c8c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c8e:	b002      	add	sp, #8
 8001c90:	4770      	bx	lr
 8001c92:	bf00      	nop
 8001c94:	40021000 	.word	0x40021000
 8001c98:	40010000 	.word	0x40010000

08001c9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c9c:	b510      	push	{r4, lr}
 8001c9e:	4604      	mov	r4, r0
 8001ca0:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca2:	2210      	movs	r2, #16
 8001ca4:	2100      	movs	r1, #0
 8001ca6:	a802      	add	r0, sp, #8
 8001ca8:	f000 f8fe 	bl	8001ea8 <memset>
  if(hadc->Instance==ADC1)
 8001cac:	6822      	ldr	r2, [r4, #0]
 8001cae:	4b10      	ldr	r3, [pc, #64]	; (8001cf0 <HAL_ADC_MspInit+0x54>)
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d11b      	bne.n	8001cec <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cb4:	f503 436c 	add.w	r3, r3, #60416	; 0xec00
 8001cb8:	699a      	ldr	r2, [r3, #24]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cba:	a902      	add	r1, sp, #8
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cbc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001cc0:	619a      	str	r2, [r3, #24]
 8001cc2:	699a      	ldr	r2, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc4:	480b      	ldr	r0, [pc, #44]	; (8001cf4 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cc6:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8001cca:	9200      	str	r2, [sp, #0]
 8001ccc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cce:	699a      	ldr	r2, [r3, #24]
 8001cd0:	f042 0204 	orr.w	r2, r2, #4
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	9301      	str	r3, [sp, #4]
 8001cde:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce8:	f7fe fd5c 	bl	80007a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001cec:	b006      	add	sp, #24
 8001cee:	bd10      	pop	{r4, pc}
 8001cf0:	40012400 	.word	0x40012400
 8001cf4:	40010800 	.word	0x40010800

08001cf8 <HAL_TIM_PWM_MspInit>:
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{

  if(htim_pwm->Instance==TIM1)
 8001cf8:	6802      	ldr	r2, [r0, #0]
 8001cfa:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <HAL_TIM_PWM_MspInit+0x24>)
{
 8001cfc:	b082      	sub	sp, #8
  if(htim_pwm->Instance==TIM1)
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d10a      	bne.n	8001d18 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d02:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d0c:	619a      	str	r2, [r3, #24]
 8001d0e:	699b      	ldr	r3, [r3, #24]
 8001d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d14:	9301      	str	r3, [sp, #4]
 8001d16:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d18:	b002      	add	sp, #8
 8001d1a:	4770      	bx	lr
 8001d1c:	40012c00 	.word	0x40012c00

08001d20 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001d20:	6803      	ldr	r3, [r0, #0]
{
 8001d22:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001d24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d28:	d112      	bne.n	8001d50 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d2a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
 8001d2e:	69da      	ldr	r2, [r3, #28]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d30:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d32:	f042 0201 	orr.w	r2, r2, #1
 8001d36:	61da      	str	r2, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d38:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3a:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d3c:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001d3e:	f003 0301 	and.w	r3, r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001d46:	f7fe fcd7 	bl	80006f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001d4a:	201c      	movs	r0, #28
 8001d4c:	f7fe fd08 	bl	8000760 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001d50:	b003      	add	sp, #12
 8001d52:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001d58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001d58:	b510      	push	{r4, lr}
 8001d5a:	4604      	mov	r4, r0
 8001d5c:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d5e:	2210      	movs	r2, #16
 8001d60:	2100      	movs	r1, #0
 8001d62:	a802      	add	r0, sp, #8
 8001d64:	f000 f8a0 	bl	8001ea8 <memset>
  if(htim->Instance==TIM1)
 8001d68:	6822      	ldr	r2, [r4, #0]
 8001d6a:	4b0d      	ldr	r3, [pc, #52]	; (8001da0 <HAL_TIM_MspPostInit+0x48>)
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d114      	bne.n	8001d9a <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d70:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8001d74:	699a      	ldr	r2, [r3, #24]
    PA9     ------> TIM1_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d76:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d78:	f042 0204 	orr.w	r2, r2, #4
 8001d7c:	619a      	str	r2, [r3, #24]
 8001d7e:	699b      	ldr	r3, [r3, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d80:	4808      	ldr	r0, [pc, #32]	; (8001da4 <HAL_TIM_MspPostInit+0x4c>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d82:	f003 0304 	and.w	r3, r3, #4
 8001d86:	9301      	str	r3, [sp, #4]
 8001d88:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d8e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d90:	2302      	movs	r3, #2
 8001d92:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d96:	f7fe fd05 	bl	80007a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001d9a:	b006      	add	sp, #24
 8001d9c:	bd10      	pop	{r4, pc}
 8001d9e:	bf00      	nop
 8001da0:	40012c00 	.word	0x40012c00
 8001da4:	40010800 	.word	0x40010800

08001da8 <NMI_Handler>:
 8001da8:	4770      	bx	lr

08001daa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001daa:	e7fe      	b.n	8001daa <HardFault_Handler>

08001dac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001dac:	e7fe      	b.n	8001dac <MemManage_Handler>

08001dae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001dae:	e7fe      	b.n	8001dae <BusFault_Handler>

08001db0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001db0:	e7fe      	b.n	8001db0 <UsageFault_Handler>

08001db2 <SVC_Handler>:
 8001db2:	4770      	bx	lr

08001db4 <DebugMon_Handler>:
 8001db4:	4770      	bx	lr

08001db6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001db6:	4770      	bx	lr

08001db8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001db8:	f7fe b9fe 	b.w	80001b8 <HAL_IncTick>

08001dbc <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001dbc:	4801      	ldr	r0, [pc, #4]	; (8001dc4 <TIM2_IRQHandler+0x8>)
 8001dbe:	f7ff ba91 	b.w	80012e4 <HAL_TIM_IRQHandler>
 8001dc2:	bf00      	nop
 8001dc4:	200000d4 	.word	0x200000d4

08001dc8 <SystemInit>:
  */
void SystemInit (void)
{
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001dc8:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <SystemInit+0x40>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	f042 0201 	orr.w	r2, r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001dd2:	6859      	ldr	r1, [r3, #4]
 8001dd4:	4a0d      	ldr	r2, [pc, #52]	; (8001e0c <SystemInit+0x44>)
 8001dd6:	400a      	ands	r2, r1
 8001dd8:	605a      	str	r2, [r3, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001de0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001de4:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001dec:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001dee:	685a      	ldr	r2, [r3, #4]
 8001df0:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001df4:	605a      	str	r2, [r3, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8001df6:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8001dfa:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8001dfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e00:	4b03      	ldr	r3, [pc, #12]	; (8001e10 <SystemInit+0x48>)
 8001e02:	609a      	str	r2, [r3, #8]
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
 8001e0c:	f8ff0000 	.word	0xf8ff0000
 8001e10:	e000ed00 	.word	0xe000ed00

08001e14 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001e14:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001e16:	e003      	b.n	8001e20 <LoopCopyDataInit>

08001e18 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001e18:	4b0b      	ldr	r3, [pc, #44]	; (8001e48 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8001e1a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001e1c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8001e1e:	3104      	adds	r1, #4

08001e20 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8001e20:	480a      	ldr	r0, [pc, #40]	; (8001e4c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8001e24:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001e26:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001e28:	d3f6      	bcc.n	8001e18 <CopyDataInit>
  ldr r2, =_sbss
 8001e2a:	4a0a      	ldr	r2, [pc, #40]	; (8001e54 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8001e2c:	e002      	b.n	8001e34 <LoopFillZerobss>

08001e2e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8001e2e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8001e30:	f842 3b04 	str.w	r3, [r2], #4

08001e34 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8001e36:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001e38:	d3f9      	bcc.n	8001e2e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001e3a:	f7ff ffc5 	bl	8001dc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e3e:	f000 f80f 	bl	8001e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001e42:	f7ff fd99 	bl	8001978 <main>
  bx lr
 8001e46:	4770      	bx	lr
  ldr r3, =_sidata
 8001e48:	08001f10 	.word	0x08001f10
  ldr r0, =_sdata
 8001e4c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001e50:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8001e54:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8001e58:	20000114 	.word	0x20000114

08001e5c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001e5c:	e7fe      	b.n	8001e5c <ADC1_2_IRQHandler>
	...

08001e60 <__libc_init_array>:
 8001e60:	b570      	push	{r4, r5, r6, lr}
 8001e62:	2500      	movs	r5, #0
 8001e64:	4e0c      	ldr	r6, [pc, #48]	; (8001e98 <__libc_init_array+0x38>)
 8001e66:	4c0d      	ldr	r4, [pc, #52]	; (8001e9c <__libc_init_array+0x3c>)
 8001e68:	1ba4      	subs	r4, r4, r6
 8001e6a:	10a4      	asrs	r4, r4, #2
 8001e6c:	42a5      	cmp	r5, r4
 8001e6e:	d109      	bne.n	8001e84 <__libc_init_array+0x24>
 8001e70:	f000 f822 	bl	8001eb8 <_init>
 8001e74:	2500      	movs	r5, #0
 8001e76:	4e0a      	ldr	r6, [pc, #40]	; (8001ea0 <__libc_init_array+0x40>)
 8001e78:	4c0a      	ldr	r4, [pc, #40]	; (8001ea4 <__libc_init_array+0x44>)
 8001e7a:	1ba4      	subs	r4, r4, r6
 8001e7c:	10a4      	asrs	r4, r4, #2
 8001e7e:	42a5      	cmp	r5, r4
 8001e80:	d105      	bne.n	8001e8e <__libc_init_array+0x2e>
 8001e82:	bd70      	pop	{r4, r5, r6, pc}
 8001e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e88:	4798      	blx	r3
 8001e8a:	3501      	adds	r5, #1
 8001e8c:	e7ee      	b.n	8001e6c <__libc_init_array+0xc>
 8001e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001e92:	4798      	blx	r3
 8001e94:	3501      	adds	r5, #1
 8001e96:	e7f2      	b.n	8001e7e <__libc_init_array+0x1e>
 8001e98:	08001f08 	.word	0x08001f08
 8001e9c:	08001f08 	.word	0x08001f08
 8001ea0:	08001f08 	.word	0x08001f08
 8001ea4:	08001f0c 	.word	0x08001f0c

08001ea8 <memset>:
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	4402      	add	r2, r0
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d100      	bne.n	8001eb2 <memset+0xa>
 8001eb0:	4770      	bx	lr
 8001eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8001eb6:	e7f9      	b.n	8001eac <memset+0x4>

08001eb8 <_init>:
 8001eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001eba:	bf00      	nop
 8001ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001ebe:	bc08      	pop	{r3}
 8001ec0:	469e      	mov	lr, r3
 8001ec2:	4770      	bx	lr

08001ec4 <_fini>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	bf00      	nop
 8001ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001eca:	bc08      	pop	{r3}
 8001ecc:	469e      	mov	lr, r3
 8001ece:	4770      	bx	lr
